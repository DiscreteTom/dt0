// generated by scripts/serialize.ts

// comment all lines and uncomment the next line to re-generate the data
// export const serialized = undefined;

import type { ELR } from "retsac";
import type { DT0ParserBuilder } from "./builder.js";

export const serialized = {
  hash: -1899128238,
  data: {
    dfa: {
      NTs: [
        "fn_defs",
        "fn_def",
        "param",
        "if_stmt",
        "loop_stmt",
        "stmt",
        "assign_stmt",
        "ret_stmt",
        "exp",
        "__0",
        "__1",
        "__2",
        "__3",
        "__4",
      ],
      entryNTs: ["fn_defs"],
      grammars: [
        {
          type: 1,
          kind: "__0",
          name: "__0",
          text: undefined,
          grammarString: "__0",
          grammarStringNoName: "__0",
        },
        {
          type: 0,
          kind: "fn",
          name: "fn",
          text: undefined,
          grammarString: "fn",
          grammarStringNoName: "fn",
        },
        {
          type: 0,
          kind: "identifier",
          name: "identifier",
          text: undefined,
          grammarString: "identifier",
          grammarStringNoName: "identifier",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "(",
          grammarString: "'('",
          grammarStringNoName: "'('",
        },
        {
          type: 1,
          kind: "param",
          name: "param",
          text: undefined,
          grammarString: "param",
          grammarStringNoName: "param",
        },
        {
          type: 1,
          kind: "__1",
          name: "__1",
          text: undefined,
          grammarString: "__1",
          grammarStringNoName: "__1",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: ")",
          grammarString: "')'",
          grammarStringNoName: "')'",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "{",
          grammarString: "'{'",
          grammarStringNoName: "'{'",
        },
        {
          type: 1,
          kind: "__2",
          name: "__2",
          text: undefined,
          grammarString: "__2",
          grammarStringNoName: "__2",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "}",
          grammarString: "'}'",
          grammarStringNoName: "'}'",
        },
        {
          type: 0,
          kind: "if",
          name: "if",
          text: undefined,
          grammarString: "if",
          grammarStringNoName: "if",
        },
        {
          type: 1,
          kind: "exp",
          name: "exp",
          text: undefined,
          grammarString: "exp",
          grammarStringNoName: "exp",
        },
        {
          type: 1,
          kind: "__3",
          name: "__3",
          text: undefined,
          grammarString: "__3",
          grammarStringNoName: "__3",
        },
        {
          type: 0,
          kind: "else",
          name: "else",
          text: undefined,
          grammarString: "else",
          grammarStringNoName: "else",
        },
        {
          type: 1,
          kind: "__4",
          name: "__4",
          text: undefined,
          grammarString: "__4",
          grammarStringNoName: "__4",
        },
        {
          type: 0,
          kind: "do",
          name: "do",
          text: undefined,
          grammarString: "do",
          grammarStringNoName: "do",
        },
        {
          type: 0,
          kind: "while",
          name: "while",
          text: undefined,
          grammarString: "while",
          grammarStringNoName: "while",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: ";",
          grammarString: "';'",
          grammarStringNoName: "';'",
        },
        {
          type: 1,
          kind: "assign_stmt",
          name: "assign_stmt",
          text: undefined,
          grammarString: "assign_stmt",
          grammarStringNoName: "assign_stmt",
        },
        {
          type: 1,
          kind: "ret_stmt",
          name: "ret_stmt",
          text: undefined,
          grammarString: "ret_stmt",
          grammarStringNoName: "ret_stmt",
        },
        {
          type: 1,
          kind: "if_stmt",
          name: "if_stmt",
          text: undefined,
          grammarString: "if_stmt",
          grammarStringNoName: "if_stmt",
        },
        {
          type: 1,
          kind: "loop_stmt",
          name: "loop_stmt",
          text: undefined,
          grammarString: "loop_stmt",
          grammarStringNoName: "loop_stmt",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "=",
          grammarString: "'='",
          grammarStringNoName: "'='",
        },
        {
          type: 0,
          kind: "return",
          name: "return",
          text: undefined,
          grammarString: "return",
          grammarStringNoName: "return",
        },
        {
          type: 0,
          kind: "integer",
          name: "integer",
          text: undefined,
          grammarString: "integer",
          grammarStringNoName: "integer",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "+",
          grammarString: "'+'",
          grammarStringNoName: "'+'",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "-",
          grammarString: "'-'",
          grammarStringNoName: "'-'",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "*",
          grammarString: "'*'",
          grammarStringNoName: "'*'",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "/",
          grammarString: "'/'",
          grammarStringNoName: "'/'",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "%",
          grammarString: "'%'",
          grammarStringNoName: "'%'",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "&&",
          grammarString: "'&&'",
          grammarStringNoName: "'&&'",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "||",
          grammarString: "'||'",
          grammarStringNoName: "'||'",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "!",
          grammarString: "'!'",
          grammarStringNoName: "'!'",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "==",
          grammarString: "'=='",
          grammarStringNoName: "'=='",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "!=",
          grammarString: "'!='",
          grammarStringNoName: "'!='",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: ">",
          grammarString: "'>'",
          grammarStringNoName: "'>'",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "<",
          grammarString: "'<'",
          grammarStringNoName: "'<'",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: ">=",
          grammarString: "'>='",
          grammarStringNoName: "'>='",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "<=",
          grammarString: "'<='",
          grammarStringNoName: "'<='",
        },
        {
          type: 1,
          kind: "fn_def",
          name: "fn_def",
          text: undefined,
          grammarString: "fn_def",
          grammarStringNoName: "fn_def",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: ",",
          grammarString: "','",
          grammarStringNoName: "','",
        },
        {
          type: 1,
          kind: "stmt",
          name: "stmt",
          text: undefined,
          grammarString: "stmt",
          grammarStringNoName: "stmt",
        },
        {
          type: 1,
          kind: "stmt",
          name: "ifTrue",
          text: undefined,
          grammarString: "stmt@ifTrue",
          grammarStringNoName: "stmt",
        },
        {
          type: 1,
          kind: "stmt",
          name: "ifFalse",
          text: undefined,
          grammarString: "stmt@ifFalse",
          grammarStringNoName: "stmt",
        },
        {
          type: 1,
          kind: "fn_defs",
          name: "fn_defs",
          text: undefined,
          grammarString: "fn_defs",
          grammarStringNoName: "fn_defs",
        },
      ],
      grammarRules: [
        {
          NT: "fn_defs",
          rule: ["__0"],
          conflicts: [],
          resolved: [],
          id: "fn_defs:__0",
          hydrationId: 0,
        },
        {
          NT: "fn_def",
          rule: [
            "fn",
            "identifier",
            "'('",
            "param",
            "__1",
            "')'",
            "'{'",
            "__2",
            "'}'",
          ],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',param,__1,')','{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',param,')','{',__2,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',param,')','{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',')','{',__2,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',')','{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          hydrationId: 1,
        },
        {
          NT: "fn_def",
          rule: [
            "fn",
            "identifier",
            "'('",
            "param",
            "__1",
            "')'",
            "'{'",
            "'}'",
          ],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',param,')','{',__2,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',param,')','{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',')','{',__2,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',')','{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "fn_def:fn,identifier,'(',param,__1,')','{','}'",
          hydrationId: 1,
        },
        {
          NT: "fn_def",
          rule: [
            "fn",
            "identifier",
            "'('",
            "param",
            "')'",
            "'{'",
            "__2",
            "'}'",
          ],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',param,__1,')','{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',param,')','{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',')','{',__2,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',')','{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "fn_def:fn,identifier,'(',param,')','{',__2,'}'",
          hydrationId: 1,
        },
        {
          NT: "fn_def",
          rule: ["fn", "identifier", "'('", "param", "')'", "'{'", "'}'"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',param,__1,')','{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',param,')','{',__2,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',')','{',__2,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',')','{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "fn_def:fn,identifier,'(',param,')','{','}'",
          hydrationId: 1,
        },
        {
          NT: "fn_def",
          rule: ["fn", "identifier", "'('", "')'", "'{'", "__2", "'}'"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',param,__1,')','{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',param,')','{',__2,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',param,')','{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',')','{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "fn_def:fn,identifier,'(',')','{',__2,'}'",
          hydrationId: 1,
        },
        {
          NT: "fn_def",
          rule: ["fn", "identifier", "'('", "')'", "'{'", "'}'"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',param,__1,')','{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',param,')','{',__2,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',param,')','{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "fn_def:fn,identifier,'(',')','{',__2,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "fn_def:fn,identifier,'(',')','{','}'",
          hydrationId: 1,
        },
        {
          NT: "param",
          rule: ["identifier"],
          conflicts: [],
          resolved: [],
          id: "param:identifier",
          hydrationId: 2,
        },
        {
          NT: "if_stmt",
          rule: ["if", "exp", "'{'", "__3", "'}'", "else", "'{'", "__4", "'}'"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{',__3,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{','}',else,'{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          hydrationId: 3,
        },
        {
          NT: "if_stmt",
          rule: ["if", "exp", "'{'", "__3", "'}'", "else", "'{'", "'}'"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{',__3,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{','}',else,'{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "if_stmt:if,exp,'{',__3,'}',else,'{','}'",
          hydrationId: 3,
        },
        {
          NT: "if_stmt",
          rule: ["if", "exp", "'{'", "__3", "'}'"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{','}',else,'{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "if_stmt:if,exp,'{',__3,'}'",
          hydrationId: 3,
        },
        {
          NT: "if_stmt",
          rule: ["if", "exp", "'{'", "'}'", "else", "'{'", "__4", "'}'"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{',__3,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{','}',else,'{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "if_stmt:if,exp,'{','}',else,'{',__4,'}'",
          hydrationId: 3,
        },
        {
          NT: "if_stmt",
          rule: ["if", "exp", "'{'", "'}'", "else", "'{'", "'}'"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{',__3,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "if_stmt:if,exp,'{','}',else,'{','}'",
          hydrationId: 3,
        },
        {
          NT: "if_stmt",
          rule: ["if", "exp", "'{'", "'}'"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{',__3,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "if_stmt:if,exp,'{','}',else,'{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "if_stmt:if,exp,'{','}'",
          hydrationId: 3,
        },
        {
          NT: "loop_stmt",
          rule: ["do", "'{'", "__2", "'}'", "while", "exp", "';'"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "loop_stmt:do,'{','}',while,exp,';'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "loop_stmt:do,'{',__2,'}',while,exp,';'",
          hydrationId: 4,
        },
        {
          NT: "loop_stmt",
          rule: ["do", "'{'", "'}'", "while", "exp", "';'"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "loop_stmt:do,'{',__2,'}',while,exp,';'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "loop_stmt:do,'{','}',while,exp,';'",
          hydrationId: 4,
        },
        {
          NT: "loop_stmt",
          rule: ["while", "exp", "'{'", "__2", "'}'"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "loop_stmt:while,exp,'{','}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "loop_stmt:while,exp,'{',__2,'}'",
          hydrationId: 5,
        },
        {
          NT: "loop_stmt",
          rule: ["while", "exp", "'{'", "'}'"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "loop_stmt:while,exp,'{',__2,'}'",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "loop_stmt:while,exp,'{','}'",
          hydrationId: 5,
        },
        {
          NT: "stmt",
          rule: ["assign_stmt"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "stmt:ret_stmt",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "stmt:if_stmt",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "stmt:loop_stmt",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "stmt:assign_stmt",
          hydrationId: 6,
        },
        {
          NT: "stmt",
          rule: ["ret_stmt"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "stmt:assign_stmt",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "stmt:if_stmt",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "stmt:loop_stmt",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "stmt:ret_stmt",
          hydrationId: 6,
        },
        {
          NT: "stmt",
          rule: ["if_stmt"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "stmt:assign_stmt",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "stmt:ret_stmt",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "stmt:loop_stmt",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "stmt:if_stmt",
          hydrationId: 6,
        },
        {
          NT: "stmt",
          rule: ["loop_stmt"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "stmt:assign_stmt",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "stmt:ret_stmt",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "stmt:if_stmt",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "stmt:loop_stmt",
          hydrationId: 6,
        },
        {
          NT: "assign_stmt",
          rule: ["identifier", "'='", "exp", "';'"],
          conflicts: [],
          resolved: [],
          id: "assign_stmt:identifier,'=',exp,';'",
          hydrationId: 7,
        },
        {
          NT: "ret_stmt",
          rule: ["return", "exp", "';'"],
          conflicts: [],
          resolved: [],
          id: "ret_stmt:return,exp,';'",
          hydrationId: 8,
        },
        {
          NT: "exp",
          rule: ["integer"],
          conflicts: [],
          resolved: [],
          id: "exp:integer",
          hydrationId: 9,
        },
        {
          NT: "exp",
          rule: ["identifier"],
          conflicts: [],
          resolved: [],
          id: "exp:identifier",
          hydrationId: 10,
        },
        {
          NT: "exp",
          rule: ["exp", "'+'", "exp"],
          conflicts: [
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              next: ["'+'"],
              handleEnd: false,
              resolvers: [26],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              next: ["'-'"],
              handleEnd: false,
              resolvers: [27, 29],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              next: ["'*'"],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              next: ["'/'"],
              handleEnd: false,
              resolvers: [6],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              next: ["'%'"],
              handleEnd: false,
              resolvers: [8],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              next: ["'&&'"],
              handleEnd: false,
              resolvers: [22],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              next: ["'||'"],
              handleEnd: false,
              resolvers: [24],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              next: ["'=='"],
              handleEnd: false,
              resolvers: [18],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              next: ["'!='"],
              handleEnd: false,
              resolvers: [20],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              next: ["'>'"],
              handleEnd: false,
              resolvers: [14],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              next: ["'<'"],
              handleEnd: false,
              resolvers: [10],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              next: ["'>='"],
              handleEnd: false,
              resolvers: [16],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              next: ["'<='"],
              handleEnd: false,
              resolvers: [12],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: "exp:'!',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'!',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:'-',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'-',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          id: "exp:exp,'+',exp",
          hydrationId: 11,
        },
        {
          NT: "exp",
          rule: ["exp", "'-'", "exp"],
          conflicts: [
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              next: ["'+'"],
              handleEnd: false,
              resolvers: [26, 28],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              next: ["'-'"],
              handleEnd: false,
              resolvers: [30],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              next: ["'*'"],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              next: ["'/'"],
              handleEnd: false,
              resolvers: [6],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              next: ["'%'"],
              handleEnd: false,
              resolvers: [8],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              next: ["'&&'"],
              handleEnd: false,
              resolvers: [22],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              next: ["'||'"],
              handleEnd: false,
              resolvers: [24],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              next: ["'=='"],
              handleEnd: false,
              resolvers: [18],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              next: ["'!='"],
              handleEnd: false,
              resolvers: [20],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              next: ["'>'"],
              handleEnd: false,
              resolvers: [14],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              next: ["'<'"],
              handleEnd: false,
              resolvers: [10],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              next: ["'>='"],
              handleEnd: false,
              resolvers: [16],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              next: ["'<='"],
              handleEnd: false,
              resolvers: [12],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: "exp:'!',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'!',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:'-',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'-',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          id: "exp:exp,'-',exp",
          hydrationId: 12,
        },
        {
          NT: "exp",
          rule: ["exp", "'*'", "exp"],
          conflicts: [
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              next: ["'+'"],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              next: ["'-'"],
              handleEnd: false,
              resolvers: [6],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              next: ["'*'"],
              handleEnd: false,
              resolvers: [24],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              next: ["'/'"],
              handleEnd: false,
              resolvers: [25, 29],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              next: ["'%'"],
              handleEnd: false,
              resolvers: [27, 31],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              next: ["'&&'"],
              handleEnd: false,
              resolvers: [20],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              next: ["'||'"],
              handleEnd: false,
              resolvers: [22],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              next: ["'=='"],
              handleEnd: false,
              resolvers: [16],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              next: ["'!='"],
              handleEnd: false,
              resolvers: [18],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              next: ["'>'"],
              handleEnd: false,
              resolvers: [12],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              next: ["'<'"],
              handleEnd: false,
              resolvers: [8],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              next: ["'>='"],
              handleEnd: false,
              resolvers: [14],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              next: ["'<='"],
              handleEnd: false,
              resolvers: [10],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: "exp:'!',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'!',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:'-',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'-',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          id: "exp:exp,'*',exp",
          hydrationId: 13,
        },
        {
          NT: "exp",
          rule: ["exp", "'/'", "exp"],
          conflicts: [
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              next: ["'+'"],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              next: ["'-'"],
              handleEnd: false,
              resolvers: [6],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              next: ["'*'"],
              handleEnd: false,
              resolvers: [24, 26],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              next: ["'/'"],
              handleEnd: false,
              resolvers: [28],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              next: ["'%'"],
              handleEnd: false,
              resolvers: [29, 31],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              next: ["'&&'"],
              handleEnd: false,
              resolvers: [20],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              next: ["'||'"],
              handleEnd: false,
              resolvers: [22],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              next: ["'=='"],
              handleEnd: false,
              resolvers: [16],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              next: ["'!='"],
              handleEnd: false,
              resolvers: [18],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              next: ["'>'"],
              handleEnd: false,
              resolvers: [12],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              next: ["'<'"],
              handleEnd: false,
              resolvers: [8],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              next: ["'>='"],
              handleEnd: false,
              resolvers: [14],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              next: ["'<='"],
              handleEnd: false,
              resolvers: [10],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: "exp:'!',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'!',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:'-',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'-',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          id: "exp:exp,'/',exp",
          hydrationId: 14,
        },
        {
          NT: "exp",
          rule: ["exp", "'%'", "exp"],
          conflicts: [
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              next: ["'+'"],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              next: ["'-'"],
              handleEnd: false,
              resolvers: [6],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              next: ["'*'"],
              handleEnd: false,
              resolvers: [24, 28],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              next: ["'/'"],
              handleEnd: false,
              resolvers: [26, 30],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              next: ["'%'"],
              handleEnd: false,
              resolvers: [32],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              next: ["'&&'"],
              handleEnd: false,
              resolvers: [20],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              next: ["'||'"],
              handleEnd: false,
              resolvers: [22],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              next: ["'=='"],
              handleEnd: false,
              resolvers: [16],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              next: ["'!='"],
              handleEnd: false,
              resolvers: [18],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              next: ["'>'"],
              handleEnd: false,
              resolvers: [12],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              next: ["'<'"],
              handleEnd: false,
              resolvers: [8],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              next: ["'>='"],
              handleEnd: false,
              resolvers: [14],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              next: ["'<='"],
              handleEnd: false,
              resolvers: [10],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: "exp:'!',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'!',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:'-',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'-',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          id: "exp:exp,'%',exp",
          hydrationId: 15,
        },
        {
          NT: "exp",
          rule: ["'-'", "exp"],
          conflicts: [
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              next: ["'+'"],
              handleEnd: false,
              resolvers: [6],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              next: ["'-'"],
              handleEnd: false,
              resolvers: [8],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              next: ["'*'"],
              handleEnd: false,
              resolvers: [0],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              next: ["'/'"],
              handleEnd: false,
              resolvers: [2],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              next: ["'%'"],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              next: ["'&&'"],
              handleEnd: false,
              resolvers: [22],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              next: ["'||'"],
              handleEnd: false,
              resolvers: [24],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              next: ["'=='"],
              handleEnd: false,
              resolvers: [18],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              next: ["'!='"],
              handleEnd: false,
              resolvers: [20],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              next: ["'>'"],
              handleEnd: false,
              resolvers: [14],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              next: ["'<'"],
              handleEnd: false,
              resolvers: [10],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              next: ["'>='"],
              handleEnd: false,
              resolvers: [16],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              next: ["'<='"],
              handleEnd: false,
              resolvers: [12],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:'!',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'!',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:'!',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'!',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:'-',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          id: "exp:'-',exp",
          hydrationId: 16,
        },
        {
          NT: "exp",
          rule: ["exp", "'&&'", "exp"],
          conflicts: [
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              next: ["'+'"],
              handleEnd: false,
              resolvers: [10],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              next: ["'-'"],
              handleEnd: false,
              resolvers: [12],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              next: ["'*'"],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              next: ["'/'"],
              handleEnd: false,
              resolvers: [6],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              next: ["'%'"],
              handleEnd: false,
              resolvers: [8],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              next: ["'&&'"],
              handleEnd: false,
              resolvers: [28],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              next: ["'||'"],
              handleEnd: false,
              resolvers: [26],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              next: ["'=='"],
              handleEnd: false,
              resolvers: [22],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              next: ["'!='"],
              handleEnd: false,
              resolvers: [24],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              next: ["'>'"],
              handleEnd: false,
              resolvers: [18],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              next: ["'<'"],
              handleEnd: false,
              resolvers: [14],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              next: ["'>='"],
              handleEnd: false,
              resolvers: [20],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              next: ["'<='"],
              handleEnd: false,
              resolvers: [16],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: "exp:'!',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'!',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:'-',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'-',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          id: "exp:exp,'&&',exp",
          hydrationId: 17,
        },
        {
          NT: "exp",
          rule: ["exp", "'||'", "exp"],
          conflicts: [
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              next: ["'+'"],
              handleEnd: false,
              resolvers: [10],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              next: ["'-'"],
              handleEnd: false,
              resolvers: [12],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              next: ["'*'"],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              next: ["'/'"],
              handleEnd: false,
              resolvers: [6],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              next: ["'%'"],
              handleEnd: false,
              resolvers: [8],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              next: ["'&&'"],
              handleEnd: false,
              resolvers: [26],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              next: ["'||'"],
              handleEnd: false,
              resolvers: [28],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              next: ["'=='"],
              handleEnd: false,
              resolvers: [22],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              next: ["'!='"],
              handleEnd: false,
              resolvers: [24],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              next: ["'>'"],
              handleEnd: false,
              resolvers: [18],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              next: ["'<'"],
              handleEnd: false,
              resolvers: [14],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              next: ["'>='"],
              handleEnd: false,
              resolvers: [20],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              next: ["'<='"],
              handleEnd: false,
              resolvers: [16],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: "exp:'!',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'!',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:'-',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'-',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          id: "exp:exp,'||',exp",
          hydrationId: 18,
        },
        {
          NT: "exp",
          rule: ["'!'", "exp"],
          conflicts: [
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              next: ["'+'"],
              handleEnd: false,
              resolvers: [6],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              next: ["'-'"],
              handleEnd: false,
              resolvers: [8],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              next: ["'*'"],
              handleEnd: false,
              resolvers: [0],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              next: ["'/'"],
              handleEnd: false,
              resolvers: [2],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              next: ["'%'"],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              next: ["'&&'"],
              handleEnd: false,
              resolvers: [22],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              next: ["'||'"],
              handleEnd: false,
              resolvers: [24],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              next: ["'=='"],
              handleEnd: false,
              resolvers: [18],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              next: ["'!='"],
              handleEnd: false,
              resolvers: [20],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              next: ["'>'"],
              handleEnd: false,
              resolvers: [14],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              next: ["'<'"],
              handleEnd: false,
              resolvers: [10],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              next: ["'>='"],
              handleEnd: false,
              resolvers: [16],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              next: ["'<='"],
              handleEnd: false,
              resolvers: [12],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:'!',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:'-',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'-',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:'-',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'-',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          id: "exp:'!',exp",
          hydrationId: 19,
        },
        {
          NT: "exp",
          rule: ["exp", "'=='", "exp"],
          conflicts: [
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              next: ["'+'"],
              handleEnd: false,
              resolvers: [10],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              next: ["'-'"],
              handleEnd: false,
              resolvers: [12],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              next: ["'*'"],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              next: ["'/'"],
              handleEnd: false,
              resolvers: [6],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              next: ["'%'"],
              handleEnd: false,
              resolvers: [8],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              next: ["'&&'"],
              handleEnd: false,
              resolvers: [22],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              next: ["'||'"],
              handleEnd: false,
              resolvers: [24],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              next: ["'=='"],
              handleEnd: false,
              resolvers: [26],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              next: ["'!='"],
              handleEnd: false,
              resolvers: [27, 29],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              next: ["'>'"],
              handleEnd: false,
              resolvers: [18],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              next: ["'<'"],
              handleEnd: false,
              resolvers: [14],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              next: ["'>='"],
              handleEnd: false,
              resolvers: [20],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              next: ["'<='"],
              handleEnd: false,
              resolvers: [16],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: "exp:'!',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'!',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:'-',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'-',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          id: "exp:exp,'==',exp",
          hydrationId: 20,
        },
        {
          NT: "exp",
          rule: ["exp", "'!='", "exp"],
          conflicts: [
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              next: ["'+'"],
              handleEnd: false,
              resolvers: [10],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              next: ["'-'"],
              handleEnd: false,
              resolvers: [12],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              next: ["'*'"],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              next: ["'/'"],
              handleEnd: false,
              resolvers: [6],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              next: ["'%'"],
              handleEnd: false,
              resolvers: [8],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              next: ["'&&'"],
              handleEnd: false,
              resolvers: [22],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              next: ["'||'"],
              handleEnd: false,
              resolvers: [24],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              next: ["'=='"],
              handleEnd: false,
              resolvers: [26, 28],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              next: ["'!='"],
              handleEnd: false,
              resolvers: [30],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              next: ["'>'"],
              handleEnd: false,
              resolvers: [18],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              next: ["'<'"],
              handleEnd: false,
              resolvers: [14],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              next: ["'>='"],
              handleEnd: false,
              resolvers: [20],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              next: ["'<='"],
              handleEnd: false,
              resolvers: [16],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: "exp:'!',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'!',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:'-',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'-',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          id: "exp:exp,'!=',exp",
          hydrationId: 21,
        },
        {
          NT: "exp",
          rule: ["exp", "'>'", "exp"],
          conflicts: [
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              next: ["'+'"],
              handleEnd: false,
              resolvers: [10],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              next: ["'-'"],
              handleEnd: false,
              resolvers: [12],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              next: ["'*'"],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              next: ["'/'"],
              handleEnd: false,
              resolvers: [6],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              next: ["'%'"],
              handleEnd: false,
              resolvers: [8],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              next: ["'&&'"],
              handleEnd: false,
              resolvers: [18],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              next: ["'||'"],
              handleEnd: false,
              resolvers: [20],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              next: ["'=='"],
              handleEnd: false,
              resolvers: [14],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              next: ["'!='"],
              handleEnd: false,
              resolvers: [16],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              next: ["'>'"],
              handleEnd: false,
              resolvers: [30],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              next: ["'<'"],
              handleEnd: false,
              resolvers: [22, 26],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              next: ["'>='"],
              handleEnd: false,
              resolvers: [31, 33],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              next: ["'<='"],
              handleEnd: false,
              resolvers: [24, 28],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: "exp:'!',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'!',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:'-',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'-',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          id: "exp:exp,'>',exp",
          hydrationId: 22,
        },
        {
          NT: "exp",
          rule: ["exp", "'<'", "exp"],
          conflicts: [
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              next: ["'+'"],
              handleEnd: false,
              resolvers: [10],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              next: ["'-'"],
              handleEnd: false,
              resolvers: [12],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              next: ["'*'"],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              next: ["'/'"],
              handleEnd: false,
              resolvers: [6],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              next: ["'%'"],
              handleEnd: false,
              resolvers: [8],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              next: ["'&&'"],
              handleEnd: false,
              resolvers: [18],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              next: ["'||'"],
              handleEnd: false,
              resolvers: [20],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              next: ["'=='"],
              handleEnd: false,
              resolvers: [14],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              next: ["'!='"],
              handleEnd: false,
              resolvers: [16],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              next: ["'>'"],
              handleEnd: false,
              resolvers: [25, 31],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              next: ["'<'"],
              handleEnd: false,
              resolvers: [22],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              next: ["'>='"],
              handleEnd: false,
              resolvers: [27, 33],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              next: ["'<='"],
              handleEnd: false,
              resolvers: [23, 29],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: "exp:'!',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'!',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:'-',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'-',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          id: "exp:exp,'<',exp",
          hydrationId: 23,
        },
        {
          NT: "exp",
          rule: ["exp", "'>='", "exp"],
          conflicts: [
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              next: ["'+'"],
              handleEnd: false,
              resolvers: [10],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              next: ["'-'"],
              handleEnd: false,
              resolvers: [12],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              next: ["'*'"],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              next: ["'/'"],
              handleEnd: false,
              resolvers: [6],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              next: ["'%'"],
              handleEnd: false,
              resolvers: [8],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              next: ["'&&'"],
              handleEnd: false,
              resolvers: [18],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              next: ["'||'"],
              handleEnd: false,
              resolvers: [20],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              next: ["'=='"],
              handleEnd: false,
              resolvers: [14],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              next: ["'!='"],
              handleEnd: false,
              resolvers: [16],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              next: ["'>'"],
              handleEnd: false,
              resolvers: [26, 32],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              next: ["'<'"],
              handleEnd: false,
              resolvers: [22, 28],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              next: ["'>='"],
              handleEnd: false,
              resolvers: [34],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              next: ["'<='"],
              handleEnd: false,
              resolvers: [24, 30],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: "exp:'!',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'!',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:'-',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'-',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          id: "exp:exp,'>=',exp",
          hydrationId: 24,
        },
        {
          NT: "exp",
          rule: ["exp", "'<='", "exp"],
          conflicts: [
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              next: ["'+'"],
              handleEnd: false,
              resolvers: [10],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              next: ["'-'"],
              handleEnd: false,
              resolvers: [12],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              next: ["'*'"],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              next: ["'/'"],
              handleEnd: false,
              resolvers: [6],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              next: ["'%'"],
              handleEnd: false,
              resolvers: [8],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              next: ["'&&'"],
              handleEnd: false,
              resolvers: [18],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              next: ["'||'"],
              handleEnd: false,
              resolvers: [20],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              next: ["'=='"],
              handleEnd: false,
              resolvers: [14],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              next: ["'!='"],
              handleEnd: false,
              resolvers: [16],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              next: ["'>'"],
              handleEnd: false,
              resolvers: [27, 31],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              next: ["'<'"],
              handleEnd: false,
              resolvers: [22, 24],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              next: ["'>='"],
              handleEnd: false,
              resolvers: [29, 33],
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              next: ["'<='"],
              handleEnd: false,
              resolvers: [26],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: "exp:'!',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'!',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:'-',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:'-',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'*',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'/',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'%',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'+',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'-',exp",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'==',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'!=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'&&',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'||',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'<',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'<=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "exp:exp,'>=',exp",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          id: "exp:exp,'<=',exp",
          hydrationId: 25,
        },
        {
          NT: "__0",
          rule: ["fn_def"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "__0:fn_def,__0",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "__0:fn_def",
          hydrationId: 585,
        },
        {
          NT: "__0",
          rule: ["fn_def", "__0"],
          conflicts: [],
          resolved: [],
          id: "__0:fn_def,__0",
          hydrationId: 585,
        },
        {
          NT: "__1",
          rule: ["','", "param"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "__1:',',param,__1",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "__1:',',param",
          hydrationId: 586,
        },
        {
          NT: "__1",
          rule: ["','", "param", "__1"],
          conflicts: [],
          resolved: [],
          id: "__1:',',param,__1",
          hydrationId: 586,
        },
        {
          NT: "__2",
          rule: ["stmt"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "__2:stmt,__2",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "__2:stmt",
          hydrationId: 587,
        },
        {
          NT: "__2",
          rule: ["stmt", "__2"],
          conflicts: [],
          resolved: [],
          id: "__2:stmt,__2",
          hydrationId: 587,
        },
        {
          NT: "__3",
          rule: ["stmt@ifTrue"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "__3:stmt@ifTrue,__3",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "__3:stmt@ifTrue",
          hydrationId: 588,
        },
        {
          NT: "__3",
          rule: ["stmt@ifTrue", "__3"],
          conflicts: [],
          resolved: [],
          id: "__3:stmt@ifTrue,__3",
          hydrationId: 588,
        },
        {
          NT: "__4",
          rule: ["stmt@ifFalse"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "__4:stmt@ifFalse,__4",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          id: "__4:stmt@ifFalse",
          hydrationId: 589,
        },
        {
          NT: "__4",
          rule: ["stmt@ifFalse", "__4"],
          conflicts: [],
          resolved: [],
          id: "__4:stmt@ifFalse,__4",
          hydrationId: 589,
        },
      ],
      candidates: [
        {
          gr: "fn_defs:__0",
          digested: 0,
          nextMap: { __0: "1#fn_defs:__0" },
          id: "0#fn_defs:__0",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          digested: 0,
          nextMap: {
            fn: "1#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          },
          id: "0#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,__1,')','{','}'",
          digested: 0,
          nextMap: { fn: "1#fn_def:fn,identifier,'(',param,__1,')','{','}'" },
          id: "0#fn_def:fn,identifier,'(',param,__1,')','{','}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,')','{',__2,'}'",
          digested: 0,
          nextMap: { fn: "1#fn_def:fn,identifier,'(',param,')','{',__2,'}'" },
          id: "0#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,')','{','}'",
          digested: 0,
          nextMap: { fn: "1#fn_def:fn,identifier,'(',param,')','{','}'" },
          id: "0#fn_def:fn,identifier,'(',param,')','{','}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',')','{',__2,'}'",
          digested: 0,
          nextMap: { fn: "1#fn_def:fn,identifier,'(',')','{',__2,'}'" },
          id: "0#fn_def:fn,identifier,'(',')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',')','{','}'",
          digested: 0,
          nextMap: { fn: "1#fn_def:fn,identifier,'(',')','{','}'" },
          id: "0#fn_def:fn,identifier,'(',')','{','}'",
        },
        {
          gr: "param:identifier",
          digested: 0,
          nextMap: { identifier: "1#param:identifier" },
          id: "0#param:identifier",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          digested: 0,
          nextMap: { if: "1#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'" },
          id: "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}',else,'{','}'",
          digested: 0,
          nextMap: { if: "1#if_stmt:if,exp,'{',__3,'}',else,'{','}'" },
          id: "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}'",
          digested: 0,
          nextMap: { if: "1#if_stmt:if,exp,'{',__3,'}'" },
          id: "0#if_stmt:if,exp,'{',__3,'}'",
        },
        {
          gr: "if_stmt:if,exp,'{','}',else,'{',__4,'}'",
          digested: 0,
          nextMap: { if: "1#if_stmt:if,exp,'{','}',else,'{',__4,'}'" },
          id: "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
        },
        {
          gr: "if_stmt:if,exp,'{','}',else,'{','}'",
          digested: 0,
          nextMap: { if: "1#if_stmt:if,exp,'{','}',else,'{','}'" },
          id: "0#if_stmt:if,exp,'{','}',else,'{','}'",
        },
        {
          gr: "if_stmt:if,exp,'{','}'",
          digested: 0,
          nextMap: { if: "1#if_stmt:if,exp,'{','}'" },
          id: "0#if_stmt:if,exp,'{','}'",
        },
        {
          gr: "loop_stmt:do,'{',__2,'}',while,exp,';'",
          digested: 0,
          nextMap: { do: "1#loop_stmt:do,'{',__2,'}',while,exp,';'" },
          id: "0#loop_stmt:do,'{',__2,'}',while,exp,';'",
        },
        {
          gr: "loop_stmt:do,'{','}',while,exp,';'",
          digested: 0,
          nextMap: { do: "1#loop_stmt:do,'{','}',while,exp,';'" },
          id: "0#loop_stmt:do,'{','}',while,exp,';'",
        },
        {
          gr: "loop_stmt:while,exp,'{',__2,'}'",
          digested: 0,
          nextMap: { while: "1#loop_stmt:while,exp,'{',__2,'}'" },
          id: "0#loop_stmt:while,exp,'{',__2,'}'",
        },
        {
          gr: "loop_stmt:while,exp,'{','}'",
          digested: 0,
          nextMap: { while: "1#loop_stmt:while,exp,'{','}'" },
          id: "0#loop_stmt:while,exp,'{','}'",
        },
        {
          gr: "stmt:assign_stmt",
          digested: 0,
          nextMap: { assign_stmt: "1#stmt:assign_stmt" },
          id: "0#stmt:assign_stmt",
        },
        {
          gr: "stmt:ret_stmt",
          digested: 0,
          nextMap: { ret_stmt: "1#stmt:ret_stmt" },
          id: "0#stmt:ret_stmt",
        },
        {
          gr: "stmt:if_stmt",
          digested: 0,
          nextMap: { if_stmt: "1#stmt:if_stmt" },
          id: "0#stmt:if_stmt",
        },
        {
          gr: "stmt:loop_stmt",
          digested: 0,
          nextMap: { loop_stmt: "1#stmt:loop_stmt" },
          id: "0#stmt:loop_stmt",
        },
        {
          gr: "assign_stmt:identifier,'=',exp,';'",
          digested: 0,
          nextMap: { identifier: "1#assign_stmt:identifier,'=',exp,';'" },
          id: "0#assign_stmt:identifier,'=',exp,';'",
        },
        {
          gr: "ret_stmt:return,exp,';'",
          digested: 0,
          nextMap: { return: "1#ret_stmt:return,exp,';'" },
          id: "0#ret_stmt:return,exp,';'",
        },
        {
          gr: "exp:integer",
          digested: 0,
          nextMap: { integer: "1#exp:integer" },
          id: "0#exp:integer",
        },
        {
          gr: "exp:identifier",
          digested: 0,
          nextMap: { identifier: "1#exp:identifier" },
          id: "0#exp:identifier",
        },
        {
          gr: "exp:exp,'+',exp",
          digested: 0,
          nextMap: { exp: "1#exp:exp,'+',exp" },
          id: "0#exp:exp,'+',exp",
        },
        {
          gr: "exp:exp,'-',exp",
          digested: 0,
          nextMap: { exp: "1#exp:exp,'-',exp" },
          id: "0#exp:exp,'-',exp",
        },
        {
          gr: "exp:exp,'*',exp",
          digested: 0,
          nextMap: { exp: "1#exp:exp,'*',exp" },
          id: "0#exp:exp,'*',exp",
        },
        {
          gr: "exp:exp,'/',exp",
          digested: 0,
          nextMap: { exp: "1#exp:exp,'/',exp" },
          id: "0#exp:exp,'/',exp",
        },
        {
          gr: "exp:exp,'%',exp",
          digested: 0,
          nextMap: { exp: "1#exp:exp,'%',exp" },
          id: "0#exp:exp,'%',exp",
        },
        {
          gr: "exp:'-',exp",
          digested: 0,
          nextMap: { "'-'": "1#exp:'-',exp" },
          id: "0#exp:'-',exp",
        },
        {
          gr: "exp:exp,'&&',exp",
          digested: 0,
          nextMap: { exp: "1#exp:exp,'&&',exp" },
          id: "0#exp:exp,'&&',exp",
        },
        {
          gr: "exp:exp,'||',exp",
          digested: 0,
          nextMap: { exp: "1#exp:exp,'||',exp" },
          id: "0#exp:exp,'||',exp",
        },
        {
          gr: "exp:'!',exp",
          digested: 0,
          nextMap: { "'!'": "1#exp:'!',exp" },
          id: "0#exp:'!',exp",
        },
        {
          gr: "exp:exp,'==',exp",
          digested: 0,
          nextMap: { exp: "1#exp:exp,'==',exp" },
          id: "0#exp:exp,'==',exp",
        },
        {
          gr: "exp:exp,'!=',exp",
          digested: 0,
          nextMap: { exp: "1#exp:exp,'!=',exp" },
          id: "0#exp:exp,'!=',exp",
        },
        {
          gr: "exp:exp,'>',exp",
          digested: 0,
          nextMap: { exp: "1#exp:exp,'>',exp" },
          id: "0#exp:exp,'>',exp",
        },
        {
          gr: "exp:exp,'<',exp",
          digested: 0,
          nextMap: { exp: "1#exp:exp,'<',exp" },
          id: "0#exp:exp,'<',exp",
        },
        {
          gr: "exp:exp,'>=',exp",
          digested: 0,
          nextMap: { exp: "1#exp:exp,'>=',exp" },
          id: "0#exp:exp,'>=',exp",
        },
        {
          gr: "exp:exp,'<=',exp",
          digested: 0,
          nextMap: { exp: "1#exp:exp,'<=',exp" },
          id: "0#exp:exp,'<=',exp",
        },
        {
          gr: "__0:fn_def",
          digested: 0,
          nextMap: { fn_def: "1#__0:fn_def" },
          id: "0#__0:fn_def",
        },
        {
          gr: "__0:fn_def,__0",
          digested: 0,
          nextMap: { fn_def: "1#__0:fn_def,__0" },
          id: "0#__0:fn_def,__0",
        },
        {
          gr: "__1:',',param",
          digested: 0,
          nextMap: { "','": "1#__1:',',param" },
          id: "0#__1:',',param",
        },
        {
          gr: "__1:',',param,__1",
          digested: 0,
          nextMap: { "','": "1#__1:',',param,__1" },
          id: "0#__1:',',param,__1",
        },
        {
          gr: "__2:stmt",
          digested: 0,
          nextMap: { stmt: "1#__2:stmt" },
          id: "0#__2:stmt",
        },
        {
          gr: "__2:stmt,__2",
          digested: 0,
          nextMap: { stmt: "1#__2:stmt,__2" },
          id: "0#__2:stmt,__2",
        },
        {
          gr: "__3:stmt@ifTrue",
          digested: 0,
          nextMap: { "stmt@ifTrue": "1#__3:stmt@ifTrue" },
          id: "0#__3:stmt@ifTrue",
        },
        {
          gr: "__3:stmt@ifTrue,__3",
          digested: 0,
          nextMap: { "stmt@ifTrue": "1#__3:stmt@ifTrue,__3" },
          id: "0#__3:stmt@ifTrue,__3",
        },
        {
          gr: "__4:stmt@ifFalse",
          digested: 0,
          nextMap: { "stmt@ifFalse": "1#__4:stmt@ifFalse" },
          id: "0#__4:stmt@ifFalse",
        },
        {
          gr: "__4:stmt@ifFalse,__4",
          digested: 0,
          nextMap: { "stmt@ifFalse": "1#__4:stmt@ifFalse,__4" },
          id: "0#__4:stmt@ifFalse,__4",
        },
        {
          gr: "fn_defs:__0",
          digested: 1,
          nextMap: {},
          id: "1#fn_defs:__0",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          digested: 1,
          nextMap: {
            identifier: "2#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          },
          id: "1#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,__1,')','{','}'",
          digested: 1,
          nextMap: {
            identifier: "2#fn_def:fn,identifier,'(',param,__1,')','{','}'",
          },
          id: "1#fn_def:fn,identifier,'(',param,__1,')','{','}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,')','{',__2,'}'",
          digested: 1,
          nextMap: {
            identifier: "2#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
          },
          id: "1#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,')','{','}'",
          digested: 1,
          nextMap: {
            identifier: "2#fn_def:fn,identifier,'(',param,')','{','}'",
          },
          id: "1#fn_def:fn,identifier,'(',param,')','{','}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',')','{',__2,'}'",
          digested: 1,
          nextMap: { identifier: "2#fn_def:fn,identifier,'(',')','{',__2,'}'" },
          id: "1#fn_def:fn,identifier,'(',')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',')','{','}'",
          digested: 1,
          nextMap: { identifier: "2#fn_def:fn,identifier,'(',')','{','}'" },
          id: "1#fn_def:fn,identifier,'(',')','{','}'",
        },
        {
          gr: "__0:fn_def",
          digested: 1,
          nextMap: {},
          id: "1#__0:fn_def",
        },
        {
          gr: "__0:fn_def,__0",
          digested: 1,
          nextMap: { __0: "2#__0:fn_def,__0" },
          id: "1#__0:fn_def,__0",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          digested: 2,
          nextMap: {
            "'('": "3#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          },
          id: "2#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,__1,')','{','}'",
          digested: 2,
          nextMap: {
            "'('": "3#fn_def:fn,identifier,'(',param,__1,')','{','}'",
          },
          id: "2#fn_def:fn,identifier,'(',param,__1,')','{','}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,')','{',__2,'}'",
          digested: 2,
          nextMap: {
            "'('": "3#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
          },
          id: "2#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,')','{','}'",
          digested: 2,
          nextMap: { "'('": "3#fn_def:fn,identifier,'(',param,')','{','}'" },
          id: "2#fn_def:fn,identifier,'(',param,')','{','}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',')','{',__2,'}'",
          digested: 2,
          nextMap: { "'('": "3#fn_def:fn,identifier,'(',')','{',__2,'}'" },
          id: "2#fn_def:fn,identifier,'(',')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',')','{','}'",
          digested: 2,
          nextMap: { "'('": "3#fn_def:fn,identifier,'(',')','{','}'" },
          id: "2#fn_def:fn,identifier,'(',')','{','}'",
        },
        {
          gr: "__0:fn_def,__0",
          digested: 2,
          nextMap: {},
          id: "2#__0:fn_def,__0",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          digested: 3,
          nextMap: {
            param: "4#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          },
          id: "3#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,__1,')','{','}'",
          digested: 3,
          nextMap: {
            param: "4#fn_def:fn,identifier,'(',param,__1,')','{','}'",
          },
          id: "3#fn_def:fn,identifier,'(',param,__1,')','{','}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,')','{',__2,'}'",
          digested: 3,
          nextMap: {
            param: "4#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
          },
          id: "3#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,')','{','}'",
          digested: 3,
          nextMap: { param: "4#fn_def:fn,identifier,'(',param,')','{','}'" },
          id: "3#fn_def:fn,identifier,'(',param,')','{','}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',')','{',__2,'}'",
          digested: 3,
          nextMap: { "')'": "4#fn_def:fn,identifier,'(',')','{',__2,'}'" },
          id: "3#fn_def:fn,identifier,'(',')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',')','{','}'",
          digested: 3,
          nextMap: { "')'": "4#fn_def:fn,identifier,'(',')','{','}'" },
          id: "3#fn_def:fn,identifier,'(',')','{','}'",
        },
        {
          gr: "param:identifier",
          digested: 1,
          nextMap: {},
          id: "1#param:identifier",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          digested: 4,
          nextMap: {
            __1: "5#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          },
          id: "4#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,__1,')','{','}'",
          digested: 4,
          nextMap: { __1: "5#fn_def:fn,identifier,'(',param,__1,')','{','}'" },
          id: "4#fn_def:fn,identifier,'(',param,__1,')','{','}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,')','{',__2,'}'",
          digested: 4,
          nextMap: {
            "')'": "5#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
          },
          id: "4#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,')','{','}'",
          digested: 4,
          nextMap: { "')'": "5#fn_def:fn,identifier,'(',param,')','{','}'" },
          id: "4#fn_def:fn,identifier,'(',param,')','{','}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',')','{',__2,'}'",
          digested: 4,
          nextMap: { "'{'": "5#fn_def:fn,identifier,'(',')','{',__2,'}'" },
          id: "4#fn_def:fn,identifier,'(',')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',')','{','}'",
          digested: 4,
          nextMap: { "'{'": "5#fn_def:fn,identifier,'(',')','{','}'" },
          id: "4#fn_def:fn,identifier,'(',')','{','}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          digested: 5,
          nextMap: {
            "')'": "6#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          },
          id: "5#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,__1,')','{','}'",
          digested: 5,
          nextMap: {
            "')'": "6#fn_def:fn,identifier,'(',param,__1,')','{','}'",
          },
          id: "5#fn_def:fn,identifier,'(',param,__1,')','{','}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,')','{',__2,'}'",
          digested: 5,
          nextMap: {
            "'{'": "6#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
          },
          id: "5#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,')','{','}'",
          digested: 5,
          nextMap: { "'{'": "6#fn_def:fn,identifier,'(',param,')','{','}'" },
          id: "5#fn_def:fn,identifier,'(',param,')','{','}'",
        },
        {
          gr: "__1:',',param",
          digested: 1,
          nextMap: { param: "2#__1:',',param" },
          id: "1#__1:',',param",
        },
        {
          gr: "__1:',',param,__1",
          digested: 1,
          nextMap: { param: "2#__1:',',param,__1" },
          id: "1#__1:',',param,__1",
        },
        {
          gr: "fn_def:fn,identifier,'(',')','{',__2,'}'",
          digested: 5,
          nextMap: { __2: "6#fn_def:fn,identifier,'(',')','{',__2,'}'" },
          id: "5#fn_def:fn,identifier,'(',')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',')','{','}'",
          digested: 5,
          nextMap: { "'}'": "6#fn_def:fn,identifier,'(',')','{','}'" },
          id: "5#fn_def:fn,identifier,'(',')','{','}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          digested: 6,
          nextMap: {
            "'{'": "7#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          },
          id: "6#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,__1,')','{','}'",
          digested: 6,
          nextMap: {
            "'{'": "7#fn_def:fn,identifier,'(',param,__1,')','{','}'",
          },
          id: "6#fn_def:fn,identifier,'(',param,__1,')','{','}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,')','{',__2,'}'",
          digested: 6,
          nextMap: { __2: "7#fn_def:fn,identifier,'(',param,')','{',__2,'}'" },
          id: "6#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,')','{','}'",
          digested: 6,
          nextMap: { "'}'": "7#fn_def:fn,identifier,'(',param,')','{','}'" },
          id: "6#fn_def:fn,identifier,'(',param,')','{','}'",
        },
        {
          gr: "__1:',',param",
          digested: 2,
          nextMap: {},
          id: "2#__1:',',param",
        },
        {
          gr: "__1:',',param,__1",
          digested: 2,
          nextMap: { __1: "3#__1:',',param,__1" },
          id: "2#__1:',',param,__1",
        },
        {
          gr: "assign_stmt:identifier,'=',exp,';'",
          digested: 1,
          nextMap: { "'='": "2#assign_stmt:identifier,'=',exp,';'" },
          id: "1#assign_stmt:identifier,'=',exp,';'",
        },
        {
          gr: "fn_def:fn,identifier,'(',')','{',__2,'}'",
          digested: 6,
          nextMap: { "'}'": "7#fn_def:fn,identifier,'(',')','{',__2,'}'" },
          id: "6#fn_def:fn,identifier,'(',')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',')','{','}'",
          digested: 6,
          nextMap: {},
          id: "6#fn_def:fn,identifier,'(',')','{','}'",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          digested: 1,
          nextMap: { exp: "2#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'" },
          id: "1#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}',else,'{','}'",
          digested: 1,
          nextMap: { exp: "2#if_stmt:if,exp,'{',__3,'}',else,'{','}'" },
          id: "1#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}'",
          digested: 1,
          nextMap: { exp: "2#if_stmt:if,exp,'{',__3,'}'" },
          id: "1#if_stmt:if,exp,'{',__3,'}'",
        },
        {
          gr: "if_stmt:if,exp,'{','}',else,'{',__4,'}'",
          digested: 1,
          nextMap: { exp: "2#if_stmt:if,exp,'{','}',else,'{',__4,'}'" },
          id: "1#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
        },
        {
          gr: "if_stmt:if,exp,'{','}',else,'{','}'",
          digested: 1,
          nextMap: { exp: "2#if_stmt:if,exp,'{','}',else,'{','}'" },
          id: "1#if_stmt:if,exp,'{','}',else,'{','}'",
        },
        {
          gr: "if_stmt:if,exp,'{','}'",
          digested: 1,
          nextMap: { exp: "2#if_stmt:if,exp,'{','}'" },
          id: "1#if_stmt:if,exp,'{','}'",
        },
        {
          gr: "loop_stmt:do,'{',__2,'}',while,exp,';'",
          digested: 1,
          nextMap: { "'{'": "2#loop_stmt:do,'{',__2,'}',while,exp,';'" },
          id: "1#loop_stmt:do,'{',__2,'}',while,exp,';'",
        },
        {
          gr: "loop_stmt:do,'{','}',while,exp,';'",
          digested: 1,
          nextMap: { "'{'": "2#loop_stmt:do,'{','}',while,exp,';'" },
          id: "1#loop_stmt:do,'{','}',while,exp,';'",
        },
        {
          gr: "loop_stmt:while,exp,'{',__2,'}'",
          digested: 1,
          nextMap: { exp: "2#loop_stmt:while,exp,'{',__2,'}'" },
          id: "1#loop_stmt:while,exp,'{',__2,'}'",
        },
        {
          gr: "loop_stmt:while,exp,'{','}'",
          digested: 1,
          nextMap: { exp: "2#loop_stmt:while,exp,'{','}'" },
          id: "1#loop_stmt:while,exp,'{','}'",
        },
        {
          gr: "stmt:assign_stmt",
          digested: 1,
          nextMap: {},
          id: "1#stmt:assign_stmt",
        },
        {
          gr: "stmt:ret_stmt",
          digested: 1,
          nextMap: {},
          id: "1#stmt:ret_stmt",
        },
        {
          gr: "stmt:if_stmt",
          digested: 1,
          nextMap: {},
          id: "1#stmt:if_stmt",
        },
        {
          gr: "stmt:loop_stmt",
          digested: 1,
          nextMap: {},
          id: "1#stmt:loop_stmt",
        },
        {
          gr: "ret_stmt:return,exp,';'",
          digested: 1,
          nextMap: { exp: "2#ret_stmt:return,exp,';'" },
          id: "1#ret_stmt:return,exp,';'",
        },
        { gr: "__2:stmt", digested: 1, nextMap: {}, id: "1#__2:stmt" },
        {
          gr: "__2:stmt,__2",
          digested: 1,
          nextMap: { __2: "2#__2:stmt,__2" },
          id: "1#__2:stmt,__2",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          digested: 7,
          nextMap: {
            __2: "8#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          },
          id: "7#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,__1,')','{','}'",
          digested: 7,
          nextMap: {
            "'}'": "8#fn_def:fn,identifier,'(',param,__1,')','{','}'",
          },
          id: "7#fn_def:fn,identifier,'(',param,__1,')','{','}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,')','{',__2,'}'",
          digested: 7,
          nextMap: {
            "'}'": "8#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
          },
          id: "7#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,')','{','}'",
          digested: 7,
          nextMap: {},
          id: "7#fn_def:fn,identifier,'(',param,')','{','}'",
        },
        {
          gr: "__1:',',param,__1",
          digested: 3,
          nextMap: {},
          id: "3#__1:',',param,__1",
        },
        {
          gr: "assign_stmt:identifier,'=',exp,';'",
          digested: 2,
          nextMap: { exp: "3#assign_stmt:identifier,'=',exp,';'" },
          id: "2#assign_stmt:identifier,'=',exp,';'",
        },
        {
          gr: "fn_def:fn,identifier,'(',')','{',__2,'}'",
          digested: 7,
          nextMap: {},
          id: "7#fn_def:fn,identifier,'(',')','{',__2,'}'",
        },
        {
          gr: "exp:identifier",
          digested: 1,
          nextMap: {},
          id: "1#exp:identifier",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          digested: 2,
          nextMap: { "'{'": "3#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'" },
          id: "2#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}',else,'{','}'",
          digested: 2,
          nextMap: { "'{'": "3#if_stmt:if,exp,'{',__3,'}',else,'{','}'" },
          id: "2#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}'",
          digested: 2,
          nextMap: { "'{'": "3#if_stmt:if,exp,'{',__3,'}'" },
          id: "2#if_stmt:if,exp,'{',__3,'}'",
        },
        {
          gr: "if_stmt:if,exp,'{','}',else,'{',__4,'}'",
          digested: 2,
          nextMap: { "'{'": "3#if_stmt:if,exp,'{','}',else,'{',__4,'}'" },
          id: "2#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
        },
        {
          gr: "if_stmt:if,exp,'{','}',else,'{','}'",
          digested: 2,
          nextMap: { "'{'": "3#if_stmt:if,exp,'{','}',else,'{','}'" },
          id: "2#if_stmt:if,exp,'{','}',else,'{','}'",
        },
        {
          gr: "if_stmt:if,exp,'{','}'",
          digested: 2,
          nextMap: { "'{'": "3#if_stmt:if,exp,'{','}'" },
          id: "2#if_stmt:if,exp,'{','}'",
        },
        {
          gr: "exp:exp,'+',exp",
          digested: 1,
          nextMap: { "'+'": "2#exp:exp,'+',exp" },
          id: "1#exp:exp,'+',exp",
        },
        {
          gr: "exp:exp,'-',exp",
          digested: 1,
          nextMap: { "'-'": "2#exp:exp,'-',exp" },
          id: "1#exp:exp,'-',exp",
        },
        {
          gr: "exp:exp,'*',exp",
          digested: 1,
          nextMap: { "'*'": "2#exp:exp,'*',exp" },
          id: "1#exp:exp,'*',exp",
        },
        {
          gr: "exp:exp,'/',exp",
          digested: 1,
          nextMap: { "'/'": "2#exp:exp,'/',exp" },
          id: "1#exp:exp,'/',exp",
        },
        {
          gr: "exp:exp,'%',exp",
          digested: 1,
          nextMap: { "'%'": "2#exp:exp,'%',exp" },
          id: "1#exp:exp,'%',exp",
        },
        {
          gr: "exp:exp,'&&',exp",
          digested: 1,
          nextMap: { "'&&'": "2#exp:exp,'&&',exp" },
          id: "1#exp:exp,'&&',exp",
        },
        {
          gr: "exp:exp,'||',exp",
          digested: 1,
          nextMap: { "'||'": "2#exp:exp,'||',exp" },
          id: "1#exp:exp,'||',exp",
        },
        {
          gr: "exp:exp,'==',exp",
          digested: 1,
          nextMap: { "'=='": "2#exp:exp,'==',exp" },
          id: "1#exp:exp,'==',exp",
        },
        {
          gr: "exp:exp,'!=',exp",
          digested: 1,
          nextMap: { "'!='": "2#exp:exp,'!=',exp" },
          id: "1#exp:exp,'!=',exp",
        },
        {
          gr: "exp:exp,'>',exp",
          digested: 1,
          nextMap: { "'>'": "2#exp:exp,'>',exp" },
          id: "1#exp:exp,'>',exp",
        },
        {
          gr: "exp:exp,'<',exp",
          digested: 1,
          nextMap: { "'<'": "2#exp:exp,'<',exp" },
          id: "1#exp:exp,'<',exp",
        },
        {
          gr: "exp:exp,'>=',exp",
          digested: 1,
          nextMap: { "'>='": "2#exp:exp,'>=',exp" },
          id: "1#exp:exp,'>=',exp",
        },
        {
          gr: "exp:exp,'<=',exp",
          digested: 1,
          nextMap: { "'<='": "2#exp:exp,'<=',exp" },
          id: "1#exp:exp,'<=',exp",
        },
        {
          gr: "exp:integer",
          digested: 1,
          nextMap: {},
          id: "1#exp:integer",
        },
        {
          gr: "exp:'-',exp",
          digested: 1,
          nextMap: { exp: "2#exp:'-',exp" },
          id: "1#exp:'-',exp",
        },
        {
          gr: "exp:'!',exp",
          digested: 1,
          nextMap: { exp: "2#exp:'!',exp" },
          id: "1#exp:'!',exp",
        },
        {
          gr: "loop_stmt:do,'{',__2,'}',while,exp,';'",
          digested: 2,
          nextMap: { __2: "3#loop_stmt:do,'{',__2,'}',while,exp,';'" },
          id: "2#loop_stmt:do,'{',__2,'}',while,exp,';'",
        },
        {
          gr: "loop_stmt:do,'{','}',while,exp,';'",
          digested: 2,
          nextMap: { "'}'": "3#loop_stmt:do,'{','}',while,exp,';'" },
          id: "2#loop_stmt:do,'{','}',while,exp,';'",
        },
        {
          gr: "loop_stmt:while,exp,'{',__2,'}'",
          digested: 2,
          nextMap: { "'{'": "3#loop_stmt:while,exp,'{',__2,'}'" },
          id: "2#loop_stmt:while,exp,'{',__2,'}'",
        },
        {
          gr: "loop_stmt:while,exp,'{','}'",
          digested: 2,
          nextMap: { "'{'": "3#loop_stmt:while,exp,'{','}'" },
          id: "2#loop_stmt:while,exp,'{','}'",
        },
        {
          gr: "ret_stmt:return,exp,';'",
          digested: 2,
          nextMap: { "';'": "3#ret_stmt:return,exp,';'" },
          id: "2#ret_stmt:return,exp,';'",
        },
        {
          gr: "__2:stmt,__2",
          digested: 2,
          nextMap: {},
          id: "2#__2:stmt,__2",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          digested: 8,
          nextMap: {
            "'}'": "9#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          },
          id: "8#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,__1,')','{','}'",
          digested: 8,
          nextMap: {},
          id: "8#fn_def:fn,identifier,'(',param,__1,')','{','}'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,')','{',__2,'}'",
          digested: 8,
          nextMap: {},
          id: "8#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
        },
        {
          gr: "assign_stmt:identifier,'=',exp,';'",
          digested: 3,
          nextMap: { "';'": "4#assign_stmt:identifier,'=',exp,';'" },
          id: "3#assign_stmt:identifier,'=',exp,';'",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          digested: 3,
          nextMap: { __3: "4#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'" },
          id: "3#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}',else,'{','}'",
          digested: 3,
          nextMap: { __3: "4#if_stmt:if,exp,'{',__3,'}',else,'{','}'" },
          id: "3#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}'",
          digested: 3,
          nextMap: { __3: "4#if_stmt:if,exp,'{',__3,'}'" },
          id: "3#if_stmt:if,exp,'{',__3,'}'",
        },
        {
          gr: "if_stmt:if,exp,'{','}',else,'{',__4,'}'",
          digested: 3,
          nextMap: { "'}'": "4#if_stmt:if,exp,'{','}',else,'{',__4,'}'" },
          id: "3#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
        },
        {
          gr: "if_stmt:if,exp,'{','}',else,'{','}'",
          digested: 3,
          nextMap: { "'}'": "4#if_stmt:if,exp,'{','}',else,'{','}'" },
          id: "3#if_stmt:if,exp,'{','}',else,'{','}'",
        },
        {
          gr: "if_stmt:if,exp,'{','}'",
          digested: 3,
          nextMap: { "'}'": "4#if_stmt:if,exp,'{','}'" },
          id: "3#if_stmt:if,exp,'{','}'",
        },
        {
          gr: "exp:exp,'+',exp",
          digested: 2,
          nextMap: { exp: "3#exp:exp,'+',exp" },
          id: "2#exp:exp,'+',exp",
        },
        {
          gr: "exp:exp,'-',exp",
          digested: 2,
          nextMap: { exp: "3#exp:exp,'-',exp" },
          id: "2#exp:exp,'-',exp",
        },
        {
          gr: "exp:exp,'*',exp",
          digested: 2,
          nextMap: { exp: "3#exp:exp,'*',exp" },
          id: "2#exp:exp,'*',exp",
        },
        {
          gr: "exp:exp,'/',exp",
          digested: 2,
          nextMap: { exp: "3#exp:exp,'/',exp" },
          id: "2#exp:exp,'/',exp",
        },
        {
          gr: "exp:exp,'%',exp",
          digested: 2,
          nextMap: { exp: "3#exp:exp,'%',exp" },
          id: "2#exp:exp,'%',exp",
        },
        {
          gr: "exp:exp,'&&',exp",
          digested: 2,
          nextMap: { exp: "3#exp:exp,'&&',exp" },
          id: "2#exp:exp,'&&',exp",
        },
        {
          gr: "exp:exp,'||',exp",
          digested: 2,
          nextMap: { exp: "3#exp:exp,'||',exp" },
          id: "2#exp:exp,'||',exp",
        },
        {
          gr: "exp:exp,'==',exp",
          digested: 2,
          nextMap: { exp: "3#exp:exp,'==',exp" },
          id: "2#exp:exp,'==',exp",
        },
        {
          gr: "exp:exp,'!=',exp",
          digested: 2,
          nextMap: { exp: "3#exp:exp,'!=',exp" },
          id: "2#exp:exp,'!=',exp",
        },
        {
          gr: "exp:exp,'>',exp",
          digested: 2,
          nextMap: { exp: "3#exp:exp,'>',exp" },
          id: "2#exp:exp,'>',exp",
        },
        {
          gr: "exp:exp,'<',exp",
          digested: 2,
          nextMap: { exp: "3#exp:exp,'<',exp" },
          id: "2#exp:exp,'<',exp",
        },
        {
          gr: "exp:exp,'>=',exp",
          digested: 2,
          nextMap: { exp: "3#exp:exp,'>=',exp" },
          id: "2#exp:exp,'>=',exp",
        },
        {
          gr: "exp:exp,'<=',exp",
          digested: 2,
          nextMap: { exp: "3#exp:exp,'<=',exp" },
          id: "2#exp:exp,'<=',exp",
        },
        {
          gr: "exp:'-',exp",
          digested: 2,
          nextMap: {},
          id: "2#exp:'-',exp",
        },
        {
          gr: "exp:'!',exp",
          digested: 2,
          nextMap: {},
          id: "2#exp:'!',exp",
        },
        {
          gr: "loop_stmt:do,'{',__2,'}',while,exp,';'",
          digested: 3,
          nextMap: { "'}'": "4#loop_stmt:do,'{',__2,'}',while,exp,';'" },
          id: "3#loop_stmt:do,'{',__2,'}',while,exp,';'",
        },
        {
          gr: "loop_stmt:do,'{','}',while,exp,';'",
          digested: 3,
          nextMap: { while: "4#loop_stmt:do,'{','}',while,exp,';'" },
          id: "3#loop_stmt:do,'{','}',while,exp,';'",
        },
        {
          gr: "loop_stmt:while,exp,'{',__2,'}'",
          digested: 3,
          nextMap: { __2: "4#loop_stmt:while,exp,'{',__2,'}'" },
          id: "3#loop_stmt:while,exp,'{',__2,'}'",
        },
        {
          gr: "loop_stmt:while,exp,'{','}'",
          digested: 3,
          nextMap: { "'}'": "4#loop_stmt:while,exp,'{','}'" },
          id: "3#loop_stmt:while,exp,'{','}'",
        },
        {
          gr: "ret_stmt:return,exp,';'",
          digested: 3,
          nextMap: {},
          id: "3#ret_stmt:return,exp,';'",
        },
        {
          gr: "fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          digested: 9,
          nextMap: {},
          id: "9#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
        },
        {
          gr: "assign_stmt:identifier,'=',exp,';'",
          digested: 4,
          nextMap: {},
          id: "4#assign_stmt:identifier,'=',exp,';'",
        },
        {
          gr: "if_stmt:if,exp,'{','}',else,'{',__4,'}'",
          digested: 4,
          nextMap: { else: "5#if_stmt:if,exp,'{','}',else,'{',__4,'}'" },
          id: "4#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
        },
        {
          gr: "if_stmt:if,exp,'{','}',else,'{','}'",
          digested: 4,
          nextMap: { else: "5#if_stmt:if,exp,'{','}',else,'{','}'" },
          id: "4#if_stmt:if,exp,'{','}',else,'{','}'",
        },
        {
          gr: "if_stmt:if,exp,'{','}'",
          digested: 4,
          nextMap: {},
          id: "4#if_stmt:if,exp,'{','}'",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          digested: 4,
          nextMap: { "'}'": "5#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'" },
          id: "4#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}',else,'{','}'",
          digested: 4,
          nextMap: { "'}'": "5#if_stmt:if,exp,'{',__3,'}',else,'{','}'" },
          id: "4#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}'",
          digested: 4,
          nextMap: { "'}'": "5#if_stmt:if,exp,'{',__3,'}'" },
          id: "4#if_stmt:if,exp,'{',__3,'}'",
        },
        {
          gr: "__3:stmt@ifTrue",
          digested: 1,
          nextMap: {},
          id: "1#__3:stmt@ifTrue",
        },
        {
          gr: "__3:stmt@ifTrue,__3",
          digested: 1,
          nextMap: { __3: "2#__3:stmt@ifTrue,__3" },
          id: "1#__3:stmt@ifTrue,__3",
        },
        {
          gr: "exp:exp,'+',exp",
          digested: 3,
          nextMap: {},
          id: "3#exp:exp,'+',exp",
        },
        {
          gr: "exp:exp,'-',exp",
          digested: 3,
          nextMap: {},
          id: "3#exp:exp,'-',exp",
        },
        {
          gr: "exp:exp,'*',exp",
          digested: 3,
          nextMap: {},
          id: "3#exp:exp,'*',exp",
        },
        {
          gr: "exp:exp,'/',exp",
          digested: 3,
          nextMap: {},
          id: "3#exp:exp,'/',exp",
        },
        {
          gr: "exp:exp,'%',exp",
          digested: 3,
          nextMap: {},
          id: "3#exp:exp,'%',exp",
        },
        {
          gr: "exp:exp,'&&',exp",
          digested: 3,
          nextMap: {},
          id: "3#exp:exp,'&&',exp",
        },
        {
          gr: "exp:exp,'||',exp",
          digested: 3,
          nextMap: {},
          id: "3#exp:exp,'||',exp",
        },
        {
          gr: "exp:exp,'==',exp",
          digested: 3,
          nextMap: {},
          id: "3#exp:exp,'==',exp",
        },
        {
          gr: "exp:exp,'!=',exp",
          digested: 3,
          nextMap: {},
          id: "3#exp:exp,'!=',exp",
        },
        {
          gr: "exp:exp,'>',exp",
          digested: 3,
          nextMap: {},
          id: "3#exp:exp,'>',exp",
        },
        {
          gr: "exp:exp,'<',exp",
          digested: 3,
          nextMap: {},
          id: "3#exp:exp,'<',exp",
        },
        {
          gr: "exp:exp,'>=',exp",
          digested: 3,
          nextMap: {},
          id: "3#exp:exp,'>=',exp",
        },
        {
          gr: "exp:exp,'<=',exp",
          digested: 3,
          nextMap: {},
          id: "3#exp:exp,'<=',exp",
        },
        {
          gr: "loop_stmt:do,'{',__2,'}',while,exp,';'",
          digested: 4,
          nextMap: { while: "5#loop_stmt:do,'{',__2,'}',while,exp,';'" },
          id: "4#loop_stmt:do,'{',__2,'}',while,exp,';'",
        },
        {
          gr: "loop_stmt:do,'{','}',while,exp,';'",
          digested: 4,
          nextMap: { exp: "5#loop_stmt:do,'{','}',while,exp,';'" },
          id: "4#loop_stmt:do,'{','}',while,exp,';'",
        },
        {
          gr: "loop_stmt:while,exp,'{',__2,'}'",
          digested: 4,
          nextMap: { "'}'": "5#loop_stmt:while,exp,'{',__2,'}'" },
          id: "4#loop_stmt:while,exp,'{',__2,'}'",
        },
        {
          gr: "loop_stmt:while,exp,'{','}'",
          digested: 4,
          nextMap: {},
          id: "4#loop_stmt:while,exp,'{','}'",
        },
        {
          gr: "if_stmt:if,exp,'{','}',else,'{',__4,'}'",
          digested: 5,
          nextMap: { "'{'": "6#if_stmt:if,exp,'{','}',else,'{',__4,'}'" },
          id: "5#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
        },
        {
          gr: "if_stmt:if,exp,'{','}',else,'{','}'",
          digested: 5,
          nextMap: { "'{'": "6#if_stmt:if,exp,'{','}',else,'{','}'" },
          id: "5#if_stmt:if,exp,'{','}',else,'{','}'",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          digested: 5,
          nextMap: { else: "6#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'" },
          id: "5#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}',else,'{','}'",
          digested: 5,
          nextMap: { else: "6#if_stmt:if,exp,'{',__3,'}',else,'{','}'" },
          id: "5#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}'",
          digested: 5,
          nextMap: {},
          id: "5#if_stmt:if,exp,'{',__3,'}'",
        },
        {
          gr: "__3:stmt@ifTrue,__3",
          digested: 2,
          nextMap: {},
          id: "2#__3:stmt@ifTrue,__3",
        },
        {
          gr: "loop_stmt:do,'{',__2,'}',while,exp,';'",
          digested: 5,
          nextMap: { exp: "6#loop_stmt:do,'{',__2,'}',while,exp,';'" },
          id: "5#loop_stmt:do,'{',__2,'}',while,exp,';'",
        },
        {
          gr: "loop_stmt:do,'{','}',while,exp,';'",
          digested: 5,
          nextMap: { "';'": "6#loop_stmt:do,'{','}',while,exp,';'" },
          id: "5#loop_stmt:do,'{','}',while,exp,';'",
        },
        {
          gr: "loop_stmt:while,exp,'{',__2,'}'",
          digested: 5,
          nextMap: {},
          id: "5#loop_stmt:while,exp,'{',__2,'}'",
        },
        {
          gr: "if_stmt:if,exp,'{','}',else,'{',__4,'}'",
          digested: 6,
          nextMap: { __4: "7#if_stmt:if,exp,'{','}',else,'{',__4,'}'" },
          id: "6#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
        },
        {
          gr: "if_stmt:if,exp,'{','}',else,'{','}'",
          digested: 6,
          nextMap: { "'}'": "7#if_stmt:if,exp,'{','}',else,'{','}'" },
          id: "6#if_stmt:if,exp,'{','}',else,'{','}'",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          digested: 6,
          nextMap: { "'{'": "7#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'" },
          id: "6#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}',else,'{','}'",
          digested: 6,
          nextMap: { "'{'": "7#if_stmt:if,exp,'{',__3,'}',else,'{','}'" },
          id: "6#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
        },
        {
          gr: "loop_stmt:do,'{',__2,'}',while,exp,';'",
          digested: 6,
          nextMap: { "';'": "7#loop_stmt:do,'{',__2,'}',while,exp,';'" },
          id: "6#loop_stmt:do,'{',__2,'}',while,exp,';'",
        },
        {
          gr: "loop_stmt:do,'{','}',while,exp,';'",
          digested: 6,
          nextMap: {},
          id: "6#loop_stmt:do,'{','}',while,exp,';'",
        },
        {
          gr: "if_stmt:if,exp,'{','}',else,'{','}'",
          digested: 7,
          nextMap: {},
          id: "7#if_stmt:if,exp,'{','}',else,'{','}'",
        },
        {
          gr: "if_stmt:if,exp,'{','}',else,'{',__4,'}'",
          digested: 7,
          nextMap: { "'}'": "8#if_stmt:if,exp,'{','}',else,'{',__4,'}'" },
          id: "7#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
        },
        {
          gr: "__4:stmt@ifFalse",
          digested: 1,
          nextMap: {},
          id: "1#__4:stmt@ifFalse",
        },
        {
          gr: "__4:stmt@ifFalse,__4",
          digested: 1,
          nextMap: { __4: "2#__4:stmt@ifFalse,__4" },
          id: "1#__4:stmt@ifFalse,__4",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          digested: 7,
          nextMap: { __4: "8#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'" },
          id: "7#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}',else,'{','}'",
          digested: 7,
          nextMap: { "'}'": "8#if_stmt:if,exp,'{',__3,'}',else,'{','}'" },
          id: "7#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
        },
        {
          gr: "loop_stmt:do,'{',__2,'}',while,exp,';'",
          digested: 7,
          nextMap: {},
          id: "7#loop_stmt:do,'{',__2,'}',while,exp,';'",
        },
        {
          gr: "if_stmt:if,exp,'{','}',else,'{',__4,'}'",
          digested: 8,
          nextMap: {},
          id: "8#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
        },
        {
          gr: "__4:stmt@ifFalse,__4",
          digested: 2,
          nextMap: {},
          id: "2#__4:stmt@ifFalse,__4",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}',else,'{','}'",
          digested: 8,
          nextMap: {},
          id: "8#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          digested: 8,
          nextMap: { "'}'": "9#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'" },
          id: "8#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
        },
        {
          gr: "if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          digested: 9,
          nextMap: {},
          id: "9#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
        },
      ],
      states: {
        "0#__0:fn_def\n0#__0:fn_def,__0\n0#fn_def:fn,identifier,'(',')','{','}'\n0#fn_def:fn,identifier,'(',')','{',__2,'}'\n0#fn_def:fn,identifier,'(',param,')','{','}'\n0#fn_def:fn,identifier,'(',param,')','{',__2,'}'\n0#fn_def:fn,identifier,'(',param,__1,')','{','}'\n0#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'\n0#fn_defs:__0":
          {
            candidates: [
              "0#fn_defs:__0",
              "0#__0:fn_def",
              "0#__0:fn_def,__0",
              "0#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              "0#fn_def:fn,identifier,'(',param,__1,')','{','}'",
              "0#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
              "0#fn_def:fn,identifier,'(',param,')','{','}'",
              "0#fn_def:fn,identifier,'(',')','{',__2,'}'",
              "0#fn_def:fn,identifier,'(',')','{','}'",
            ],
            nextMap: {
              __0: "1#fn_defs:__0",
              fn:
                "1#fn_def:fn,identifier,'(',')','{','}'\n" +
                "1#fn_def:fn,identifier,'(',')','{',__2,'}'\n" +
                "1#fn_def:fn,identifier,'(',param,')','{','}'\n" +
                "1#fn_def:fn,identifier,'(',param,')','{',__2,'}'\n" +
                "1#fn_def:fn,identifier,'(',param,__1,')','{','}'\n" +
                "1#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def:
                "0#__0:fn_def\n" +
                "0#__0:fn_def,__0\n" +
                "0#fn_def:fn,identifier,'(',')','{','}'\n" +
                "0#fn_def:fn,identifier,'(',')','{',__2,'}'\n" +
                "0#fn_def:fn,identifier,'(',param,')','{','}'\n" +
                "0#fn_def:fn,identifier,'(',param,')','{',__2,'}'\n" +
                "0#fn_def:fn,identifier,'(',param,__1,')','{','}'\n" +
                "0#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'\n" +
                "1#__0:fn_def\n" +
                "1#__0:fn_def,__0",
              "','": null,
              stmt: null,
            },
            id:
              "0#__0:fn_def\n" +
              "0#__0:fn_def,__0\n" +
              "0#fn_def:fn,identifier,'(',')','{','}'\n" +
              "0#fn_def:fn,identifier,'(',')','{',__2,'}'\n" +
              "0#fn_def:fn,identifier,'(',param,')','{','}'\n" +
              "0#fn_def:fn,identifier,'(',param,')','{',__2,'}'\n" +
              "0#fn_def:fn,identifier,'(',param,__1,')','{','}'\n" +
              "0#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'\n" +
              "0#fn_defs:__0",
          },
        "1#fn_defs:__0": {
          candidates: ["1#fn_defs:__0"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "1#fn_defs:__0",
        },
        "1#fn_def:fn,identifier,'(',')','{','}'\n1#fn_def:fn,identifier,'(',')','{',__2,'}'\n1#fn_def:fn,identifier,'(',param,')','{','}'\n1#fn_def:fn,identifier,'(',param,')','{',__2,'}'\n1#fn_def:fn,identifier,'(',param,__1,')','{','}'\n1#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'":
          {
            candidates: [
              "1#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              "1#fn_def:fn,identifier,'(',param,__1,')','{','}'",
              "1#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
              "1#fn_def:fn,identifier,'(',param,')','{','}'",
              "1#fn_def:fn,identifier,'(',')','{',__2,'}'",
              "1#fn_def:fn,identifier,'(',')','{','}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier:
                "2#fn_def:fn,identifier,'(',')','{','}'\n" +
                "2#fn_def:fn,identifier,'(',')','{',__2,'}'\n" +
                "2#fn_def:fn,identifier,'(',param,')','{','}'\n" +
                "2#fn_def:fn,identifier,'(',param,')','{',__2,'}'\n" +
                "2#fn_def:fn,identifier,'(',param,__1,')','{','}'\n" +
                "2#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#fn_def:fn,identifier,'(',')','{','}'\n" +
              "1#fn_def:fn,identifier,'(',')','{',__2,'}'\n" +
              "1#fn_def:fn,identifier,'(',param,')','{','}'\n" +
              "1#fn_def:fn,identifier,'(',param,')','{',__2,'}'\n" +
              "1#fn_def:fn,identifier,'(',param,__1,')','{','}'\n" +
              "1#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          },
        "0#__0:fn_def\n0#__0:fn_def,__0\n0#fn_def:fn,identifier,'(',')','{','}'\n0#fn_def:fn,identifier,'(',')','{',__2,'}'\n0#fn_def:fn,identifier,'(',param,')','{','}'\n0#fn_def:fn,identifier,'(',param,')','{',__2,'}'\n0#fn_def:fn,identifier,'(',param,__1,')','{','}'\n0#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'\n1#__0:fn_def\n1#__0:fn_def,__0":
          {
            candidates: [
              "1#__0:fn_def",
              "1#__0:fn_def,__0",
              "0#__0:fn_def",
              "0#__0:fn_def,__0",
              "0#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              "0#fn_def:fn,identifier,'(',param,__1,')','{','}'",
              "0#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
              "0#fn_def:fn,identifier,'(',param,')','{','}'",
              "0#fn_def:fn,identifier,'(',')','{',__2,'}'",
              "0#fn_def:fn,identifier,'(',')','{','}'",
            ],
            nextMap: {
              __0: "2#__0:fn_def,__0",
              fn:
                "1#fn_def:fn,identifier,'(',')','{','}'\n" +
                "1#fn_def:fn,identifier,'(',')','{',__2,'}'\n" +
                "1#fn_def:fn,identifier,'(',param,')','{','}'\n" +
                "1#fn_def:fn,identifier,'(',param,')','{',__2,'}'\n" +
                "1#fn_def:fn,identifier,'(',param,__1,')','{','}'\n" +
                "1#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def:
                "0#__0:fn_def\n" +
                "0#__0:fn_def,__0\n" +
                "0#fn_def:fn,identifier,'(',')','{','}'\n" +
                "0#fn_def:fn,identifier,'(',')','{',__2,'}'\n" +
                "0#fn_def:fn,identifier,'(',param,')','{','}'\n" +
                "0#fn_def:fn,identifier,'(',param,')','{',__2,'}'\n" +
                "0#fn_def:fn,identifier,'(',param,__1,')','{','}'\n" +
                "0#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'\n" +
                "1#__0:fn_def\n" +
                "1#__0:fn_def,__0",
              "','": null,
              stmt: null,
            },
            id:
              "0#__0:fn_def\n" +
              "0#__0:fn_def,__0\n" +
              "0#fn_def:fn,identifier,'(',')','{','}'\n" +
              "0#fn_def:fn,identifier,'(',')','{',__2,'}'\n" +
              "0#fn_def:fn,identifier,'(',param,')','{','}'\n" +
              "0#fn_def:fn,identifier,'(',param,')','{',__2,'}'\n" +
              "0#fn_def:fn,identifier,'(',param,__1,')','{','}'\n" +
              "0#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'\n" +
              "1#__0:fn_def\n" +
              "1#__0:fn_def,__0",
          },
        "2#fn_def:fn,identifier,'(',')','{','}'\n2#fn_def:fn,identifier,'(',')','{',__2,'}'\n2#fn_def:fn,identifier,'(',param,')','{','}'\n2#fn_def:fn,identifier,'(',param,')','{',__2,'}'\n2#fn_def:fn,identifier,'(',param,__1,')','{','}'\n2#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'":
          {
            candidates: [
              "2#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              "2#fn_def:fn,identifier,'(',param,__1,')','{','}'",
              "2#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
              "2#fn_def:fn,identifier,'(',param,')','{','}'",
              "2#fn_def:fn,identifier,'(',')','{',__2,'}'",
              "2#fn_def:fn,identifier,'(',')','{','}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('":
                "0#param:identifier\n" +
                "3#fn_def:fn,identifier,'(',')','{','}'\n" +
                "3#fn_def:fn,identifier,'(',')','{',__2,'}'\n" +
                "3#fn_def:fn,identifier,'(',param,')','{','}'\n" +
                "3#fn_def:fn,identifier,'(',param,')','{',__2,'}'\n" +
                "3#fn_def:fn,identifier,'(',param,__1,')','{','}'\n" +
                "3#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "2#fn_def:fn,identifier,'(',')','{','}'\n" +
              "2#fn_def:fn,identifier,'(',')','{',__2,'}'\n" +
              "2#fn_def:fn,identifier,'(',param,')','{','}'\n" +
              "2#fn_def:fn,identifier,'(',param,')','{',__2,'}'\n" +
              "2#fn_def:fn,identifier,'(',param,__1,')','{','}'\n" +
              "2#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          },
        "2#__0:fn_def,__0": {
          candidates: ["2#__0:fn_def,__0"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "2#__0:fn_def,__0",
        },
        "0#param:identifier\n3#fn_def:fn,identifier,'(',')','{','}'\n3#fn_def:fn,identifier,'(',')','{',__2,'}'\n3#fn_def:fn,identifier,'(',param,')','{','}'\n3#fn_def:fn,identifier,'(',param,')','{',__2,'}'\n3#fn_def:fn,identifier,'(',param,__1,')','{','}'\n3#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'":
          {
            candidates: [
              "3#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              "3#fn_def:fn,identifier,'(',param,__1,')','{','}'",
              "3#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
              "3#fn_def:fn,identifier,'(',param,')','{','}'",
              "3#fn_def:fn,identifier,'(',')','{',__2,'}'",
              "3#fn_def:fn,identifier,'(',')','{','}'",
              "0#param:identifier",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#param:identifier",
              "'('": null,
              param:
                "0#__1:',',param\n" +
                "0#__1:',',param,__1\n" +
                "4#fn_def:fn,identifier,'(',param,')','{','}'\n" +
                "4#fn_def:fn,identifier,'(',param,')','{',__2,'}'\n" +
                "4#fn_def:fn,identifier,'(',param,__1,')','{','}'\n" +
                "4#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              __1: null,
              "')'":
                "4#fn_def:fn,identifier,'(',')','{','}'\n" +
                "4#fn_def:fn,identifier,'(',')','{',__2,'}'",
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#param:identifier\n" +
              "3#fn_def:fn,identifier,'(',')','{','}'\n" +
              "3#fn_def:fn,identifier,'(',')','{',__2,'}'\n" +
              "3#fn_def:fn,identifier,'(',param,')','{','}'\n" +
              "3#fn_def:fn,identifier,'(',param,')','{',__2,'}'\n" +
              "3#fn_def:fn,identifier,'(',param,__1,')','{','}'\n" +
              "3#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          },
        "1#param:identifier": {
          candidates: ["1#param:identifier"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "1#param:identifier",
        },
        "0#__1:',',param\n0#__1:',',param,__1\n4#fn_def:fn,identifier,'(',param,')','{','}'\n4#fn_def:fn,identifier,'(',param,')','{',__2,'}'\n4#fn_def:fn,identifier,'(',param,__1,')','{','}'\n4#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'":
          {
            candidates: [
              "4#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              "4#fn_def:fn,identifier,'(',param,__1,')','{','}'",
              "4#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
              "4#fn_def:fn,identifier,'(',param,')','{','}'",
              "0#__1:',',param",
              "0#__1:',',param,__1",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1:
                "5#fn_def:fn,identifier,'(',param,__1,')','{','}'\n" +
                "5#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              "')'":
                "5#fn_def:fn,identifier,'(',param,')','{','}'\n" +
                "5#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": "0#param:identifier\n1#__1:',',param\n1#__1:',',param,__1",
              stmt: null,
            },
            id:
              "0#__1:',',param\n" +
              "0#__1:',',param,__1\n" +
              "4#fn_def:fn,identifier,'(',param,')','{','}'\n" +
              "4#fn_def:fn,identifier,'(',param,')','{',__2,'}'\n" +
              "4#fn_def:fn,identifier,'(',param,__1,')','{','}'\n" +
              "4#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          },
        "4#fn_def:fn,identifier,'(',')','{','}'\n4#fn_def:fn,identifier,'(',')','{',__2,'}'":
          {
            candidates: [
              "4#fn_def:fn,identifier,'(',')','{',__2,'}'",
              "4#fn_def:fn,identifier,'(',')','{','}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'":
                "0#__2:stmt\n" +
                "0#__2:stmt,__2\n" +
                "0#assign_stmt:identifier,'=',exp,';'\n" +
                "0#if_stmt:if,exp,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
                "0#loop_stmt:do,'{','}',while,exp,';'\n" +
                "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
                "0#loop_stmt:while,exp,'{','}'\n" +
                "0#loop_stmt:while,exp,'{',__2,'}'\n" +
                "0#ret_stmt:return,exp,';'\n" +
                "0#stmt:assign_stmt\n" +
                "0#stmt:if_stmt\n" +
                "0#stmt:loop_stmt\n" +
                "0#stmt:ret_stmt\n" +
                "5#fn_def:fn,identifier,'(',')','{','}'\n" +
                "5#fn_def:fn,identifier,'(',')','{',__2,'}'",
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "4#fn_def:fn,identifier,'(',')','{','}'\n" +
              "4#fn_def:fn,identifier,'(',')','{',__2,'}'",
          },
        "5#fn_def:fn,identifier,'(',param,__1,')','{','}'\n5#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'":
          {
            candidates: [
              "5#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              "5#fn_def:fn,identifier,'(',param,__1,')','{','}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'":
                "6#fn_def:fn,identifier,'(',param,__1,')','{','}'\n" +
                "6#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "5#fn_def:fn,identifier,'(',param,__1,')','{','}'\n" +
              "5#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          },
        "5#fn_def:fn,identifier,'(',param,')','{','}'\n5#fn_def:fn,identifier,'(',param,')','{',__2,'}'":
          {
            candidates: [
              "5#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
              "5#fn_def:fn,identifier,'(',param,')','{','}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'":
                "0#__2:stmt\n" +
                "0#__2:stmt,__2\n" +
                "0#assign_stmt:identifier,'=',exp,';'\n" +
                "0#if_stmt:if,exp,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
                "0#loop_stmt:do,'{','}',while,exp,';'\n" +
                "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
                "0#loop_stmt:while,exp,'{','}'\n" +
                "0#loop_stmt:while,exp,'{',__2,'}'\n" +
                "0#ret_stmt:return,exp,';'\n" +
                "0#stmt:assign_stmt\n" +
                "0#stmt:if_stmt\n" +
                "0#stmt:loop_stmt\n" +
                "0#stmt:ret_stmt\n" +
                "6#fn_def:fn,identifier,'(',param,')','{','}'\n" +
                "6#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "5#fn_def:fn,identifier,'(',param,')','{','}'\n" +
              "5#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
          },
        "0#param:identifier\n1#__1:',',param\n1#__1:',',param,__1": {
          candidates: [
            "1#__1:',',param",
            "1#__1:',',param,__1",
            "0#param:identifier",
          ],
          nextMap: {
            __0: null,
            fn: null,
            identifier: "1#param:identifier",
            "'('": null,
            param:
              "0#__1:',',param\n" +
              "0#__1:',',param,__1\n" +
              "2#__1:',',param\n" +
              "2#__1:',',param,__1",
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "0#param:identifier\n1#__1:',',param\n1#__1:',',param,__1",
        },
        "0#__2:stmt\n0#__2:stmt,__2\n0#assign_stmt:identifier,'=',exp,';'\n0#if_stmt:if,exp,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n0#if_stmt:if,exp,'{',__3,'}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n0#loop_stmt:do,'{','}',while,exp,';'\n0#loop_stmt:do,'{',__2,'}',while,exp,';'\n0#loop_stmt:while,exp,'{','}'\n0#loop_stmt:while,exp,'{',__2,'}'\n0#ret_stmt:return,exp,';'\n0#stmt:assign_stmt\n0#stmt:if_stmt\n0#stmt:loop_stmt\n0#stmt:ret_stmt\n5#fn_def:fn,identifier,'(',')','{','}'\n5#fn_def:fn,identifier,'(',')','{',__2,'}'":
          {
            candidates: [
              "5#fn_def:fn,identifier,'(',')','{',__2,'}'",
              "5#fn_def:fn,identifier,'(',')','{','}'",
              "0#__2:stmt",
              "0#__2:stmt,__2",
              "0#stmt:assign_stmt",
              "0#stmt:ret_stmt",
              "0#stmt:if_stmt",
              "0#stmt:loop_stmt",
              "0#assign_stmt:identifier,'=',exp,';'",
              "0#ret_stmt:return,exp,';'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              "0#if_stmt:if,exp,'{',__3,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{','}'",
              "0#if_stmt:if,exp,'{','}'",
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'",
              "0#loop_stmt:do,'{','}',while,exp,';'",
              "0#loop_stmt:while,exp,'{',__2,'}'",
              "0#loop_stmt:while,exp,'{','}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#assign_stmt:identifier,'=',exp,';'",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: "6#fn_def:fn,identifier,'(',')','{',__2,'}'",
              "'}'": "6#fn_def:fn,identifier,'(',')','{','}'",
              if:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#if_stmt:if,exp,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do:
                "1#loop_stmt:do,'{','}',while,exp,';'\n" +
                "1#loop_stmt:do,'{',__2,'}',while,exp,';'",
              while:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#loop_stmt:while,exp,'{','}'\n" +
                "1#loop_stmt:while,exp,'{',__2,'}'",
              "';'": null,
              assign_stmt: "1#stmt:assign_stmt",
              ret_stmt: "1#stmt:ret_stmt",
              if_stmt: "1#stmt:if_stmt",
              loop_stmt: "1#stmt:loop_stmt",
              "'='": null,
              return:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#ret_stmt:return,exp,';'",
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt:
                "0#__2:stmt\n" +
                "0#__2:stmt,__2\n" +
                "0#assign_stmt:identifier,'=',exp,';'\n" +
                "0#if_stmt:if,exp,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
                "0#loop_stmt:do,'{','}',while,exp,';'\n" +
                "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
                "0#loop_stmt:while,exp,'{','}'\n" +
                "0#loop_stmt:while,exp,'{',__2,'}'\n" +
                "0#ret_stmt:return,exp,';'\n" +
                "0#stmt:assign_stmt\n" +
                "0#stmt:if_stmt\n" +
                "0#stmt:loop_stmt\n" +
                "0#stmt:ret_stmt\n" +
                "1#__2:stmt\n" +
                "1#__2:stmt,__2",
            },
            id:
              "0#__2:stmt\n" +
              "0#__2:stmt,__2\n" +
              "0#assign_stmt:identifier,'=',exp,';'\n" +
              "0#if_stmt:if,exp,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
              "0#loop_stmt:do,'{','}',while,exp,';'\n" +
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
              "0#loop_stmt:while,exp,'{','}'\n" +
              "0#loop_stmt:while,exp,'{',__2,'}'\n" +
              "0#ret_stmt:return,exp,';'\n" +
              "0#stmt:assign_stmt\n" +
              "0#stmt:if_stmt\n" +
              "0#stmt:loop_stmt\n" +
              "0#stmt:ret_stmt\n" +
              "5#fn_def:fn,identifier,'(',')','{','}'\n" +
              "5#fn_def:fn,identifier,'(',')','{',__2,'}'",
          },
        "6#fn_def:fn,identifier,'(',param,__1,')','{','}'\n6#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'":
          {
            candidates: [
              "6#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              "6#fn_def:fn,identifier,'(',param,__1,')','{','}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'":
                "0#__2:stmt\n" +
                "0#__2:stmt,__2\n" +
                "0#assign_stmt:identifier,'=',exp,';'\n" +
                "0#if_stmt:if,exp,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
                "0#loop_stmt:do,'{','}',while,exp,';'\n" +
                "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
                "0#loop_stmt:while,exp,'{','}'\n" +
                "0#loop_stmt:while,exp,'{',__2,'}'\n" +
                "0#ret_stmt:return,exp,';'\n" +
                "0#stmt:assign_stmt\n" +
                "0#stmt:if_stmt\n" +
                "0#stmt:loop_stmt\n" +
                "0#stmt:ret_stmt\n" +
                "7#fn_def:fn,identifier,'(',param,__1,')','{','}'\n" +
                "7#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "6#fn_def:fn,identifier,'(',param,__1,')','{','}'\n" +
              "6#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          },
        "0#__2:stmt\n0#__2:stmt,__2\n0#assign_stmt:identifier,'=',exp,';'\n0#if_stmt:if,exp,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n0#if_stmt:if,exp,'{',__3,'}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n0#loop_stmt:do,'{','}',while,exp,';'\n0#loop_stmt:do,'{',__2,'}',while,exp,';'\n0#loop_stmt:while,exp,'{','}'\n0#loop_stmt:while,exp,'{',__2,'}'\n0#ret_stmt:return,exp,';'\n0#stmt:assign_stmt\n0#stmt:if_stmt\n0#stmt:loop_stmt\n0#stmt:ret_stmt\n6#fn_def:fn,identifier,'(',param,')','{','}'\n6#fn_def:fn,identifier,'(',param,')','{',__2,'}'":
          {
            candidates: [
              "6#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
              "6#fn_def:fn,identifier,'(',param,')','{','}'",
              "0#__2:stmt",
              "0#__2:stmt,__2",
              "0#stmt:assign_stmt",
              "0#stmt:ret_stmt",
              "0#stmt:if_stmt",
              "0#stmt:loop_stmt",
              "0#assign_stmt:identifier,'=',exp,';'",
              "0#ret_stmt:return,exp,';'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              "0#if_stmt:if,exp,'{',__3,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{','}'",
              "0#if_stmt:if,exp,'{','}'",
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'",
              "0#loop_stmt:do,'{','}',while,exp,';'",
              "0#loop_stmt:while,exp,'{',__2,'}'",
              "0#loop_stmt:while,exp,'{','}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#assign_stmt:identifier,'=',exp,';'",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: "7#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
              "'}'": "7#fn_def:fn,identifier,'(',param,')','{','}'",
              if:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#if_stmt:if,exp,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do:
                "1#loop_stmt:do,'{','}',while,exp,';'\n" +
                "1#loop_stmt:do,'{',__2,'}',while,exp,';'",
              while:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#loop_stmt:while,exp,'{','}'\n" +
                "1#loop_stmt:while,exp,'{',__2,'}'",
              "';'": null,
              assign_stmt: "1#stmt:assign_stmt",
              ret_stmt: "1#stmt:ret_stmt",
              if_stmt: "1#stmt:if_stmt",
              loop_stmt: "1#stmt:loop_stmt",
              "'='": null,
              return:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#ret_stmt:return,exp,';'",
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt:
                "0#__2:stmt\n" +
                "0#__2:stmt,__2\n" +
                "0#assign_stmt:identifier,'=',exp,';'\n" +
                "0#if_stmt:if,exp,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
                "0#loop_stmt:do,'{','}',while,exp,';'\n" +
                "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
                "0#loop_stmt:while,exp,'{','}'\n" +
                "0#loop_stmt:while,exp,'{',__2,'}'\n" +
                "0#ret_stmt:return,exp,';'\n" +
                "0#stmt:assign_stmt\n" +
                "0#stmt:if_stmt\n" +
                "0#stmt:loop_stmt\n" +
                "0#stmt:ret_stmt\n" +
                "1#__2:stmt\n" +
                "1#__2:stmt,__2",
            },
            id:
              "0#__2:stmt\n" +
              "0#__2:stmt,__2\n" +
              "0#assign_stmt:identifier,'=',exp,';'\n" +
              "0#if_stmt:if,exp,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
              "0#loop_stmt:do,'{','}',while,exp,';'\n" +
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
              "0#loop_stmt:while,exp,'{','}'\n" +
              "0#loop_stmt:while,exp,'{',__2,'}'\n" +
              "0#ret_stmt:return,exp,';'\n" +
              "0#stmt:assign_stmt\n" +
              "0#stmt:if_stmt\n" +
              "0#stmt:loop_stmt\n" +
              "0#stmt:ret_stmt\n" +
              "6#fn_def:fn,identifier,'(',param,')','{','}'\n" +
              "6#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
          },
        "0#__1:',',param\n0#__1:',',param,__1\n2#__1:',',param\n2#__1:',',param,__1":
          {
            candidates: [
              "2#__1:',',param",
              "2#__1:',',param,__1",
              "0#__1:',',param",
              "0#__1:',',param,__1",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: "3#__1:',',param,__1",
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": "0#param:identifier\n1#__1:',',param\n1#__1:',',param,__1",
              stmt: null,
            },
            id:
              "0#__1:',',param\n" +
              "0#__1:',',param,__1\n" +
              "2#__1:',',param\n" +
              "2#__1:',',param,__1",
          },
        "1#assign_stmt:identifier,'=',exp,';'": {
          candidates: ["1#assign_stmt:identifier,'=',exp,';'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='":
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "2#assign_stmt:identifier,'=',exp,';'",
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "1#assign_stmt:identifier,'=',exp,';'",
        },
        "6#fn_def:fn,identifier,'(',')','{',__2,'}'": {
          candidates: ["6#fn_def:fn,identifier,'(',')','{',__2,'}'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": "7#fn_def:fn,identifier,'(',')','{',__2,'}'",
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "6#fn_def:fn,identifier,'(',')','{',__2,'}'",
        },
        "6#fn_def:fn,identifier,'(',')','{','}'": {
          candidates: ["6#fn_def:fn,identifier,'(',')','{','}'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "6#fn_def:fn,identifier,'(',')','{','}'",
        },
        "0#exp:'!',exp\n0#exp:'-',exp\n0#exp:exp,'!=',exp\n0#exp:exp,'%',exp\n0#exp:exp,'&&',exp\n0#exp:exp,'*',exp\n0#exp:exp,'+',exp\n0#exp:exp,'-',exp\n0#exp:exp,'/',exp\n0#exp:exp,'<',exp\n0#exp:exp,'<=',exp\n0#exp:exp,'==',exp\n0#exp:exp,'>',exp\n0#exp:exp,'>=',exp\n0#exp:exp,'||',exp\n0#exp:identifier\n0#exp:integer\n1#if_stmt:if,exp,'{','}'\n1#if_stmt:if,exp,'{','}',else,'{','}'\n1#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n1#if_stmt:if,exp,'{',__3,'}'\n1#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n1#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'":
          {
            candidates: [
              "1#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              "1#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              "1#if_stmt:if,exp,'{',__3,'}'",
              "1#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              "1#if_stmt:if,exp,'{','}',else,'{','}'",
              "1#if_stmt:if,exp,'{','}'",
              "0#exp:integer",
              "0#exp:identifier",
              "0#exp:exp,'+',exp",
              "0#exp:exp,'-',exp",
              "0#exp:exp,'*',exp",
              "0#exp:exp,'/',exp",
              "0#exp:exp,'%',exp",
              "0#exp:'-',exp",
              "0#exp:exp,'&&',exp",
              "0#exp:exp,'||',exp",
              "0#exp:'!',exp",
              "0#exp:exp,'==',exp",
              "0#exp:exp,'!=',exp",
              "0#exp:exp,'>',exp",
              "0#exp:exp,'<',exp",
              "0#exp:exp,'>=',exp",
              "0#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#exp:identifier",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp:
                "1#exp:exp,'!=',exp\n" +
                "1#exp:exp,'%',exp\n" +
                "1#exp:exp,'&&',exp\n" +
                "1#exp:exp,'*',exp\n" +
                "1#exp:exp,'+',exp\n" +
                "1#exp:exp,'-',exp\n" +
                "1#exp:exp,'/',exp\n" +
                "1#exp:exp,'<',exp\n" +
                "1#exp:exp,'<=',exp\n" +
                "1#exp:exp,'==',exp\n" +
                "1#exp:exp,'>',exp\n" +
                "1#exp:exp,'>=',exp\n" +
                "1#exp:exp,'||',exp\n" +
                "2#if_stmt:if,exp,'{','}'\n" +
                "2#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "2#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "2#if_stmt:if,exp,'{',__3,'}'\n" +
                "2#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "2#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: "1#exp:integer",
              "'+'": null,
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'-',exp",
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'!',exp",
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "1#if_stmt:if,exp,'{','}'\n" +
              "1#if_stmt:if,exp,'{','}',else,'{','}'\n" +
              "1#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
              "1#if_stmt:if,exp,'{',__3,'}'\n" +
              "1#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
              "1#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          },
        "1#loop_stmt:do,'{','}',while,exp,';'\n1#loop_stmt:do,'{',__2,'}',while,exp,';'":
          {
            candidates: [
              "1#loop_stmt:do,'{',__2,'}',while,exp,';'",
              "1#loop_stmt:do,'{','}',while,exp,';'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'":
                "0#__2:stmt\n" +
                "0#__2:stmt,__2\n" +
                "0#assign_stmt:identifier,'=',exp,';'\n" +
                "0#if_stmt:if,exp,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
                "0#loop_stmt:do,'{','}',while,exp,';'\n" +
                "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
                "0#loop_stmt:while,exp,'{','}'\n" +
                "0#loop_stmt:while,exp,'{',__2,'}'\n" +
                "0#ret_stmt:return,exp,';'\n" +
                "0#stmt:assign_stmt\n" +
                "0#stmt:if_stmt\n" +
                "0#stmt:loop_stmt\n" +
                "0#stmt:ret_stmt\n" +
                "2#loop_stmt:do,'{','}',while,exp,';'\n" +
                "2#loop_stmt:do,'{',__2,'}',while,exp,';'",
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#loop_stmt:do,'{','}',while,exp,';'\n" +
              "1#loop_stmt:do,'{',__2,'}',while,exp,';'",
          },
        "0#exp:'!',exp\n0#exp:'-',exp\n0#exp:exp,'!=',exp\n0#exp:exp,'%',exp\n0#exp:exp,'&&',exp\n0#exp:exp,'*',exp\n0#exp:exp,'+',exp\n0#exp:exp,'-',exp\n0#exp:exp,'/',exp\n0#exp:exp,'<',exp\n0#exp:exp,'<=',exp\n0#exp:exp,'==',exp\n0#exp:exp,'>',exp\n0#exp:exp,'>=',exp\n0#exp:exp,'||',exp\n0#exp:identifier\n0#exp:integer\n1#loop_stmt:while,exp,'{','}'\n1#loop_stmt:while,exp,'{',__2,'}'":
          {
            candidates: [
              "1#loop_stmt:while,exp,'{',__2,'}'",
              "1#loop_stmt:while,exp,'{','}'",
              "0#exp:integer",
              "0#exp:identifier",
              "0#exp:exp,'+',exp",
              "0#exp:exp,'-',exp",
              "0#exp:exp,'*',exp",
              "0#exp:exp,'/',exp",
              "0#exp:exp,'%',exp",
              "0#exp:'-',exp",
              "0#exp:exp,'&&',exp",
              "0#exp:exp,'||',exp",
              "0#exp:'!',exp",
              "0#exp:exp,'==',exp",
              "0#exp:exp,'!=',exp",
              "0#exp:exp,'>',exp",
              "0#exp:exp,'<',exp",
              "0#exp:exp,'>=',exp",
              "0#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#exp:identifier",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp:
                "1#exp:exp,'!=',exp\n" +
                "1#exp:exp,'%',exp\n" +
                "1#exp:exp,'&&',exp\n" +
                "1#exp:exp,'*',exp\n" +
                "1#exp:exp,'+',exp\n" +
                "1#exp:exp,'-',exp\n" +
                "1#exp:exp,'/',exp\n" +
                "1#exp:exp,'<',exp\n" +
                "1#exp:exp,'<=',exp\n" +
                "1#exp:exp,'==',exp\n" +
                "1#exp:exp,'>',exp\n" +
                "1#exp:exp,'>=',exp\n" +
                "1#exp:exp,'||',exp\n" +
                "2#loop_stmt:while,exp,'{','}'\n" +
                "2#loop_stmt:while,exp,'{',__2,'}'",
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: "1#exp:integer",
              "'+'": null,
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'-',exp",
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'!',exp",
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "1#loop_stmt:while,exp,'{','}'\n" +
              "1#loop_stmt:while,exp,'{',__2,'}'",
          },
        "1#stmt:assign_stmt": {
          candidates: ["1#stmt:assign_stmt"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "1#stmt:assign_stmt",
        },
        "1#stmt:ret_stmt": {
          candidates: ["1#stmt:ret_stmt"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "1#stmt:ret_stmt",
        },
        "1#stmt:if_stmt": {
          candidates: ["1#stmt:if_stmt"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "1#stmt:if_stmt",
        },
        "1#stmt:loop_stmt": {
          candidates: ["1#stmt:loop_stmt"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "1#stmt:loop_stmt",
        },
        "0#exp:'!',exp\n0#exp:'-',exp\n0#exp:exp,'!=',exp\n0#exp:exp,'%',exp\n0#exp:exp,'&&',exp\n0#exp:exp,'*',exp\n0#exp:exp,'+',exp\n0#exp:exp,'-',exp\n0#exp:exp,'/',exp\n0#exp:exp,'<',exp\n0#exp:exp,'<=',exp\n0#exp:exp,'==',exp\n0#exp:exp,'>',exp\n0#exp:exp,'>=',exp\n0#exp:exp,'||',exp\n0#exp:identifier\n0#exp:integer\n1#ret_stmt:return,exp,';'":
          {
            candidates: [
              "1#ret_stmt:return,exp,';'",
              "0#exp:integer",
              "0#exp:identifier",
              "0#exp:exp,'+',exp",
              "0#exp:exp,'-',exp",
              "0#exp:exp,'*',exp",
              "0#exp:exp,'/',exp",
              "0#exp:exp,'%',exp",
              "0#exp:'-',exp",
              "0#exp:exp,'&&',exp",
              "0#exp:exp,'||',exp",
              "0#exp:'!',exp",
              "0#exp:exp,'==',exp",
              "0#exp:exp,'!=',exp",
              "0#exp:exp,'>',exp",
              "0#exp:exp,'<',exp",
              "0#exp:exp,'>=',exp",
              "0#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#exp:identifier",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp:
                "1#exp:exp,'!=',exp\n" +
                "1#exp:exp,'%',exp\n" +
                "1#exp:exp,'&&',exp\n" +
                "1#exp:exp,'*',exp\n" +
                "1#exp:exp,'+',exp\n" +
                "1#exp:exp,'-',exp\n" +
                "1#exp:exp,'/',exp\n" +
                "1#exp:exp,'<',exp\n" +
                "1#exp:exp,'<=',exp\n" +
                "1#exp:exp,'==',exp\n" +
                "1#exp:exp,'>',exp\n" +
                "1#exp:exp,'>=',exp\n" +
                "1#exp:exp,'||',exp\n" +
                "2#ret_stmt:return,exp,';'",
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: "1#exp:integer",
              "'+'": null,
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'-',exp",
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'!',exp",
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "1#ret_stmt:return,exp,';'",
          },
        "0#__2:stmt\n0#__2:stmt,__2\n0#assign_stmt:identifier,'=',exp,';'\n0#if_stmt:if,exp,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n0#if_stmt:if,exp,'{',__3,'}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n0#loop_stmt:do,'{','}',while,exp,';'\n0#loop_stmt:do,'{',__2,'}',while,exp,';'\n0#loop_stmt:while,exp,'{','}'\n0#loop_stmt:while,exp,'{',__2,'}'\n0#ret_stmt:return,exp,';'\n0#stmt:assign_stmt\n0#stmt:if_stmt\n0#stmt:loop_stmt\n0#stmt:ret_stmt\n1#__2:stmt\n1#__2:stmt,__2":
          {
            candidates: [
              "1#__2:stmt",
              "1#__2:stmt,__2",
              "0#__2:stmt",
              "0#__2:stmt,__2",
              "0#stmt:assign_stmt",
              "0#stmt:ret_stmt",
              "0#stmt:if_stmt",
              "0#stmt:loop_stmt",
              "0#assign_stmt:identifier,'=',exp,';'",
              "0#ret_stmt:return,exp,';'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              "0#if_stmt:if,exp,'{',__3,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{','}'",
              "0#if_stmt:if,exp,'{','}'",
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'",
              "0#loop_stmt:do,'{','}',while,exp,';'",
              "0#loop_stmt:while,exp,'{',__2,'}'",
              "0#loop_stmt:while,exp,'{','}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#assign_stmt:identifier,'=',exp,';'",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: "2#__2:stmt,__2",
              "'}'": null,
              if:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#if_stmt:if,exp,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do:
                "1#loop_stmt:do,'{','}',while,exp,';'\n" +
                "1#loop_stmt:do,'{',__2,'}',while,exp,';'",
              while:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#loop_stmt:while,exp,'{','}'\n" +
                "1#loop_stmt:while,exp,'{',__2,'}'",
              "';'": null,
              assign_stmt: "1#stmt:assign_stmt",
              ret_stmt: "1#stmt:ret_stmt",
              if_stmt: "1#stmt:if_stmt",
              loop_stmt: "1#stmt:loop_stmt",
              "'='": null,
              return:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#ret_stmt:return,exp,';'",
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt:
                "0#__2:stmt\n" +
                "0#__2:stmt,__2\n" +
                "0#assign_stmt:identifier,'=',exp,';'\n" +
                "0#if_stmt:if,exp,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
                "0#loop_stmt:do,'{','}',while,exp,';'\n" +
                "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
                "0#loop_stmt:while,exp,'{','}'\n" +
                "0#loop_stmt:while,exp,'{',__2,'}'\n" +
                "0#ret_stmt:return,exp,';'\n" +
                "0#stmt:assign_stmt\n" +
                "0#stmt:if_stmt\n" +
                "0#stmt:loop_stmt\n" +
                "0#stmt:ret_stmt\n" +
                "1#__2:stmt\n" +
                "1#__2:stmt,__2",
            },
            id:
              "0#__2:stmt\n" +
              "0#__2:stmt,__2\n" +
              "0#assign_stmt:identifier,'=',exp,';'\n" +
              "0#if_stmt:if,exp,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
              "0#loop_stmt:do,'{','}',while,exp,';'\n" +
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
              "0#loop_stmt:while,exp,'{','}'\n" +
              "0#loop_stmt:while,exp,'{',__2,'}'\n" +
              "0#ret_stmt:return,exp,';'\n" +
              "0#stmt:assign_stmt\n" +
              "0#stmt:if_stmt\n" +
              "0#stmt:loop_stmt\n" +
              "0#stmt:ret_stmt\n" +
              "1#__2:stmt\n" +
              "1#__2:stmt,__2",
          },
        "0#__2:stmt\n0#__2:stmt,__2\n0#assign_stmt:identifier,'=',exp,';'\n0#if_stmt:if,exp,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n0#if_stmt:if,exp,'{',__3,'}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n0#loop_stmt:do,'{','}',while,exp,';'\n0#loop_stmt:do,'{',__2,'}',while,exp,';'\n0#loop_stmt:while,exp,'{','}'\n0#loop_stmt:while,exp,'{',__2,'}'\n0#ret_stmt:return,exp,';'\n0#stmt:assign_stmt\n0#stmt:if_stmt\n0#stmt:loop_stmt\n0#stmt:ret_stmt\n7#fn_def:fn,identifier,'(',param,__1,')','{','}'\n7#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'":
          {
            candidates: [
              "7#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              "7#fn_def:fn,identifier,'(',param,__1,')','{','}'",
              "0#__2:stmt",
              "0#__2:stmt,__2",
              "0#stmt:assign_stmt",
              "0#stmt:ret_stmt",
              "0#stmt:if_stmt",
              "0#stmt:loop_stmt",
              "0#assign_stmt:identifier,'=',exp,';'",
              "0#ret_stmt:return,exp,';'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              "0#if_stmt:if,exp,'{',__3,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{','}'",
              "0#if_stmt:if,exp,'{','}'",
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'",
              "0#loop_stmt:do,'{','}',while,exp,';'",
              "0#loop_stmt:while,exp,'{',__2,'}'",
              "0#loop_stmt:while,exp,'{','}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#assign_stmt:identifier,'=',exp,';'",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: "8#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
              "'}'": "8#fn_def:fn,identifier,'(',param,__1,')','{','}'",
              if:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#if_stmt:if,exp,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do:
                "1#loop_stmt:do,'{','}',while,exp,';'\n" +
                "1#loop_stmt:do,'{',__2,'}',while,exp,';'",
              while:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#loop_stmt:while,exp,'{','}'\n" +
                "1#loop_stmt:while,exp,'{',__2,'}'",
              "';'": null,
              assign_stmt: "1#stmt:assign_stmt",
              ret_stmt: "1#stmt:ret_stmt",
              if_stmt: "1#stmt:if_stmt",
              loop_stmt: "1#stmt:loop_stmt",
              "'='": null,
              return:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#ret_stmt:return,exp,';'",
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt:
                "0#__2:stmt\n" +
                "0#__2:stmt,__2\n" +
                "0#assign_stmt:identifier,'=',exp,';'\n" +
                "0#if_stmt:if,exp,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
                "0#loop_stmt:do,'{','}',while,exp,';'\n" +
                "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
                "0#loop_stmt:while,exp,'{','}'\n" +
                "0#loop_stmt:while,exp,'{',__2,'}'\n" +
                "0#ret_stmt:return,exp,';'\n" +
                "0#stmt:assign_stmt\n" +
                "0#stmt:if_stmt\n" +
                "0#stmt:loop_stmt\n" +
                "0#stmt:ret_stmt\n" +
                "1#__2:stmt\n" +
                "1#__2:stmt,__2",
            },
            id:
              "0#__2:stmt\n" +
              "0#__2:stmt,__2\n" +
              "0#assign_stmt:identifier,'=',exp,';'\n" +
              "0#if_stmt:if,exp,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
              "0#loop_stmt:do,'{','}',while,exp,';'\n" +
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
              "0#loop_stmt:while,exp,'{','}'\n" +
              "0#loop_stmt:while,exp,'{',__2,'}'\n" +
              "0#ret_stmt:return,exp,';'\n" +
              "0#stmt:assign_stmt\n" +
              "0#stmt:if_stmt\n" +
              "0#stmt:loop_stmt\n" +
              "0#stmt:ret_stmt\n" +
              "7#fn_def:fn,identifier,'(',param,__1,')','{','}'\n" +
              "7#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          },
        "7#fn_def:fn,identifier,'(',param,')','{',__2,'}'": {
          candidates: ["7#fn_def:fn,identifier,'(',param,')','{',__2,'}'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": "8#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "7#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
        },
        "7#fn_def:fn,identifier,'(',param,')','{','}'": {
          candidates: ["7#fn_def:fn,identifier,'(',param,')','{','}'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "7#fn_def:fn,identifier,'(',param,')','{','}'",
        },
        "3#__1:',',param,__1": {
          candidates: ["3#__1:',',param,__1"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "3#__1:',',param,__1",
        },
        "0#exp:'!',exp\n0#exp:'-',exp\n0#exp:exp,'!=',exp\n0#exp:exp,'%',exp\n0#exp:exp,'&&',exp\n0#exp:exp,'*',exp\n0#exp:exp,'+',exp\n0#exp:exp,'-',exp\n0#exp:exp,'/',exp\n0#exp:exp,'<',exp\n0#exp:exp,'<=',exp\n0#exp:exp,'==',exp\n0#exp:exp,'>',exp\n0#exp:exp,'>=',exp\n0#exp:exp,'||',exp\n0#exp:identifier\n0#exp:integer\n2#assign_stmt:identifier,'=',exp,';'":
          {
            candidates: [
              "2#assign_stmt:identifier,'=',exp,';'",
              "0#exp:integer",
              "0#exp:identifier",
              "0#exp:exp,'+',exp",
              "0#exp:exp,'-',exp",
              "0#exp:exp,'*',exp",
              "0#exp:exp,'/',exp",
              "0#exp:exp,'%',exp",
              "0#exp:'-',exp",
              "0#exp:exp,'&&',exp",
              "0#exp:exp,'||',exp",
              "0#exp:'!',exp",
              "0#exp:exp,'==',exp",
              "0#exp:exp,'!=',exp",
              "0#exp:exp,'>',exp",
              "0#exp:exp,'<',exp",
              "0#exp:exp,'>=',exp",
              "0#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#exp:identifier",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp:
                "1#exp:exp,'!=',exp\n" +
                "1#exp:exp,'%',exp\n" +
                "1#exp:exp,'&&',exp\n" +
                "1#exp:exp,'*',exp\n" +
                "1#exp:exp,'+',exp\n" +
                "1#exp:exp,'-',exp\n" +
                "1#exp:exp,'/',exp\n" +
                "1#exp:exp,'<',exp\n" +
                "1#exp:exp,'<=',exp\n" +
                "1#exp:exp,'==',exp\n" +
                "1#exp:exp,'>',exp\n" +
                "1#exp:exp,'>=',exp\n" +
                "1#exp:exp,'||',exp\n" +
                "3#assign_stmt:identifier,'=',exp,';'",
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: "1#exp:integer",
              "'+'": null,
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'-',exp",
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'!',exp",
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "2#assign_stmt:identifier,'=',exp,';'",
          },
        "7#fn_def:fn,identifier,'(',')','{',__2,'}'": {
          candidates: ["7#fn_def:fn,identifier,'(',')','{',__2,'}'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "7#fn_def:fn,identifier,'(',')','{',__2,'}'",
        },
        "1#exp:identifier": {
          candidates: ["1#exp:identifier"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "1#exp:identifier",
        },
        "1#exp:exp,'!=',exp\n1#exp:exp,'%',exp\n1#exp:exp,'&&',exp\n1#exp:exp,'*',exp\n1#exp:exp,'+',exp\n1#exp:exp,'-',exp\n1#exp:exp,'/',exp\n1#exp:exp,'<',exp\n1#exp:exp,'<=',exp\n1#exp:exp,'==',exp\n1#exp:exp,'>',exp\n1#exp:exp,'>=',exp\n1#exp:exp,'||',exp\n2#if_stmt:if,exp,'{','}'\n2#if_stmt:if,exp,'{','}',else,'{','}'\n2#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n2#if_stmt:if,exp,'{',__3,'}'\n2#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n2#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'":
          {
            candidates: [
              "2#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              "2#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              "2#if_stmt:if,exp,'{',__3,'}'",
              "2#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              "2#if_stmt:if,exp,'{','}',else,'{','}'",
              "2#if_stmt:if,exp,'{','}'",
              "1#exp:exp,'+',exp",
              "1#exp:exp,'-',exp",
              "1#exp:exp,'*',exp",
              "1#exp:exp,'/',exp",
              "1#exp:exp,'%',exp",
              "1#exp:exp,'&&',exp",
              "1#exp:exp,'||',exp",
              "1#exp:exp,'==',exp",
              "1#exp:exp,'!=',exp",
              "1#exp:exp,'>',exp",
              "1#exp:exp,'<',exp",
              "1#exp:exp,'>=',exp",
              "1#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'":
                "0#__3:stmt@ifTrue\n" +
                "0#__3:stmt@ifTrue,__3\n" +
                "0#assign_stmt:identifier,'=',exp,';'\n" +
                "0#if_stmt:if,exp,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
                "0#loop_stmt:do,'{','}',while,exp,';'\n" +
                "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
                "0#loop_stmt:while,exp,'{','}'\n" +
                "0#loop_stmt:while,exp,'{',__2,'}'\n" +
                "0#ret_stmt:return,exp,';'\n" +
                "0#stmt:assign_stmt\n" +
                "0#stmt:if_stmt\n" +
                "0#stmt:loop_stmt\n" +
                "0#stmt:ret_stmt\n" +
                "3#if_stmt:if,exp,'{','}'\n" +
                "3#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "3#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "3#if_stmt:if,exp,'{',__3,'}'\n" +
                "3#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "3#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'+',exp",
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'-',exp",
              "'*'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'*',exp",
              "'/'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'/',exp",
              "'%'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'%',exp",
              "'&&'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'&&',exp",
              "'||'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'||',exp",
              "'!'": null,
              "'=='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'==',exp",
              "'!='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'!=',exp",
              "'>'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>',exp",
              "'<'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<',exp",
              "'>='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>=',exp",
              "'<='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<=',exp",
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#exp:exp,'!=',exp\n" +
              "1#exp:exp,'%',exp\n" +
              "1#exp:exp,'&&',exp\n" +
              "1#exp:exp,'*',exp\n" +
              "1#exp:exp,'+',exp\n" +
              "1#exp:exp,'-',exp\n" +
              "1#exp:exp,'/',exp\n" +
              "1#exp:exp,'<',exp\n" +
              "1#exp:exp,'<=',exp\n" +
              "1#exp:exp,'==',exp\n" +
              "1#exp:exp,'>',exp\n" +
              "1#exp:exp,'>=',exp\n" +
              "1#exp:exp,'||',exp\n" +
              "2#if_stmt:if,exp,'{','}'\n" +
              "2#if_stmt:if,exp,'{','}',else,'{','}'\n" +
              "2#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
              "2#if_stmt:if,exp,'{',__3,'}'\n" +
              "2#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
              "2#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          },
        "1#exp:integer": {
          candidates: ["1#exp:integer"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "1#exp:integer",
        },
        "0#exp:'!',exp\n0#exp:'-',exp\n0#exp:exp,'!=',exp\n0#exp:exp,'%',exp\n0#exp:exp,'&&',exp\n0#exp:exp,'*',exp\n0#exp:exp,'+',exp\n0#exp:exp,'-',exp\n0#exp:exp,'/',exp\n0#exp:exp,'<',exp\n0#exp:exp,'<=',exp\n0#exp:exp,'==',exp\n0#exp:exp,'>',exp\n0#exp:exp,'>=',exp\n0#exp:exp,'||',exp\n0#exp:identifier\n0#exp:integer\n1#exp:'-',exp":
          {
            candidates: [
              "1#exp:'-',exp",
              "0#exp:integer",
              "0#exp:identifier",
              "0#exp:exp,'+',exp",
              "0#exp:exp,'-',exp",
              "0#exp:exp,'*',exp",
              "0#exp:exp,'/',exp",
              "0#exp:exp,'%',exp",
              "0#exp:'-',exp",
              "0#exp:exp,'&&',exp",
              "0#exp:exp,'||',exp",
              "0#exp:'!',exp",
              "0#exp:exp,'==',exp",
              "0#exp:exp,'!=',exp",
              "0#exp:exp,'>',exp",
              "0#exp:exp,'<',exp",
              "0#exp:exp,'>=',exp",
              "0#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#exp:identifier",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp:
                "1#exp:exp,'!=',exp\n" +
                "1#exp:exp,'%',exp\n" +
                "1#exp:exp,'&&',exp\n" +
                "1#exp:exp,'*',exp\n" +
                "1#exp:exp,'+',exp\n" +
                "1#exp:exp,'-',exp\n" +
                "1#exp:exp,'/',exp\n" +
                "1#exp:exp,'<',exp\n" +
                "1#exp:exp,'<=',exp\n" +
                "1#exp:exp,'==',exp\n" +
                "1#exp:exp,'>',exp\n" +
                "1#exp:exp,'>=',exp\n" +
                "1#exp:exp,'||',exp\n" +
                "2#exp:'-',exp",
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: "1#exp:integer",
              "'+'": null,
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'-',exp",
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'!',exp",
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "1#exp:'-',exp",
          },
        "0#exp:'!',exp\n0#exp:'-',exp\n0#exp:exp,'!=',exp\n0#exp:exp,'%',exp\n0#exp:exp,'&&',exp\n0#exp:exp,'*',exp\n0#exp:exp,'+',exp\n0#exp:exp,'-',exp\n0#exp:exp,'/',exp\n0#exp:exp,'<',exp\n0#exp:exp,'<=',exp\n0#exp:exp,'==',exp\n0#exp:exp,'>',exp\n0#exp:exp,'>=',exp\n0#exp:exp,'||',exp\n0#exp:identifier\n0#exp:integer\n1#exp:'!',exp":
          {
            candidates: [
              "1#exp:'!',exp",
              "0#exp:integer",
              "0#exp:identifier",
              "0#exp:exp,'+',exp",
              "0#exp:exp,'-',exp",
              "0#exp:exp,'*',exp",
              "0#exp:exp,'/',exp",
              "0#exp:exp,'%',exp",
              "0#exp:'-',exp",
              "0#exp:exp,'&&',exp",
              "0#exp:exp,'||',exp",
              "0#exp:'!',exp",
              "0#exp:exp,'==',exp",
              "0#exp:exp,'!=',exp",
              "0#exp:exp,'>',exp",
              "0#exp:exp,'<',exp",
              "0#exp:exp,'>=',exp",
              "0#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#exp:identifier",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp:
                "1#exp:exp,'!=',exp\n" +
                "1#exp:exp,'%',exp\n" +
                "1#exp:exp,'&&',exp\n" +
                "1#exp:exp,'*',exp\n" +
                "1#exp:exp,'+',exp\n" +
                "1#exp:exp,'-',exp\n" +
                "1#exp:exp,'/',exp\n" +
                "1#exp:exp,'<',exp\n" +
                "1#exp:exp,'<=',exp\n" +
                "1#exp:exp,'==',exp\n" +
                "1#exp:exp,'>',exp\n" +
                "1#exp:exp,'>=',exp\n" +
                "1#exp:exp,'||',exp\n" +
                "2#exp:'!',exp",
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: "1#exp:integer",
              "'+'": null,
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'-',exp",
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'!',exp",
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "1#exp:'!',exp",
          },
        "0#__2:stmt\n0#__2:stmt,__2\n0#assign_stmt:identifier,'=',exp,';'\n0#if_stmt:if,exp,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n0#if_stmt:if,exp,'{',__3,'}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n0#loop_stmt:do,'{','}',while,exp,';'\n0#loop_stmt:do,'{',__2,'}',while,exp,';'\n0#loop_stmt:while,exp,'{','}'\n0#loop_stmt:while,exp,'{',__2,'}'\n0#ret_stmt:return,exp,';'\n0#stmt:assign_stmt\n0#stmt:if_stmt\n0#stmt:loop_stmt\n0#stmt:ret_stmt\n2#loop_stmt:do,'{','}',while,exp,';'\n2#loop_stmt:do,'{',__2,'}',while,exp,';'":
          {
            candidates: [
              "2#loop_stmt:do,'{',__2,'}',while,exp,';'",
              "2#loop_stmt:do,'{','}',while,exp,';'",
              "0#__2:stmt",
              "0#__2:stmt,__2",
              "0#stmt:assign_stmt",
              "0#stmt:ret_stmt",
              "0#stmt:if_stmt",
              "0#stmt:loop_stmt",
              "0#assign_stmt:identifier,'=',exp,';'",
              "0#ret_stmt:return,exp,';'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              "0#if_stmt:if,exp,'{',__3,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{','}'",
              "0#if_stmt:if,exp,'{','}'",
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'",
              "0#loop_stmt:do,'{','}',while,exp,';'",
              "0#loop_stmt:while,exp,'{',__2,'}'",
              "0#loop_stmt:while,exp,'{','}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#assign_stmt:identifier,'=',exp,';'",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: "3#loop_stmt:do,'{',__2,'}',while,exp,';'",
              "'}'": "3#loop_stmt:do,'{','}',while,exp,';'",
              if:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#if_stmt:if,exp,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do:
                "1#loop_stmt:do,'{','}',while,exp,';'\n" +
                "1#loop_stmt:do,'{',__2,'}',while,exp,';'",
              while:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#loop_stmt:while,exp,'{','}'\n" +
                "1#loop_stmt:while,exp,'{',__2,'}'",
              "';'": null,
              assign_stmt: "1#stmt:assign_stmt",
              ret_stmt: "1#stmt:ret_stmt",
              if_stmt: "1#stmt:if_stmt",
              loop_stmt: "1#stmt:loop_stmt",
              "'='": null,
              return:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#ret_stmt:return,exp,';'",
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt:
                "0#__2:stmt\n" +
                "0#__2:stmt,__2\n" +
                "0#assign_stmt:identifier,'=',exp,';'\n" +
                "0#if_stmt:if,exp,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
                "0#loop_stmt:do,'{','}',while,exp,';'\n" +
                "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
                "0#loop_stmt:while,exp,'{','}'\n" +
                "0#loop_stmt:while,exp,'{',__2,'}'\n" +
                "0#ret_stmt:return,exp,';'\n" +
                "0#stmt:assign_stmt\n" +
                "0#stmt:if_stmt\n" +
                "0#stmt:loop_stmt\n" +
                "0#stmt:ret_stmt\n" +
                "1#__2:stmt\n" +
                "1#__2:stmt,__2",
            },
            id:
              "0#__2:stmt\n" +
              "0#__2:stmt,__2\n" +
              "0#assign_stmt:identifier,'=',exp,';'\n" +
              "0#if_stmt:if,exp,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
              "0#loop_stmt:do,'{','}',while,exp,';'\n" +
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
              "0#loop_stmt:while,exp,'{','}'\n" +
              "0#loop_stmt:while,exp,'{',__2,'}'\n" +
              "0#ret_stmt:return,exp,';'\n" +
              "0#stmt:assign_stmt\n" +
              "0#stmt:if_stmt\n" +
              "0#stmt:loop_stmt\n" +
              "0#stmt:ret_stmt\n" +
              "2#loop_stmt:do,'{','}',while,exp,';'\n" +
              "2#loop_stmt:do,'{',__2,'}',while,exp,';'",
          },
        "1#exp:exp,'!=',exp\n1#exp:exp,'%',exp\n1#exp:exp,'&&',exp\n1#exp:exp,'*',exp\n1#exp:exp,'+',exp\n1#exp:exp,'-',exp\n1#exp:exp,'/',exp\n1#exp:exp,'<',exp\n1#exp:exp,'<=',exp\n1#exp:exp,'==',exp\n1#exp:exp,'>',exp\n1#exp:exp,'>=',exp\n1#exp:exp,'||',exp\n2#loop_stmt:while,exp,'{','}'\n2#loop_stmt:while,exp,'{',__2,'}'":
          {
            candidates: [
              "2#loop_stmt:while,exp,'{',__2,'}'",
              "2#loop_stmt:while,exp,'{','}'",
              "1#exp:exp,'+',exp",
              "1#exp:exp,'-',exp",
              "1#exp:exp,'*',exp",
              "1#exp:exp,'/',exp",
              "1#exp:exp,'%',exp",
              "1#exp:exp,'&&',exp",
              "1#exp:exp,'||',exp",
              "1#exp:exp,'==',exp",
              "1#exp:exp,'!=',exp",
              "1#exp:exp,'>',exp",
              "1#exp:exp,'<',exp",
              "1#exp:exp,'>=',exp",
              "1#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'":
                "0#__2:stmt\n" +
                "0#__2:stmt,__2\n" +
                "0#assign_stmt:identifier,'=',exp,';'\n" +
                "0#if_stmt:if,exp,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
                "0#loop_stmt:do,'{','}',while,exp,';'\n" +
                "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
                "0#loop_stmt:while,exp,'{','}'\n" +
                "0#loop_stmt:while,exp,'{',__2,'}'\n" +
                "0#ret_stmt:return,exp,';'\n" +
                "0#stmt:assign_stmt\n" +
                "0#stmt:if_stmt\n" +
                "0#stmt:loop_stmt\n" +
                "0#stmt:ret_stmt\n" +
                "3#loop_stmt:while,exp,'{','}'\n" +
                "3#loop_stmt:while,exp,'{',__2,'}'",
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'+',exp",
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'-',exp",
              "'*'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'*',exp",
              "'/'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'/',exp",
              "'%'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'%',exp",
              "'&&'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'&&',exp",
              "'||'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'||',exp",
              "'!'": null,
              "'=='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'==',exp",
              "'!='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'!=',exp",
              "'>'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>',exp",
              "'<'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<',exp",
              "'>='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>=',exp",
              "'<='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<=',exp",
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#exp:exp,'!=',exp\n" +
              "1#exp:exp,'%',exp\n" +
              "1#exp:exp,'&&',exp\n" +
              "1#exp:exp,'*',exp\n" +
              "1#exp:exp,'+',exp\n" +
              "1#exp:exp,'-',exp\n" +
              "1#exp:exp,'/',exp\n" +
              "1#exp:exp,'<',exp\n" +
              "1#exp:exp,'<=',exp\n" +
              "1#exp:exp,'==',exp\n" +
              "1#exp:exp,'>',exp\n" +
              "1#exp:exp,'>=',exp\n" +
              "1#exp:exp,'||',exp\n" +
              "2#loop_stmt:while,exp,'{','}'\n" +
              "2#loop_stmt:while,exp,'{',__2,'}'",
          },
        "1#exp:exp,'!=',exp\n1#exp:exp,'%',exp\n1#exp:exp,'&&',exp\n1#exp:exp,'*',exp\n1#exp:exp,'+',exp\n1#exp:exp,'-',exp\n1#exp:exp,'/',exp\n1#exp:exp,'<',exp\n1#exp:exp,'<=',exp\n1#exp:exp,'==',exp\n1#exp:exp,'>',exp\n1#exp:exp,'>=',exp\n1#exp:exp,'||',exp\n2#ret_stmt:return,exp,';'":
          {
            candidates: [
              "2#ret_stmt:return,exp,';'",
              "1#exp:exp,'+',exp",
              "1#exp:exp,'-',exp",
              "1#exp:exp,'*',exp",
              "1#exp:exp,'/',exp",
              "1#exp:exp,'%',exp",
              "1#exp:exp,'&&',exp",
              "1#exp:exp,'||',exp",
              "1#exp:exp,'==',exp",
              "1#exp:exp,'!=',exp",
              "1#exp:exp,'>',exp",
              "1#exp:exp,'<',exp",
              "1#exp:exp,'>=',exp",
              "1#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": "3#ret_stmt:return,exp,';'",
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'+',exp",
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'-',exp",
              "'*'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'*',exp",
              "'/'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'/',exp",
              "'%'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'%',exp",
              "'&&'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'&&',exp",
              "'||'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'||',exp",
              "'!'": null,
              "'=='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'==',exp",
              "'!='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'!=',exp",
              "'>'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>',exp",
              "'<'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<',exp",
              "'>='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>=',exp",
              "'<='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<=',exp",
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#exp:exp,'!=',exp\n" +
              "1#exp:exp,'%',exp\n" +
              "1#exp:exp,'&&',exp\n" +
              "1#exp:exp,'*',exp\n" +
              "1#exp:exp,'+',exp\n" +
              "1#exp:exp,'-',exp\n" +
              "1#exp:exp,'/',exp\n" +
              "1#exp:exp,'<',exp\n" +
              "1#exp:exp,'<=',exp\n" +
              "1#exp:exp,'==',exp\n" +
              "1#exp:exp,'>',exp\n" +
              "1#exp:exp,'>=',exp\n" +
              "1#exp:exp,'||',exp\n" +
              "2#ret_stmt:return,exp,';'",
          },
        "2#__2:stmt,__2": {
          candidates: ["2#__2:stmt,__2"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "2#__2:stmt,__2",
        },
        "8#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'": {
          candidates: ["8#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": "9#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "8#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
        },
        "8#fn_def:fn,identifier,'(',param,__1,')','{','}'": {
          candidates: ["8#fn_def:fn,identifier,'(',param,__1,')','{','}'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "8#fn_def:fn,identifier,'(',param,__1,')','{','}'",
        },
        "8#fn_def:fn,identifier,'(',param,')','{',__2,'}'": {
          candidates: ["8#fn_def:fn,identifier,'(',param,')','{',__2,'}'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "8#fn_def:fn,identifier,'(',param,')','{',__2,'}'",
        },
        "1#exp:exp,'!=',exp\n1#exp:exp,'%',exp\n1#exp:exp,'&&',exp\n1#exp:exp,'*',exp\n1#exp:exp,'+',exp\n1#exp:exp,'-',exp\n1#exp:exp,'/',exp\n1#exp:exp,'<',exp\n1#exp:exp,'<=',exp\n1#exp:exp,'==',exp\n1#exp:exp,'>',exp\n1#exp:exp,'>=',exp\n1#exp:exp,'||',exp\n3#assign_stmt:identifier,'=',exp,';'":
          {
            candidates: [
              "3#assign_stmt:identifier,'=',exp,';'",
              "1#exp:exp,'+',exp",
              "1#exp:exp,'-',exp",
              "1#exp:exp,'*',exp",
              "1#exp:exp,'/',exp",
              "1#exp:exp,'%',exp",
              "1#exp:exp,'&&',exp",
              "1#exp:exp,'||',exp",
              "1#exp:exp,'==',exp",
              "1#exp:exp,'!=',exp",
              "1#exp:exp,'>',exp",
              "1#exp:exp,'<',exp",
              "1#exp:exp,'>=',exp",
              "1#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": "4#assign_stmt:identifier,'=',exp,';'",
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'+',exp",
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'-',exp",
              "'*'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'*',exp",
              "'/'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'/',exp",
              "'%'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'%',exp",
              "'&&'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'&&',exp",
              "'||'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'||',exp",
              "'!'": null,
              "'=='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'==',exp",
              "'!='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'!=',exp",
              "'>'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>',exp",
              "'<'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<',exp",
              "'>='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>=',exp",
              "'<='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<=',exp",
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#exp:exp,'!=',exp\n" +
              "1#exp:exp,'%',exp\n" +
              "1#exp:exp,'&&',exp\n" +
              "1#exp:exp,'*',exp\n" +
              "1#exp:exp,'+',exp\n" +
              "1#exp:exp,'-',exp\n" +
              "1#exp:exp,'/',exp\n" +
              "1#exp:exp,'<',exp\n" +
              "1#exp:exp,'<=',exp\n" +
              "1#exp:exp,'==',exp\n" +
              "1#exp:exp,'>',exp\n" +
              "1#exp:exp,'>=',exp\n" +
              "1#exp:exp,'||',exp\n" +
              "3#assign_stmt:identifier,'=',exp,';'",
          },
        "0#__3:stmt@ifTrue\n0#__3:stmt@ifTrue,__3\n0#assign_stmt:identifier,'=',exp,';'\n0#if_stmt:if,exp,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n0#if_stmt:if,exp,'{',__3,'}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n0#loop_stmt:do,'{','}',while,exp,';'\n0#loop_stmt:do,'{',__2,'}',while,exp,';'\n0#loop_stmt:while,exp,'{','}'\n0#loop_stmt:while,exp,'{',__2,'}'\n0#ret_stmt:return,exp,';'\n0#stmt:assign_stmt\n0#stmt:if_stmt\n0#stmt:loop_stmt\n0#stmt:ret_stmt\n3#if_stmt:if,exp,'{','}'\n3#if_stmt:if,exp,'{','}',else,'{','}'\n3#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n3#if_stmt:if,exp,'{',__3,'}'\n3#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n3#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'":
          {
            candidates: [
              "3#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              "3#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              "3#if_stmt:if,exp,'{',__3,'}'",
              "3#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              "3#if_stmt:if,exp,'{','}',else,'{','}'",
              "3#if_stmt:if,exp,'{','}'",
              "0#__3:stmt@ifTrue",
              "0#__3:stmt@ifTrue,__3",
              "0#stmt:assign_stmt",
              "0#stmt:ret_stmt",
              "0#stmt:if_stmt",
              "0#stmt:loop_stmt",
              "0#assign_stmt:identifier,'=',exp,';'",
              "0#ret_stmt:return,exp,';'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              "0#if_stmt:if,exp,'{',__3,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{','}'",
              "0#if_stmt:if,exp,'{','}'",
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'",
              "0#loop_stmt:do,'{','}',while,exp,';'",
              "0#loop_stmt:while,exp,'{',__2,'}'",
              "0#loop_stmt:while,exp,'{','}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#assign_stmt:identifier,'=',exp,';'",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'":
                "4#if_stmt:if,exp,'{','}'\n" +
                "4#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "4#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              if:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#if_stmt:if,exp,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              exp: null,
              __3:
                "4#if_stmt:if,exp,'{',__3,'}'\n" +
                "4#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "4#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              else: null,
              __4: null,
              do:
                "1#loop_stmt:do,'{','}',while,exp,';'\n" +
                "1#loop_stmt:do,'{',__2,'}',while,exp,';'",
              while:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#loop_stmt:while,exp,'{','}'\n" +
                "1#loop_stmt:while,exp,'{',__2,'}'",
              "';'": null,
              assign_stmt: "1#stmt:assign_stmt",
              ret_stmt: "1#stmt:ret_stmt",
              if_stmt: "1#stmt:if_stmt",
              loop_stmt: "1#stmt:loop_stmt",
              "'='": null,
              return:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#ret_stmt:return,exp,';'",
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt:
                "0#__3:stmt@ifTrue\n" +
                "0#__3:stmt@ifTrue,__3\n" +
                "0#assign_stmt:identifier,'=',exp,';'\n" +
                "0#if_stmt:if,exp,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
                "0#loop_stmt:do,'{','}',while,exp,';'\n" +
                "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
                "0#loop_stmt:while,exp,'{','}'\n" +
                "0#loop_stmt:while,exp,'{',__2,'}'\n" +
                "0#ret_stmt:return,exp,';'\n" +
                "0#stmt:assign_stmt\n" +
                "0#stmt:if_stmt\n" +
                "0#stmt:loop_stmt\n" +
                "0#stmt:ret_stmt\n" +
                "1#__3:stmt@ifTrue\n" +
                "1#__3:stmt@ifTrue,__3",
            },
            id:
              "0#__3:stmt@ifTrue\n" +
              "0#__3:stmt@ifTrue,__3\n" +
              "0#assign_stmt:identifier,'=',exp,';'\n" +
              "0#if_stmt:if,exp,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
              "0#loop_stmt:do,'{','}',while,exp,';'\n" +
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
              "0#loop_stmt:while,exp,'{','}'\n" +
              "0#loop_stmt:while,exp,'{',__2,'}'\n" +
              "0#ret_stmt:return,exp,';'\n" +
              "0#stmt:assign_stmt\n" +
              "0#stmt:if_stmt\n" +
              "0#stmt:loop_stmt\n" +
              "0#stmt:ret_stmt\n" +
              "3#if_stmt:if,exp,'{','}'\n" +
              "3#if_stmt:if,exp,'{','}',else,'{','}'\n" +
              "3#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
              "3#if_stmt:if,exp,'{',__3,'}'\n" +
              "3#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
              "3#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          },
        "0#exp:'!',exp\n0#exp:'-',exp\n0#exp:exp,'!=',exp\n0#exp:exp,'%',exp\n0#exp:exp,'&&',exp\n0#exp:exp,'*',exp\n0#exp:exp,'+',exp\n0#exp:exp,'-',exp\n0#exp:exp,'/',exp\n0#exp:exp,'<',exp\n0#exp:exp,'<=',exp\n0#exp:exp,'==',exp\n0#exp:exp,'>',exp\n0#exp:exp,'>=',exp\n0#exp:exp,'||',exp\n0#exp:identifier\n0#exp:integer\n2#exp:exp,'+',exp":
          {
            candidates: [
              "2#exp:exp,'+',exp",
              "0#exp:integer",
              "0#exp:identifier",
              "0#exp:exp,'+',exp",
              "0#exp:exp,'-',exp",
              "0#exp:exp,'*',exp",
              "0#exp:exp,'/',exp",
              "0#exp:exp,'%',exp",
              "0#exp:'-',exp",
              "0#exp:exp,'&&',exp",
              "0#exp:exp,'||',exp",
              "0#exp:'!',exp",
              "0#exp:exp,'==',exp",
              "0#exp:exp,'!=',exp",
              "0#exp:exp,'>',exp",
              "0#exp:exp,'<',exp",
              "0#exp:exp,'>=',exp",
              "0#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#exp:identifier",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp:
                "1#exp:exp,'!=',exp\n" +
                "1#exp:exp,'%',exp\n" +
                "1#exp:exp,'&&',exp\n" +
                "1#exp:exp,'*',exp\n" +
                "1#exp:exp,'+',exp\n" +
                "1#exp:exp,'-',exp\n" +
                "1#exp:exp,'/',exp\n" +
                "1#exp:exp,'<',exp\n" +
                "1#exp:exp,'<=',exp\n" +
                "1#exp:exp,'==',exp\n" +
                "1#exp:exp,'>',exp\n" +
                "1#exp:exp,'>=',exp\n" +
                "1#exp:exp,'||',exp\n" +
                "3#exp:exp,'+',exp",
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: "1#exp:integer",
              "'+'": null,
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'-',exp",
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'!',exp",
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "2#exp:exp,'+',exp",
          },
        "0#exp:'!',exp\n0#exp:'-',exp\n0#exp:exp,'!=',exp\n0#exp:exp,'%',exp\n0#exp:exp,'&&',exp\n0#exp:exp,'*',exp\n0#exp:exp,'+',exp\n0#exp:exp,'-',exp\n0#exp:exp,'/',exp\n0#exp:exp,'<',exp\n0#exp:exp,'<=',exp\n0#exp:exp,'==',exp\n0#exp:exp,'>',exp\n0#exp:exp,'>=',exp\n0#exp:exp,'||',exp\n0#exp:identifier\n0#exp:integer\n2#exp:exp,'-',exp":
          {
            candidates: [
              "2#exp:exp,'-',exp",
              "0#exp:integer",
              "0#exp:identifier",
              "0#exp:exp,'+',exp",
              "0#exp:exp,'-',exp",
              "0#exp:exp,'*',exp",
              "0#exp:exp,'/',exp",
              "0#exp:exp,'%',exp",
              "0#exp:'-',exp",
              "0#exp:exp,'&&',exp",
              "0#exp:exp,'||',exp",
              "0#exp:'!',exp",
              "0#exp:exp,'==',exp",
              "0#exp:exp,'!=',exp",
              "0#exp:exp,'>',exp",
              "0#exp:exp,'<',exp",
              "0#exp:exp,'>=',exp",
              "0#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#exp:identifier",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp:
                "1#exp:exp,'!=',exp\n" +
                "1#exp:exp,'%',exp\n" +
                "1#exp:exp,'&&',exp\n" +
                "1#exp:exp,'*',exp\n" +
                "1#exp:exp,'+',exp\n" +
                "1#exp:exp,'-',exp\n" +
                "1#exp:exp,'/',exp\n" +
                "1#exp:exp,'<',exp\n" +
                "1#exp:exp,'<=',exp\n" +
                "1#exp:exp,'==',exp\n" +
                "1#exp:exp,'>',exp\n" +
                "1#exp:exp,'>=',exp\n" +
                "1#exp:exp,'||',exp\n" +
                "3#exp:exp,'-',exp",
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: "1#exp:integer",
              "'+'": null,
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'-',exp",
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'!',exp",
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "2#exp:exp,'-',exp",
          },
        "0#exp:'!',exp\n0#exp:'-',exp\n0#exp:exp,'!=',exp\n0#exp:exp,'%',exp\n0#exp:exp,'&&',exp\n0#exp:exp,'*',exp\n0#exp:exp,'+',exp\n0#exp:exp,'-',exp\n0#exp:exp,'/',exp\n0#exp:exp,'<',exp\n0#exp:exp,'<=',exp\n0#exp:exp,'==',exp\n0#exp:exp,'>',exp\n0#exp:exp,'>=',exp\n0#exp:exp,'||',exp\n0#exp:identifier\n0#exp:integer\n2#exp:exp,'*',exp":
          {
            candidates: [
              "2#exp:exp,'*',exp",
              "0#exp:integer",
              "0#exp:identifier",
              "0#exp:exp,'+',exp",
              "0#exp:exp,'-',exp",
              "0#exp:exp,'*',exp",
              "0#exp:exp,'/',exp",
              "0#exp:exp,'%',exp",
              "0#exp:'-',exp",
              "0#exp:exp,'&&',exp",
              "0#exp:exp,'||',exp",
              "0#exp:'!',exp",
              "0#exp:exp,'==',exp",
              "0#exp:exp,'!=',exp",
              "0#exp:exp,'>',exp",
              "0#exp:exp,'<',exp",
              "0#exp:exp,'>=',exp",
              "0#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#exp:identifier",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp:
                "1#exp:exp,'!=',exp\n" +
                "1#exp:exp,'%',exp\n" +
                "1#exp:exp,'&&',exp\n" +
                "1#exp:exp,'*',exp\n" +
                "1#exp:exp,'+',exp\n" +
                "1#exp:exp,'-',exp\n" +
                "1#exp:exp,'/',exp\n" +
                "1#exp:exp,'<',exp\n" +
                "1#exp:exp,'<=',exp\n" +
                "1#exp:exp,'==',exp\n" +
                "1#exp:exp,'>',exp\n" +
                "1#exp:exp,'>=',exp\n" +
                "1#exp:exp,'||',exp\n" +
                "3#exp:exp,'*',exp",
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: "1#exp:integer",
              "'+'": null,
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'-',exp",
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'!',exp",
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "2#exp:exp,'*',exp",
          },
        "0#exp:'!',exp\n0#exp:'-',exp\n0#exp:exp,'!=',exp\n0#exp:exp,'%',exp\n0#exp:exp,'&&',exp\n0#exp:exp,'*',exp\n0#exp:exp,'+',exp\n0#exp:exp,'-',exp\n0#exp:exp,'/',exp\n0#exp:exp,'<',exp\n0#exp:exp,'<=',exp\n0#exp:exp,'==',exp\n0#exp:exp,'>',exp\n0#exp:exp,'>=',exp\n0#exp:exp,'||',exp\n0#exp:identifier\n0#exp:integer\n2#exp:exp,'/',exp":
          {
            candidates: [
              "2#exp:exp,'/',exp",
              "0#exp:integer",
              "0#exp:identifier",
              "0#exp:exp,'+',exp",
              "0#exp:exp,'-',exp",
              "0#exp:exp,'*',exp",
              "0#exp:exp,'/',exp",
              "0#exp:exp,'%',exp",
              "0#exp:'-',exp",
              "0#exp:exp,'&&',exp",
              "0#exp:exp,'||',exp",
              "0#exp:'!',exp",
              "0#exp:exp,'==',exp",
              "0#exp:exp,'!=',exp",
              "0#exp:exp,'>',exp",
              "0#exp:exp,'<',exp",
              "0#exp:exp,'>=',exp",
              "0#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#exp:identifier",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp:
                "1#exp:exp,'!=',exp\n" +
                "1#exp:exp,'%',exp\n" +
                "1#exp:exp,'&&',exp\n" +
                "1#exp:exp,'*',exp\n" +
                "1#exp:exp,'+',exp\n" +
                "1#exp:exp,'-',exp\n" +
                "1#exp:exp,'/',exp\n" +
                "1#exp:exp,'<',exp\n" +
                "1#exp:exp,'<=',exp\n" +
                "1#exp:exp,'==',exp\n" +
                "1#exp:exp,'>',exp\n" +
                "1#exp:exp,'>=',exp\n" +
                "1#exp:exp,'||',exp\n" +
                "3#exp:exp,'/',exp",
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: "1#exp:integer",
              "'+'": null,
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'-',exp",
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'!',exp",
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "2#exp:exp,'/',exp",
          },
        "0#exp:'!',exp\n0#exp:'-',exp\n0#exp:exp,'!=',exp\n0#exp:exp,'%',exp\n0#exp:exp,'&&',exp\n0#exp:exp,'*',exp\n0#exp:exp,'+',exp\n0#exp:exp,'-',exp\n0#exp:exp,'/',exp\n0#exp:exp,'<',exp\n0#exp:exp,'<=',exp\n0#exp:exp,'==',exp\n0#exp:exp,'>',exp\n0#exp:exp,'>=',exp\n0#exp:exp,'||',exp\n0#exp:identifier\n0#exp:integer\n2#exp:exp,'%',exp":
          {
            candidates: [
              "2#exp:exp,'%',exp",
              "0#exp:integer",
              "0#exp:identifier",
              "0#exp:exp,'+',exp",
              "0#exp:exp,'-',exp",
              "0#exp:exp,'*',exp",
              "0#exp:exp,'/',exp",
              "0#exp:exp,'%',exp",
              "0#exp:'-',exp",
              "0#exp:exp,'&&',exp",
              "0#exp:exp,'||',exp",
              "0#exp:'!',exp",
              "0#exp:exp,'==',exp",
              "0#exp:exp,'!=',exp",
              "0#exp:exp,'>',exp",
              "0#exp:exp,'<',exp",
              "0#exp:exp,'>=',exp",
              "0#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#exp:identifier",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp:
                "1#exp:exp,'!=',exp\n" +
                "1#exp:exp,'%',exp\n" +
                "1#exp:exp,'&&',exp\n" +
                "1#exp:exp,'*',exp\n" +
                "1#exp:exp,'+',exp\n" +
                "1#exp:exp,'-',exp\n" +
                "1#exp:exp,'/',exp\n" +
                "1#exp:exp,'<',exp\n" +
                "1#exp:exp,'<=',exp\n" +
                "1#exp:exp,'==',exp\n" +
                "1#exp:exp,'>',exp\n" +
                "1#exp:exp,'>=',exp\n" +
                "1#exp:exp,'||',exp\n" +
                "3#exp:exp,'%',exp",
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: "1#exp:integer",
              "'+'": null,
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'-',exp",
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'!',exp",
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "2#exp:exp,'%',exp",
          },
        "0#exp:'!',exp\n0#exp:'-',exp\n0#exp:exp,'!=',exp\n0#exp:exp,'%',exp\n0#exp:exp,'&&',exp\n0#exp:exp,'*',exp\n0#exp:exp,'+',exp\n0#exp:exp,'-',exp\n0#exp:exp,'/',exp\n0#exp:exp,'<',exp\n0#exp:exp,'<=',exp\n0#exp:exp,'==',exp\n0#exp:exp,'>',exp\n0#exp:exp,'>=',exp\n0#exp:exp,'||',exp\n0#exp:identifier\n0#exp:integer\n2#exp:exp,'&&',exp":
          {
            candidates: [
              "2#exp:exp,'&&',exp",
              "0#exp:integer",
              "0#exp:identifier",
              "0#exp:exp,'+',exp",
              "0#exp:exp,'-',exp",
              "0#exp:exp,'*',exp",
              "0#exp:exp,'/',exp",
              "0#exp:exp,'%',exp",
              "0#exp:'-',exp",
              "0#exp:exp,'&&',exp",
              "0#exp:exp,'||',exp",
              "0#exp:'!',exp",
              "0#exp:exp,'==',exp",
              "0#exp:exp,'!=',exp",
              "0#exp:exp,'>',exp",
              "0#exp:exp,'<',exp",
              "0#exp:exp,'>=',exp",
              "0#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#exp:identifier",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp:
                "1#exp:exp,'!=',exp\n" +
                "1#exp:exp,'%',exp\n" +
                "1#exp:exp,'&&',exp\n" +
                "1#exp:exp,'*',exp\n" +
                "1#exp:exp,'+',exp\n" +
                "1#exp:exp,'-',exp\n" +
                "1#exp:exp,'/',exp\n" +
                "1#exp:exp,'<',exp\n" +
                "1#exp:exp,'<=',exp\n" +
                "1#exp:exp,'==',exp\n" +
                "1#exp:exp,'>',exp\n" +
                "1#exp:exp,'>=',exp\n" +
                "1#exp:exp,'||',exp\n" +
                "3#exp:exp,'&&',exp",
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: "1#exp:integer",
              "'+'": null,
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'-',exp",
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'!',exp",
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "2#exp:exp,'&&',exp",
          },
        "0#exp:'!',exp\n0#exp:'-',exp\n0#exp:exp,'!=',exp\n0#exp:exp,'%',exp\n0#exp:exp,'&&',exp\n0#exp:exp,'*',exp\n0#exp:exp,'+',exp\n0#exp:exp,'-',exp\n0#exp:exp,'/',exp\n0#exp:exp,'<',exp\n0#exp:exp,'<=',exp\n0#exp:exp,'==',exp\n0#exp:exp,'>',exp\n0#exp:exp,'>=',exp\n0#exp:exp,'||',exp\n0#exp:identifier\n0#exp:integer\n2#exp:exp,'||',exp":
          {
            candidates: [
              "2#exp:exp,'||',exp",
              "0#exp:integer",
              "0#exp:identifier",
              "0#exp:exp,'+',exp",
              "0#exp:exp,'-',exp",
              "0#exp:exp,'*',exp",
              "0#exp:exp,'/',exp",
              "0#exp:exp,'%',exp",
              "0#exp:'-',exp",
              "0#exp:exp,'&&',exp",
              "0#exp:exp,'||',exp",
              "0#exp:'!',exp",
              "0#exp:exp,'==',exp",
              "0#exp:exp,'!=',exp",
              "0#exp:exp,'>',exp",
              "0#exp:exp,'<',exp",
              "0#exp:exp,'>=',exp",
              "0#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#exp:identifier",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp:
                "1#exp:exp,'!=',exp\n" +
                "1#exp:exp,'%',exp\n" +
                "1#exp:exp,'&&',exp\n" +
                "1#exp:exp,'*',exp\n" +
                "1#exp:exp,'+',exp\n" +
                "1#exp:exp,'-',exp\n" +
                "1#exp:exp,'/',exp\n" +
                "1#exp:exp,'<',exp\n" +
                "1#exp:exp,'<=',exp\n" +
                "1#exp:exp,'==',exp\n" +
                "1#exp:exp,'>',exp\n" +
                "1#exp:exp,'>=',exp\n" +
                "1#exp:exp,'||',exp\n" +
                "3#exp:exp,'||',exp",
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: "1#exp:integer",
              "'+'": null,
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'-',exp",
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'!',exp",
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "2#exp:exp,'||',exp",
          },
        "0#exp:'!',exp\n0#exp:'-',exp\n0#exp:exp,'!=',exp\n0#exp:exp,'%',exp\n0#exp:exp,'&&',exp\n0#exp:exp,'*',exp\n0#exp:exp,'+',exp\n0#exp:exp,'-',exp\n0#exp:exp,'/',exp\n0#exp:exp,'<',exp\n0#exp:exp,'<=',exp\n0#exp:exp,'==',exp\n0#exp:exp,'>',exp\n0#exp:exp,'>=',exp\n0#exp:exp,'||',exp\n0#exp:identifier\n0#exp:integer\n2#exp:exp,'==',exp":
          {
            candidates: [
              "2#exp:exp,'==',exp",
              "0#exp:integer",
              "0#exp:identifier",
              "0#exp:exp,'+',exp",
              "0#exp:exp,'-',exp",
              "0#exp:exp,'*',exp",
              "0#exp:exp,'/',exp",
              "0#exp:exp,'%',exp",
              "0#exp:'-',exp",
              "0#exp:exp,'&&',exp",
              "0#exp:exp,'||',exp",
              "0#exp:'!',exp",
              "0#exp:exp,'==',exp",
              "0#exp:exp,'!=',exp",
              "0#exp:exp,'>',exp",
              "0#exp:exp,'<',exp",
              "0#exp:exp,'>=',exp",
              "0#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#exp:identifier",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp:
                "1#exp:exp,'!=',exp\n" +
                "1#exp:exp,'%',exp\n" +
                "1#exp:exp,'&&',exp\n" +
                "1#exp:exp,'*',exp\n" +
                "1#exp:exp,'+',exp\n" +
                "1#exp:exp,'-',exp\n" +
                "1#exp:exp,'/',exp\n" +
                "1#exp:exp,'<',exp\n" +
                "1#exp:exp,'<=',exp\n" +
                "1#exp:exp,'==',exp\n" +
                "1#exp:exp,'>',exp\n" +
                "1#exp:exp,'>=',exp\n" +
                "1#exp:exp,'||',exp\n" +
                "3#exp:exp,'==',exp",
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: "1#exp:integer",
              "'+'": null,
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'-',exp",
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'!',exp",
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "2#exp:exp,'==',exp",
          },
        "0#exp:'!',exp\n0#exp:'-',exp\n0#exp:exp,'!=',exp\n0#exp:exp,'%',exp\n0#exp:exp,'&&',exp\n0#exp:exp,'*',exp\n0#exp:exp,'+',exp\n0#exp:exp,'-',exp\n0#exp:exp,'/',exp\n0#exp:exp,'<',exp\n0#exp:exp,'<=',exp\n0#exp:exp,'==',exp\n0#exp:exp,'>',exp\n0#exp:exp,'>=',exp\n0#exp:exp,'||',exp\n0#exp:identifier\n0#exp:integer\n2#exp:exp,'!=',exp":
          {
            candidates: [
              "2#exp:exp,'!=',exp",
              "0#exp:integer",
              "0#exp:identifier",
              "0#exp:exp,'+',exp",
              "0#exp:exp,'-',exp",
              "0#exp:exp,'*',exp",
              "0#exp:exp,'/',exp",
              "0#exp:exp,'%',exp",
              "0#exp:'-',exp",
              "0#exp:exp,'&&',exp",
              "0#exp:exp,'||',exp",
              "0#exp:'!',exp",
              "0#exp:exp,'==',exp",
              "0#exp:exp,'!=',exp",
              "0#exp:exp,'>',exp",
              "0#exp:exp,'<',exp",
              "0#exp:exp,'>=',exp",
              "0#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#exp:identifier",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp:
                "1#exp:exp,'!=',exp\n" +
                "1#exp:exp,'%',exp\n" +
                "1#exp:exp,'&&',exp\n" +
                "1#exp:exp,'*',exp\n" +
                "1#exp:exp,'+',exp\n" +
                "1#exp:exp,'-',exp\n" +
                "1#exp:exp,'/',exp\n" +
                "1#exp:exp,'<',exp\n" +
                "1#exp:exp,'<=',exp\n" +
                "1#exp:exp,'==',exp\n" +
                "1#exp:exp,'>',exp\n" +
                "1#exp:exp,'>=',exp\n" +
                "1#exp:exp,'||',exp\n" +
                "3#exp:exp,'!=',exp",
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: "1#exp:integer",
              "'+'": null,
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'-',exp",
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'!',exp",
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "2#exp:exp,'!=',exp",
          },
        "0#exp:'!',exp\n0#exp:'-',exp\n0#exp:exp,'!=',exp\n0#exp:exp,'%',exp\n0#exp:exp,'&&',exp\n0#exp:exp,'*',exp\n0#exp:exp,'+',exp\n0#exp:exp,'-',exp\n0#exp:exp,'/',exp\n0#exp:exp,'<',exp\n0#exp:exp,'<=',exp\n0#exp:exp,'==',exp\n0#exp:exp,'>',exp\n0#exp:exp,'>=',exp\n0#exp:exp,'||',exp\n0#exp:identifier\n0#exp:integer\n2#exp:exp,'>',exp":
          {
            candidates: [
              "2#exp:exp,'>',exp",
              "0#exp:integer",
              "0#exp:identifier",
              "0#exp:exp,'+',exp",
              "0#exp:exp,'-',exp",
              "0#exp:exp,'*',exp",
              "0#exp:exp,'/',exp",
              "0#exp:exp,'%',exp",
              "0#exp:'-',exp",
              "0#exp:exp,'&&',exp",
              "0#exp:exp,'||',exp",
              "0#exp:'!',exp",
              "0#exp:exp,'==',exp",
              "0#exp:exp,'!=',exp",
              "0#exp:exp,'>',exp",
              "0#exp:exp,'<',exp",
              "0#exp:exp,'>=',exp",
              "0#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#exp:identifier",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp:
                "1#exp:exp,'!=',exp\n" +
                "1#exp:exp,'%',exp\n" +
                "1#exp:exp,'&&',exp\n" +
                "1#exp:exp,'*',exp\n" +
                "1#exp:exp,'+',exp\n" +
                "1#exp:exp,'-',exp\n" +
                "1#exp:exp,'/',exp\n" +
                "1#exp:exp,'<',exp\n" +
                "1#exp:exp,'<=',exp\n" +
                "1#exp:exp,'==',exp\n" +
                "1#exp:exp,'>',exp\n" +
                "1#exp:exp,'>=',exp\n" +
                "1#exp:exp,'||',exp\n" +
                "3#exp:exp,'>',exp",
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: "1#exp:integer",
              "'+'": null,
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'-',exp",
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'!',exp",
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "2#exp:exp,'>',exp",
          },
        "0#exp:'!',exp\n0#exp:'-',exp\n0#exp:exp,'!=',exp\n0#exp:exp,'%',exp\n0#exp:exp,'&&',exp\n0#exp:exp,'*',exp\n0#exp:exp,'+',exp\n0#exp:exp,'-',exp\n0#exp:exp,'/',exp\n0#exp:exp,'<',exp\n0#exp:exp,'<=',exp\n0#exp:exp,'==',exp\n0#exp:exp,'>',exp\n0#exp:exp,'>=',exp\n0#exp:exp,'||',exp\n0#exp:identifier\n0#exp:integer\n2#exp:exp,'<',exp":
          {
            candidates: [
              "2#exp:exp,'<',exp",
              "0#exp:integer",
              "0#exp:identifier",
              "0#exp:exp,'+',exp",
              "0#exp:exp,'-',exp",
              "0#exp:exp,'*',exp",
              "0#exp:exp,'/',exp",
              "0#exp:exp,'%',exp",
              "0#exp:'-',exp",
              "0#exp:exp,'&&',exp",
              "0#exp:exp,'||',exp",
              "0#exp:'!',exp",
              "0#exp:exp,'==',exp",
              "0#exp:exp,'!=',exp",
              "0#exp:exp,'>',exp",
              "0#exp:exp,'<',exp",
              "0#exp:exp,'>=',exp",
              "0#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#exp:identifier",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp:
                "1#exp:exp,'!=',exp\n" +
                "1#exp:exp,'%',exp\n" +
                "1#exp:exp,'&&',exp\n" +
                "1#exp:exp,'*',exp\n" +
                "1#exp:exp,'+',exp\n" +
                "1#exp:exp,'-',exp\n" +
                "1#exp:exp,'/',exp\n" +
                "1#exp:exp,'<',exp\n" +
                "1#exp:exp,'<=',exp\n" +
                "1#exp:exp,'==',exp\n" +
                "1#exp:exp,'>',exp\n" +
                "1#exp:exp,'>=',exp\n" +
                "1#exp:exp,'||',exp\n" +
                "3#exp:exp,'<',exp",
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: "1#exp:integer",
              "'+'": null,
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'-',exp",
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'!',exp",
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "2#exp:exp,'<',exp",
          },
        "0#exp:'!',exp\n0#exp:'-',exp\n0#exp:exp,'!=',exp\n0#exp:exp,'%',exp\n0#exp:exp,'&&',exp\n0#exp:exp,'*',exp\n0#exp:exp,'+',exp\n0#exp:exp,'-',exp\n0#exp:exp,'/',exp\n0#exp:exp,'<',exp\n0#exp:exp,'<=',exp\n0#exp:exp,'==',exp\n0#exp:exp,'>',exp\n0#exp:exp,'>=',exp\n0#exp:exp,'||',exp\n0#exp:identifier\n0#exp:integer\n2#exp:exp,'>=',exp":
          {
            candidates: [
              "2#exp:exp,'>=',exp",
              "0#exp:integer",
              "0#exp:identifier",
              "0#exp:exp,'+',exp",
              "0#exp:exp,'-',exp",
              "0#exp:exp,'*',exp",
              "0#exp:exp,'/',exp",
              "0#exp:exp,'%',exp",
              "0#exp:'-',exp",
              "0#exp:exp,'&&',exp",
              "0#exp:exp,'||',exp",
              "0#exp:'!',exp",
              "0#exp:exp,'==',exp",
              "0#exp:exp,'!=',exp",
              "0#exp:exp,'>',exp",
              "0#exp:exp,'<',exp",
              "0#exp:exp,'>=',exp",
              "0#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#exp:identifier",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp:
                "1#exp:exp,'!=',exp\n" +
                "1#exp:exp,'%',exp\n" +
                "1#exp:exp,'&&',exp\n" +
                "1#exp:exp,'*',exp\n" +
                "1#exp:exp,'+',exp\n" +
                "1#exp:exp,'-',exp\n" +
                "1#exp:exp,'/',exp\n" +
                "1#exp:exp,'<',exp\n" +
                "1#exp:exp,'<=',exp\n" +
                "1#exp:exp,'==',exp\n" +
                "1#exp:exp,'>',exp\n" +
                "1#exp:exp,'>=',exp\n" +
                "1#exp:exp,'||',exp\n" +
                "3#exp:exp,'>=',exp",
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: "1#exp:integer",
              "'+'": null,
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'-',exp",
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'!',exp",
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "2#exp:exp,'>=',exp",
          },
        "0#exp:'!',exp\n0#exp:'-',exp\n0#exp:exp,'!=',exp\n0#exp:exp,'%',exp\n0#exp:exp,'&&',exp\n0#exp:exp,'*',exp\n0#exp:exp,'+',exp\n0#exp:exp,'-',exp\n0#exp:exp,'/',exp\n0#exp:exp,'<',exp\n0#exp:exp,'<=',exp\n0#exp:exp,'==',exp\n0#exp:exp,'>',exp\n0#exp:exp,'>=',exp\n0#exp:exp,'||',exp\n0#exp:identifier\n0#exp:integer\n2#exp:exp,'<=',exp":
          {
            candidates: [
              "2#exp:exp,'<=',exp",
              "0#exp:integer",
              "0#exp:identifier",
              "0#exp:exp,'+',exp",
              "0#exp:exp,'-',exp",
              "0#exp:exp,'*',exp",
              "0#exp:exp,'/',exp",
              "0#exp:exp,'%',exp",
              "0#exp:'-',exp",
              "0#exp:exp,'&&',exp",
              "0#exp:exp,'||',exp",
              "0#exp:'!',exp",
              "0#exp:exp,'==',exp",
              "0#exp:exp,'!=',exp",
              "0#exp:exp,'>',exp",
              "0#exp:exp,'<',exp",
              "0#exp:exp,'>=',exp",
              "0#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#exp:identifier",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp:
                "1#exp:exp,'!=',exp\n" +
                "1#exp:exp,'%',exp\n" +
                "1#exp:exp,'&&',exp\n" +
                "1#exp:exp,'*',exp\n" +
                "1#exp:exp,'+',exp\n" +
                "1#exp:exp,'-',exp\n" +
                "1#exp:exp,'/',exp\n" +
                "1#exp:exp,'<',exp\n" +
                "1#exp:exp,'<=',exp\n" +
                "1#exp:exp,'==',exp\n" +
                "1#exp:exp,'>',exp\n" +
                "1#exp:exp,'>=',exp\n" +
                "1#exp:exp,'||',exp\n" +
                "3#exp:exp,'<=',exp",
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: "1#exp:integer",
              "'+'": null,
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'-',exp",
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'!',exp",
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "2#exp:exp,'<=',exp",
          },
        "1#exp:exp,'!=',exp\n1#exp:exp,'%',exp\n1#exp:exp,'&&',exp\n1#exp:exp,'*',exp\n1#exp:exp,'+',exp\n1#exp:exp,'-',exp\n1#exp:exp,'/',exp\n1#exp:exp,'<',exp\n1#exp:exp,'<=',exp\n1#exp:exp,'==',exp\n1#exp:exp,'>',exp\n1#exp:exp,'>=',exp\n1#exp:exp,'||',exp\n2#exp:'-',exp":
          {
            candidates: [
              "2#exp:'-',exp",
              "1#exp:exp,'+',exp",
              "1#exp:exp,'-',exp",
              "1#exp:exp,'*',exp",
              "1#exp:exp,'/',exp",
              "1#exp:exp,'%',exp",
              "1#exp:exp,'&&',exp",
              "1#exp:exp,'||',exp",
              "1#exp:exp,'==',exp",
              "1#exp:exp,'!=',exp",
              "1#exp:exp,'>',exp",
              "1#exp:exp,'<',exp",
              "1#exp:exp,'>=',exp",
              "1#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'+',exp",
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'-',exp",
              "'*'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'*',exp",
              "'/'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'/',exp",
              "'%'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'%',exp",
              "'&&'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'&&',exp",
              "'||'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'||',exp",
              "'!'": null,
              "'=='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'==',exp",
              "'!='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'!=',exp",
              "'>'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>',exp",
              "'<'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<',exp",
              "'>='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>=',exp",
              "'<='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<=',exp",
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#exp:exp,'!=',exp\n" +
              "1#exp:exp,'%',exp\n" +
              "1#exp:exp,'&&',exp\n" +
              "1#exp:exp,'*',exp\n" +
              "1#exp:exp,'+',exp\n" +
              "1#exp:exp,'-',exp\n" +
              "1#exp:exp,'/',exp\n" +
              "1#exp:exp,'<',exp\n" +
              "1#exp:exp,'<=',exp\n" +
              "1#exp:exp,'==',exp\n" +
              "1#exp:exp,'>',exp\n" +
              "1#exp:exp,'>=',exp\n" +
              "1#exp:exp,'||',exp\n" +
              "2#exp:'-',exp",
          },
        "1#exp:exp,'!=',exp\n1#exp:exp,'%',exp\n1#exp:exp,'&&',exp\n1#exp:exp,'*',exp\n1#exp:exp,'+',exp\n1#exp:exp,'-',exp\n1#exp:exp,'/',exp\n1#exp:exp,'<',exp\n1#exp:exp,'<=',exp\n1#exp:exp,'==',exp\n1#exp:exp,'>',exp\n1#exp:exp,'>=',exp\n1#exp:exp,'||',exp\n2#exp:'!',exp":
          {
            candidates: [
              "2#exp:'!',exp",
              "1#exp:exp,'+',exp",
              "1#exp:exp,'-',exp",
              "1#exp:exp,'*',exp",
              "1#exp:exp,'/',exp",
              "1#exp:exp,'%',exp",
              "1#exp:exp,'&&',exp",
              "1#exp:exp,'||',exp",
              "1#exp:exp,'==',exp",
              "1#exp:exp,'!=',exp",
              "1#exp:exp,'>',exp",
              "1#exp:exp,'<',exp",
              "1#exp:exp,'>=',exp",
              "1#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'+',exp",
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'-',exp",
              "'*'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'*',exp",
              "'/'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'/',exp",
              "'%'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'%',exp",
              "'&&'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'&&',exp",
              "'||'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'||',exp",
              "'!'": null,
              "'=='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'==',exp",
              "'!='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'!=',exp",
              "'>'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>',exp",
              "'<'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<',exp",
              "'>='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>=',exp",
              "'<='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<=',exp",
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#exp:exp,'!=',exp\n" +
              "1#exp:exp,'%',exp\n" +
              "1#exp:exp,'&&',exp\n" +
              "1#exp:exp,'*',exp\n" +
              "1#exp:exp,'+',exp\n" +
              "1#exp:exp,'-',exp\n" +
              "1#exp:exp,'/',exp\n" +
              "1#exp:exp,'<',exp\n" +
              "1#exp:exp,'<=',exp\n" +
              "1#exp:exp,'==',exp\n" +
              "1#exp:exp,'>',exp\n" +
              "1#exp:exp,'>=',exp\n" +
              "1#exp:exp,'||',exp\n" +
              "2#exp:'!',exp",
          },
        "3#loop_stmt:do,'{',__2,'}',while,exp,';'": {
          candidates: ["3#loop_stmt:do,'{',__2,'}',while,exp,';'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": "4#loop_stmt:do,'{',__2,'}',while,exp,';'",
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "3#loop_stmt:do,'{',__2,'}',while,exp,';'",
        },
        "3#loop_stmt:do,'{','}',while,exp,';'": {
          candidates: ["3#loop_stmt:do,'{','}',while,exp,';'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "4#loop_stmt:do,'{','}',while,exp,';'",
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "3#loop_stmt:do,'{','}',while,exp,';'",
        },
        "0#__2:stmt\n0#__2:stmt,__2\n0#assign_stmt:identifier,'=',exp,';'\n0#if_stmt:if,exp,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n0#if_stmt:if,exp,'{',__3,'}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n0#loop_stmt:do,'{','}',while,exp,';'\n0#loop_stmt:do,'{',__2,'}',while,exp,';'\n0#loop_stmt:while,exp,'{','}'\n0#loop_stmt:while,exp,'{',__2,'}'\n0#ret_stmt:return,exp,';'\n0#stmt:assign_stmt\n0#stmt:if_stmt\n0#stmt:loop_stmt\n0#stmt:ret_stmt\n3#loop_stmt:while,exp,'{','}'\n3#loop_stmt:while,exp,'{',__2,'}'":
          {
            candidates: [
              "3#loop_stmt:while,exp,'{',__2,'}'",
              "3#loop_stmt:while,exp,'{','}'",
              "0#__2:stmt",
              "0#__2:stmt,__2",
              "0#stmt:assign_stmt",
              "0#stmt:ret_stmt",
              "0#stmt:if_stmt",
              "0#stmt:loop_stmt",
              "0#assign_stmt:identifier,'=',exp,';'",
              "0#ret_stmt:return,exp,';'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              "0#if_stmt:if,exp,'{',__3,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{','}'",
              "0#if_stmt:if,exp,'{','}'",
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'",
              "0#loop_stmt:do,'{','}',while,exp,';'",
              "0#loop_stmt:while,exp,'{',__2,'}'",
              "0#loop_stmt:while,exp,'{','}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#assign_stmt:identifier,'=',exp,';'",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: "4#loop_stmt:while,exp,'{',__2,'}'",
              "'}'": "4#loop_stmt:while,exp,'{','}'",
              if:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#if_stmt:if,exp,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do:
                "1#loop_stmt:do,'{','}',while,exp,';'\n" +
                "1#loop_stmt:do,'{',__2,'}',while,exp,';'",
              while:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#loop_stmt:while,exp,'{','}'\n" +
                "1#loop_stmt:while,exp,'{',__2,'}'",
              "';'": null,
              assign_stmt: "1#stmt:assign_stmt",
              ret_stmt: "1#stmt:ret_stmt",
              if_stmt: "1#stmt:if_stmt",
              loop_stmt: "1#stmt:loop_stmt",
              "'='": null,
              return:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#ret_stmt:return,exp,';'",
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt:
                "0#__2:stmt\n" +
                "0#__2:stmt,__2\n" +
                "0#assign_stmt:identifier,'=',exp,';'\n" +
                "0#if_stmt:if,exp,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
                "0#loop_stmt:do,'{','}',while,exp,';'\n" +
                "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
                "0#loop_stmt:while,exp,'{','}'\n" +
                "0#loop_stmt:while,exp,'{',__2,'}'\n" +
                "0#ret_stmt:return,exp,';'\n" +
                "0#stmt:assign_stmt\n" +
                "0#stmt:if_stmt\n" +
                "0#stmt:loop_stmt\n" +
                "0#stmt:ret_stmt\n" +
                "1#__2:stmt\n" +
                "1#__2:stmt,__2",
            },
            id:
              "0#__2:stmt\n" +
              "0#__2:stmt,__2\n" +
              "0#assign_stmt:identifier,'=',exp,';'\n" +
              "0#if_stmt:if,exp,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
              "0#loop_stmt:do,'{','}',while,exp,';'\n" +
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
              "0#loop_stmt:while,exp,'{','}'\n" +
              "0#loop_stmt:while,exp,'{',__2,'}'\n" +
              "0#ret_stmt:return,exp,';'\n" +
              "0#stmt:assign_stmt\n" +
              "0#stmt:if_stmt\n" +
              "0#stmt:loop_stmt\n" +
              "0#stmt:ret_stmt\n" +
              "3#loop_stmt:while,exp,'{','}'\n" +
              "3#loop_stmt:while,exp,'{',__2,'}'",
          },
        "3#ret_stmt:return,exp,';'": {
          candidates: ["3#ret_stmt:return,exp,';'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "3#ret_stmt:return,exp,';'",
        },
        "9#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'": {
          candidates: ["9#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "9#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
        },
        "4#assign_stmt:identifier,'=',exp,';'": {
          candidates: ["4#assign_stmt:identifier,'=',exp,';'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "4#assign_stmt:identifier,'=',exp,';'",
        },
        "4#if_stmt:if,exp,'{','}'\n4#if_stmt:if,exp,'{','}',else,'{','}'\n4#if_stmt:if,exp,'{','}',else,'{',__4,'}'":
          {
            candidates: [
              "4#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              "4#if_stmt:if,exp,'{','}',else,'{','}'",
              "4#if_stmt:if,exp,'{','}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else:
                "5#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "5#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "4#if_stmt:if,exp,'{','}'\n" +
              "4#if_stmt:if,exp,'{','}',else,'{','}'\n" +
              "4#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
          },
        "4#if_stmt:if,exp,'{',__3,'}'\n4#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n4#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'":
          {
            candidates: [
              "4#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              "4#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              "4#if_stmt:if,exp,'{',__3,'}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'":
                "5#if_stmt:if,exp,'{',__3,'}'\n" +
                "5#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "5#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "4#if_stmt:if,exp,'{',__3,'}'\n" +
              "4#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
              "4#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          },
        "0#__3:stmt@ifTrue\n0#__3:stmt@ifTrue,__3\n0#assign_stmt:identifier,'=',exp,';'\n0#if_stmt:if,exp,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n0#if_stmt:if,exp,'{',__3,'}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n0#loop_stmt:do,'{','}',while,exp,';'\n0#loop_stmt:do,'{',__2,'}',while,exp,';'\n0#loop_stmt:while,exp,'{','}'\n0#loop_stmt:while,exp,'{',__2,'}'\n0#ret_stmt:return,exp,';'\n0#stmt:assign_stmt\n0#stmt:if_stmt\n0#stmt:loop_stmt\n0#stmt:ret_stmt\n1#__3:stmt@ifTrue\n1#__3:stmt@ifTrue,__3":
          {
            candidates: [
              "1#__3:stmt@ifTrue",
              "1#__3:stmt@ifTrue,__3",
              "0#__3:stmt@ifTrue",
              "0#__3:stmt@ifTrue,__3",
              "0#stmt:assign_stmt",
              "0#stmt:ret_stmt",
              "0#stmt:if_stmt",
              "0#stmt:loop_stmt",
              "0#assign_stmt:identifier,'=',exp,';'",
              "0#ret_stmt:return,exp,';'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              "0#if_stmt:if,exp,'{',__3,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{','}'",
              "0#if_stmt:if,exp,'{','}'",
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'",
              "0#loop_stmt:do,'{','}',while,exp,';'",
              "0#loop_stmt:while,exp,'{',__2,'}'",
              "0#loop_stmt:while,exp,'{','}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#assign_stmt:identifier,'=',exp,';'",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#if_stmt:if,exp,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              exp: null,
              __3: "2#__3:stmt@ifTrue,__3",
              else: null,
              __4: null,
              do:
                "1#loop_stmt:do,'{','}',while,exp,';'\n" +
                "1#loop_stmt:do,'{',__2,'}',while,exp,';'",
              while:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#loop_stmt:while,exp,'{','}'\n" +
                "1#loop_stmt:while,exp,'{',__2,'}'",
              "';'": null,
              assign_stmt: "1#stmt:assign_stmt",
              ret_stmt: "1#stmt:ret_stmt",
              if_stmt: "1#stmt:if_stmt",
              loop_stmt: "1#stmt:loop_stmt",
              "'='": null,
              return:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#ret_stmt:return,exp,';'",
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt:
                "0#__3:stmt@ifTrue\n" +
                "0#__3:stmt@ifTrue,__3\n" +
                "0#assign_stmt:identifier,'=',exp,';'\n" +
                "0#if_stmt:if,exp,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
                "0#loop_stmt:do,'{','}',while,exp,';'\n" +
                "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
                "0#loop_stmt:while,exp,'{','}'\n" +
                "0#loop_stmt:while,exp,'{',__2,'}'\n" +
                "0#ret_stmt:return,exp,';'\n" +
                "0#stmt:assign_stmt\n" +
                "0#stmt:if_stmt\n" +
                "0#stmt:loop_stmt\n" +
                "0#stmt:ret_stmt\n" +
                "1#__3:stmt@ifTrue\n" +
                "1#__3:stmt@ifTrue,__3",
            },
            id:
              "0#__3:stmt@ifTrue\n" +
              "0#__3:stmt@ifTrue,__3\n" +
              "0#assign_stmt:identifier,'=',exp,';'\n" +
              "0#if_stmt:if,exp,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
              "0#loop_stmt:do,'{','}',while,exp,';'\n" +
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
              "0#loop_stmt:while,exp,'{','}'\n" +
              "0#loop_stmt:while,exp,'{',__2,'}'\n" +
              "0#ret_stmt:return,exp,';'\n" +
              "0#stmt:assign_stmt\n" +
              "0#stmt:if_stmt\n" +
              "0#stmt:loop_stmt\n" +
              "0#stmt:ret_stmt\n" +
              "1#__3:stmt@ifTrue\n" +
              "1#__3:stmt@ifTrue,__3",
          },
        "1#exp:exp,'!=',exp\n1#exp:exp,'%',exp\n1#exp:exp,'&&',exp\n1#exp:exp,'*',exp\n1#exp:exp,'+',exp\n1#exp:exp,'-',exp\n1#exp:exp,'/',exp\n1#exp:exp,'<',exp\n1#exp:exp,'<=',exp\n1#exp:exp,'==',exp\n1#exp:exp,'>',exp\n1#exp:exp,'>=',exp\n1#exp:exp,'||',exp\n3#exp:exp,'+',exp":
          {
            candidates: [
              "3#exp:exp,'+',exp",
              "1#exp:exp,'+',exp",
              "1#exp:exp,'-',exp",
              "1#exp:exp,'*',exp",
              "1#exp:exp,'/',exp",
              "1#exp:exp,'%',exp",
              "1#exp:exp,'&&',exp",
              "1#exp:exp,'||',exp",
              "1#exp:exp,'==',exp",
              "1#exp:exp,'!=',exp",
              "1#exp:exp,'>',exp",
              "1#exp:exp,'<',exp",
              "1#exp:exp,'>=',exp",
              "1#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'+',exp",
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'-',exp",
              "'*'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'*',exp",
              "'/'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'/',exp",
              "'%'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'%',exp",
              "'&&'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'&&',exp",
              "'||'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'||',exp",
              "'!'": null,
              "'=='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'==',exp",
              "'!='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'!=',exp",
              "'>'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>',exp",
              "'<'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<',exp",
              "'>='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>=',exp",
              "'<='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<=',exp",
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#exp:exp,'!=',exp\n" +
              "1#exp:exp,'%',exp\n" +
              "1#exp:exp,'&&',exp\n" +
              "1#exp:exp,'*',exp\n" +
              "1#exp:exp,'+',exp\n" +
              "1#exp:exp,'-',exp\n" +
              "1#exp:exp,'/',exp\n" +
              "1#exp:exp,'<',exp\n" +
              "1#exp:exp,'<=',exp\n" +
              "1#exp:exp,'==',exp\n" +
              "1#exp:exp,'>',exp\n" +
              "1#exp:exp,'>=',exp\n" +
              "1#exp:exp,'||',exp\n" +
              "3#exp:exp,'+',exp",
          },
        "1#exp:exp,'!=',exp\n1#exp:exp,'%',exp\n1#exp:exp,'&&',exp\n1#exp:exp,'*',exp\n1#exp:exp,'+',exp\n1#exp:exp,'-',exp\n1#exp:exp,'/',exp\n1#exp:exp,'<',exp\n1#exp:exp,'<=',exp\n1#exp:exp,'==',exp\n1#exp:exp,'>',exp\n1#exp:exp,'>=',exp\n1#exp:exp,'||',exp\n3#exp:exp,'-',exp":
          {
            candidates: [
              "3#exp:exp,'-',exp",
              "1#exp:exp,'+',exp",
              "1#exp:exp,'-',exp",
              "1#exp:exp,'*',exp",
              "1#exp:exp,'/',exp",
              "1#exp:exp,'%',exp",
              "1#exp:exp,'&&',exp",
              "1#exp:exp,'||',exp",
              "1#exp:exp,'==',exp",
              "1#exp:exp,'!=',exp",
              "1#exp:exp,'>',exp",
              "1#exp:exp,'<',exp",
              "1#exp:exp,'>=',exp",
              "1#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'+',exp",
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'-',exp",
              "'*'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'*',exp",
              "'/'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'/',exp",
              "'%'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'%',exp",
              "'&&'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'&&',exp",
              "'||'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'||',exp",
              "'!'": null,
              "'=='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'==',exp",
              "'!='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'!=',exp",
              "'>'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>',exp",
              "'<'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<',exp",
              "'>='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>=',exp",
              "'<='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<=',exp",
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#exp:exp,'!=',exp\n" +
              "1#exp:exp,'%',exp\n" +
              "1#exp:exp,'&&',exp\n" +
              "1#exp:exp,'*',exp\n" +
              "1#exp:exp,'+',exp\n" +
              "1#exp:exp,'-',exp\n" +
              "1#exp:exp,'/',exp\n" +
              "1#exp:exp,'<',exp\n" +
              "1#exp:exp,'<=',exp\n" +
              "1#exp:exp,'==',exp\n" +
              "1#exp:exp,'>',exp\n" +
              "1#exp:exp,'>=',exp\n" +
              "1#exp:exp,'||',exp\n" +
              "3#exp:exp,'-',exp",
          },
        "1#exp:exp,'!=',exp\n1#exp:exp,'%',exp\n1#exp:exp,'&&',exp\n1#exp:exp,'*',exp\n1#exp:exp,'+',exp\n1#exp:exp,'-',exp\n1#exp:exp,'/',exp\n1#exp:exp,'<',exp\n1#exp:exp,'<=',exp\n1#exp:exp,'==',exp\n1#exp:exp,'>',exp\n1#exp:exp,'>=',exp\n1#exp:exp,'||',exp\n3#exp:exp,'*',exp":
          {
            candidates: [
              "3#exp:exp,'*',exp",
              "1#exp:exp,'+',exp",
              "1#exp:exp,'-',exp",
              "1#exp:exp,'*',exp",
              "1#exp:exp,'/',exp",
              "1#exp:exp,'%',exp",
              "1#exp:exp,'&&',exp",
              "1#exp:exp,'||',exp",
              "1#exp:exp,'==',exp",
              "1#exp:exp,'!=',exp",
              "1#exp:exp,'>',exp",
              "1#exp:exp,'<',exp",
              "1#exp:exp,'>=',exp",
              "1#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'+',exp",
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'-',exp",
              "'*'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'*',exp",
              "'/'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'/',exp",
              "'%'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'%',exp",
              "'&&'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'&&',exp",
              "'||'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'||',exp",
              "'!'": null,
              "'=='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'==',exp",
              "'!='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'!=',exp",
              "'>'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>',exp",
              "'<'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<',exp",
              "'>='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>=',exp",
              "'<='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<=',exp",
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#exp:exp,'!=',exp\n" +
              "1#exp:exp,'%',exp\n" +
              "1#exp:exp,'&&',exp\n" +
              "1#exp:exp,'*',exp\n" +
              "1#exp:exp,'+',exp\n" +
              "1#exp:exp,'-',exp\n" +
              "1#exp:exp,'/',exp\n" +
              "1#exp:exp,'<',exp\n" +
              "1#exp:exp,'<=',exp\n" +
              "1#exp:exp,'==',exp\n" +
              "1#exp:exp,'>',exp\n" +
              "1#exp:exp,'>=',exp\n" +
              "1#exp:exp,'||',exp\n" +
              "3#exp:exp,'*',exp",
          },
        "1#exp:exp,'!=',exp\n1#exp:exp,'%',exp\n1#exp:exp,'&&',exp\n1#exp:exp,'*',exp\n1#exp:exp,'+',exp\n1#exp:exp,'-',exp\n1#exp:exp,'/',exp\n1#exp:exp,'<',exp\n1#exp:exp,'<=',exp\n1#exp:exp,'==',exp\n1#exp:exp,'>',exp\n1#exp:exp,'>=',exp\n1#exp:exp,'||',exp\n3#exp:exp,'/',exp":
          {
            candidates: [
              "3#exp:exp,'/',exp",
              "1#exp:exp,'+',exp",
              "1#exp:exp,'-',exp",
              "1#exp:exp,'*',exp",
              "1#exp:exp,'/',exp",
              "1#exp:exp,'%',exp",
              "1#exp:exp,'&&',exp",
              "1#exp:exp,'||',exp",
              "1#exp:exp,'==',exp",
              "1#exp:exp,'!=',exp",
              "1#exp:exp,'>',exp",
              "1#exp:exp,'<',exp",
              "1#exp:exp,'>=',exp",
              "1#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'+',exp",
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'-',exp",
              "'*'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'*',exp",
              "'/'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'/',exp",
              "'%'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'%',exp",
              "'&&'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'&&',exp",
              "'||'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'||',exp",
              "'!'": null,
              "'=='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'==',exp",
              "'!='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'!=',exp",
              "'>'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>',exp",
              "'<'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<',exp",
              "'>='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>=',exp",
              "'<='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<=',exp",
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#exp:exp,'!=',exp\n" +
              "1#exp:exp,'%',exp\n" +
              "1#exp:exp,'&&',exp\n" +
              "1#exp:exp,'*',exp\n" +
              "1#exp:exp,'+',exp\n" +
              "1#exp:exp,'-',exp\n" +
              "1#exp:exp,'/',exp\n" +
              "1#exp:exp,'<',exp\n" +
              "1#exp:exp,'<=',exp\n" +
              "1#exp:exp,'==',exp\n" +
              "1#exp:exp,'>',exp\n" +
              "1#exp:exp,'>=',exp\n" +
              "1#exp:exp,'||',exp\n" +
              "3#exp:exp,'/',exp",
          },
        "1#exp:exp,'!=',exp\n1#exp:exp,'%',exp\n1#exp:exp,'&&',exp\n1#exp:exp,'*',exp\n1#exp:exp,'+',exp\n1#exp:exp,'-',exp\n1#exp:exp,'/',exp\n1#exp:exp,'<',exp\n1#exp:exp,'<=',exp\n1#exp:exp,'==',exp\n1#exp:exp,'>',exp\n1#exp:exp,'>=',exp\n1#exp:exp,'||',exp\n3#exp:exp,'%',exp":
          {
            candidates: [
              "3#exp:exp,'%',exp",
              "1#exp:exp,'+',exp",
              "1#exp:exp,'-',exp",
              "1#exp:exp,'*',exp",
              "1#exp:exp,'/',exp",
              "1#exp:exp,'%',exp",
              "1#exp:exp,'&&',exp",
              "1#exp:exp,'||',exp",
              "1#exp:exp,'==',exp",
              "1#exp:exp,'!=',exp",
              "1#exp:exp,'>',exp",
              "1#exp:exp,'<',exp",
              "1#exp:exp,'>=',exp",
              "1#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'+',exp",
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'-',exp",
              "'*'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'*',exp",
              "'/'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'/',exp",
              "'%'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'%',exp",
              "'&&'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'&&',exp",
              "'||'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'||',exp",
              "'!'": null,
              "'=='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'==',exp",
              "'!='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'!=',exp",
              "'>'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>',exp",
              "'<'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<',exp",
              "'>='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>=',exp",
              "'<='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<=',exp",
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#exp:exp,'!=',exp\n" +
              "1#exp:exp,'%',exp\n" +
              "1#exp:exp,'&&',exp\n" +
              "1#exp:exp,'*',exp\n" +
              "1#exp:exp,'+',exp\n" +
              "1#exp:exp,'-',exp\n" +
              "1#exp:exp,'/',exp\n" +
              "1#exp:exp,'<',exp\n" +
              "1#exp:exp,'<=',exp\n" +
              "1#exp:exp,'==',exp\n" +
              "1#exp:exp,'>',exp\n" +
              "1#exp:exp,'>=',exp\n" +
              "1#exp:exp,'||',exp\n" +
              "3#exp:exp,'%',exp",
          },
        "1#exp:exp,'!=',exp\n1#exp:exp,'%',exp\n1#exp:exp,'&&',exp\n1#exp:exp,'*',exp\n1#exp:exp,'+',exp\n1#exp:exp,'-',exp\n1#exp:exp,'/',exp\n1#exp:exp,'<',exp\n1#exp:exp,'<=',exp\n1#exp:exp,'==',exp\n1#exp:exp,'>',exp\n1#exp:exp,'>=',exp\n1#exp:exp,'||',exp\n3#exp:exp,'&&',exp":
          {
            candidates: [
              "3#exp:exp,'&&',exp",
              "1#exp:exp,'+',exp",
              "1#exp:exp,'-',exp",
              "1#exp:exp,'*',exp",
              "1#exp:exp,'/',exp",
              "1#exp:exp,'%',exp",
              "1#exp:exp,'&&',exp",
              "1#exp:exp,'||',exp",
              "1#exp:exp,'==',exp",
              "1#exp:exp,'!=',exp",
              "1#exp:exp,'>',exp",
              "1#exp:exp,'<',exp",
              "1#exp:exp,'>=',exp",
              "1#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'+',exp",
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'-',exp",
              "'*'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'*',exp",
              "'/'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'/',exp",
              "'%'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'%',exp",
              "'&&'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'&&',exp",
              "'||'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'||',exp",
              "'!'": null,
              "'=='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'==',exp",
              "'!='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'!=',exp",
              "'>'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>',exp",
              "'<'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<',exp",
              "'>='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>=',exp",
              "'<='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<=',exp",
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#exp:exp,'!=',exp\n" +
              "1#exp:exp,'%',exp\n" +
              "1#exp:exp,'&&',exp\n" +
              "1#exp:exp,'*',exp\n" +
              "1#exp:exp,'+',exp\n" +
              "1#exp:exp,'-',exp\n" +
              "1#exp:exp,'/',exp\n" +
              "1#exp:exp,'<',exp\n" +
              "1#exp:exp,'<=',exp\n" +
              "1#exp:exp,'==',exp\n" +
              "1#exp:exp,'>',exp\n" +
              "1#exp:exp,'>=',exp\n" +
              "1#exp:exp,'||',exp\n" +
              "3#exp:exp,'&&',exp",
          },
        "1#exp:exp,'!=',exp\n1#exp:exp,'%',exp\n1#exp:exp,'&&',exp\n1#exp:exp,'*',exp\n1#exp:exp,'+',exp\n1#exp:exp,'-',exp\n1#exp:exp,'/',exp\n1#exp:exp,'<',exp\n1#exp:exp,'<=',exp\n1#exp:exp,'==',exp\n1#exp:exp,'>',exp\n1#exp:exp,'>=',exp\n1#exp:exp,'||',exp\n3#exp:exp,'||',exp":
          {
            candidates: [
              "3#exp:exp,'||',exp",
              "1#exp:exp,'+',exp",
              "1#exp:exp,'-',exp",
              "1#exp:exp,'*',exp",
              "1#exp:exp,'/',exp",
              "1#exp:exp,'%',exp",
              "1#exp:exp,'&&',exp",
              "1#exp:exp,'||',exp",
              "1#exp:exp,'==',exp",
              "1#exp:exp,'!=',exp",
              "1#exp:exp,'>',exp",
              "1#exp:exp,'<',exp",
              "1#exp:exp,'>=',exp",
              "1#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'+',exp",
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'-',exp",
              "'*'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'*',exp",
              "'/'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'/',exp",
              "'%'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'%',exp",
              "'&&'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'&&',exp",
              "'||'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'||',exp",
              "'!'": null,
              "'=='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'==',exp",
              "'!='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'!=',exp",
              "'>'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>',exp",
              "'<'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<',exp",
              "'>='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>=',exp",
              "'<='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<=',exp",
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#exp:exp,'!=',exp\n" +
              "1#exp:exp,'%',exp\n" +
              "1#exp:exp,'&&',exp\n" +
              "1#exp:exp,'*',exp\n" +
              "1#exp:exp,'+',exp\n" +
              "1#exp:exp,'-',exp\n" +
              "1#exp:exp,'/',exp\n" +
              "1#exp:exp,'<',exp\n" +
              "1#exp:exp,'<=',exp\n" +
              "1#exp:exp,'==',exp\n" +
              "1#exp:exp,'>',exp\n" +
              "1#exp:exp,'>=',exp\n" +
              "1#exp:exp,'||',exp\n" +
              "3#exp:exp,'||',exp",
          },
        "1#exp:exp,'!=',exp\n1#exp:exp,'%',exp\n1#exp:exp,'&&',exp\n1#exp:exp,'*',exp\n1#exp:exp,'+',exp\n1#exp:exp,'-',exp\n1#exp:exp,'/',exp\n1#exp:exp,'<',exp\n1#exp:exp,'<=',exp\n1#exp:exp,'==',exp\n1#exp:exp,'>',exp\n1#exp:exp,'>=',exp\n1#exp:exp,'||',exp\n3#exp:exp,'==',exp":
          {
            candidates: [
              "3#exp:exp,'==',exp",
              "1#exp:exp,'+',exp",
              "1#exp:exp,'-',exp",
              "1#exp:exp,'*',exp",
              "1#exp:exp,'/',exp",
              "1#exp:exp,'%',exp",
              "1#exp:exp,'&&',exp",
              "1#exp:exp,'||',exp",
              "1#exp:exp,'==',exp",
              "1#exp:exp,'!=',exp",
              "1#exp:exp,'>',exp",
              "1#exp:exp,'<',exp",
              "1#exp:exp,'>=',exp",
              "1#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'+',exp",
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'-',exp",
              "'*'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'*',exp",
              "'/'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'/',exp",
              "'%'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'%',exp",
              "'&&'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'&&',exp",
              "'||'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'||',exp",
              "'!'": null,
              "'=='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'==',exp",
              "'!='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'!=',exp",
              "'>'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>',exp",
              "'<'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<',exp",
              "'>='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>=',exp",
              "'<='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<=',exp",
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#exp:exp,'!=',exp\n" +
              "1#exp:exp,'%',exp\n" +
              "1#exp:exp,'&&',exp\n" +
              "1#exp:exp,'*',exp\n" +
              "1#exp:exp,'+',exp\n" +
              "1#exp:exp,'-',exp\n" +
              "1#exp:exp,'/',exp\n" +
              "1#exp:exp,'<',exp\n" +
              "1#exp:exp,'<=',exp\n" +
              "1#exp:exp,'==',exp\n" +
              "1#exp:exp,'>',exp\n" +
              "1#exp:exp,'>=',exp\n" +
              "1#exp:exp,'||',exp\n" +
              "3#exp:exp,'==',exp",
          },
        "1#exp:exp,'!=',exp\n1#exp:exp,'%',exp\n1#exp:exp,'&&',exp\n1#exp:exp,'*',exp\n1#exp:exp,'+',exp\n1#exp:exp,'-',exp\n1#exp:exp,'/',exp\n1#exp:exp,'<',exp\n1#exp:exp,'<=',exp\n1#exp:exp,'==',exp\n1#exp:exp,'>',exp\n1#exp:exp,'>=',exp\n1#exp:exp,'||',exp\n3#exp:exp,'!=',exp":
          {
            candidates: [
              "3#exp:exp,'!=',exp",
              "1#exp:exp,'+',exp",
              "1#exp:exp,'-',exp",
              "1#exp:exp,'*',exp",
              "1#exp:exp,'/',exp",
              "1#exp:exp,'%',exp",
              "1#exp:exp,'&&',exp",
              "1#exp:exp,'||',exp",
              "1#exp:exp,'==',exp",
              "1#exp:exp,'!=',exp",
              "1#exp:exp,'>',exp",
              "1#exp:exp,'<',exp",
              "1#exp:exp,'>=',exp",
              "1#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'+',exp",
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'-',exp",
              "'*'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'*',exp",
              "'/'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'/',exp",
              "'%'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'%',exp",
              "'&&'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'&&',exp",
              "'||'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'||',exp",
              "'!'": null,
              "'=='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'==',exp",
              "'!='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'!=',exp",
              "'>'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>',exp",
              "'<'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<',exp",
              "'>='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>=',exp",
              "'<='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<=',exp",
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#exp:exp,'!=',exp\n" +
              "1#exp:exp,'%',exp\n" +
              "1#exp:exp,'&&',exp\n" +
              "1#exp:exp,'*',exp\n" +
              "1#exp:exp,'+',exp\n" +
              "1#exp:exp,'-',exp\n" +
              "1#exp:exp,'/',exp\n" +
              "1#exp:exp,'<',exp\n" +
              "1#exp:exp,'<=',exp\n" +
              "1#exp:exp,'==',exp\n" +
              "1#exp:exp,'>',exp\n" +
              "1#exp:exp,'>=',exp\n" +
              "1#exp:exp,'||',exp\n" +
              "3#exp:exp,'!=',exp",
          },
        "1#exp:exp,'!=',exp\n1#exp:exp,'%',exp\n1#exp:exp,'&&',exp\n1#exp:exp,'*',exp\n1#exp:exp,'+',exp\n1#exp:exp,'-',exp\n1#exp:exp,'/',exp\n1#exp:exp,'<',exp\n1#exp:exp,'<=',exp\n1#exp:exp,'==',exp\n1#exp:exp,'>',exp\n1#exp:exp,'>=',exp\n1#exp:exp,'||',exp\n3#exp:exp,'>',exp":
          {
            candidates: [
              "3#exp:exp,'>',exp",
              "1#exp:exp,'+',exp",
              "1#exp:exp,'-',exp",
              "1#exp:exp,'*',exp",
              "1#exp:exp,'/',exp",
              "1#exp:exp,'%',exp",
              "1#exp:exp,'&&',exp",
              "1#exp:exp,'||',exp",
              "1#exp:exp,'==',exp",
              "1#exp:exp,'!=',exp",
              "1#exp:exp,'>',exp",
              "1#exp:exp,'<',exp",
              "1#exp:exp,'>=',exp",
              "1#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'+',exp",
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'-',exp",
              "'*'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'*',exp",
              "'/'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'/',exp",
              "'%'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'%',exp",
              "'&&'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'&&',exp",
              "'||'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'||',exp",
              "'!'": null,
              "'=='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'==',exp",
              "'!='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'!=',exp",
              "'>'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>',exp",
              "'<'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<',exp",
              "'>='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>=',exp",
              "'<='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<=',exp",
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#exp:exp,'!=',exp\n" +
              "1#exp:exp,'%',exp\n" +
              "1#exp:exp,'&&',exp\n" +
              "1#exp:exp,'*',exp\n" +
              "1#exp:exp,'+',exp\n" +
              "1#exp:exp,'-',exp\n" +
              "1#exp:exp,'/',exp\n" +
              "1#exp:exp,'<',exp\n" +
              "1#exp:exp,'<=',exp\n" +
              "1#exp:exp,'==',exp\n" +
              "1#exp:exp,'>',exp\n" +
              "1#exp:exp,'>=',exp\n" +
              "1#exp:exp,'||',exp\n" +
              "3#exp:exp,'>',exp",
          },
        "1#exp:exp,'!=',exp\n1#exp:exp,'%',exp\n1#exp:exp,'&&',exp\n1#exp:exp,'*',exp\n1#exp:exp,'+',exp\n1#exp:exp,'-',exp\n1#exp:exp,'/',exp\n1#exp:exp,'<',exp\n1#exp:exp,'<=',exp\n1#exp:exp,'==',exp\n1#exp:exp,'>',exp\n1#exp:exp,'>=',exp\n1#exp:exp,'||',exp\n3#exp:exp,'<',exp":
          {
            candidates: [
              "3#exp:exp,'<',exp",
              "1#exp:exp,'+',exp",
              "1#exp:exp,'-',exp",
              "1#exp:exp,'*',exp",
              "1#exp:exp,'/',exp",
              "1#exp:exp,'%',exp",
              "1#exp:exp,'&&',exp",
              "1#exp:exp,'||',exp",
              "1#exp:exp,'==',exp",
              "1#exp:exp,'!=',exp",
              "1#exp:exp,'>',exp",
              "1#exp:exp,'<',exp",
              "1#exp:exp,'>=',exp",
              "1#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'+',exp",
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'-',exp",
              "'*'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'*',exp",
              "'/'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'/',exp",
              "'%'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'%',exp",
              "'&&'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'&&',exp",
              "'||'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'||',exp",
              "'!'": null,
              "'=='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'==',exp",
              "'!='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'!=',exp",
              "'>'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>',exp",
              "'<'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<',exp",
              "'>='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>=',exp",
              "'<='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<=',exp",
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#exp:exp,'!=',exp\n" +
              "1#exp:exp,'%',exp\n" +
              "1#exp:exp,'&&',exp\n" +
              "1#exp:exp,'*',exp\n" +
              "1#exp:exp,'+',exp\n" +
              "1#exp:exp,'-',exp\n" +
              "1#exp:exp,'/',exp\n" +
              "1#exp:exp,'<',exp\n" +
              "1#exp:exp,'<=',exp\n" +
              "1#exp:exp,'==',exp\n" +
              "1#exp:exp,'>',exp\n" +
              "1#exp:exp,'>=',exp\n" +
              "1#exp:exp,'||',exp\n" +
              "3#exp:exp,'<',exp",
          },
        "1#exp:exp,'!=',exp\n1#exp:exp,'%',exp\n1#exp:exp,'&&',exp\n1#exp:exp,'*',exp\n1#exp:exp,'+',exp\n1#exp:exp,'-',exp\n1#exp:exp,'/',exp\n1#exp:exp,'<',exp\n1#exp:exp,'<=',exp\n1#exp:exp,'==',exp\n1#exp:exp,'>',exp\n1#exp:exp,'>=',exp\n1#exp:exp,'||',exp\n3#exp:exp,'>=',exp":
          {
            candidates: [
              "3#exp:exp,'>=',exp",
              "1#exp:exp,'+',exp",
              "1#exp:exp,'-',exp",
              "1#exp:exp,'*',exp",
              "1#exp:exp,'/',exp",
              "1#exp:exp,'%',exp",
              "1#exp:exp,'&&',exp",
              "1#exp:exp,'||',exp",
              "1#exp:exp,'==',exp",
              "1#exp:exp,'!=',exp",
              "1#exp:exp,'>',exp",
              "1#exp:exp,'<',exp",
              "1#exp:exp,'>=',exp",
              "1#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'+',exp",
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'-',exp",
              "'*'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'*',exp",
              "'/'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'/',exp",
              "'%'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'%',exp",
              "'&&'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'&&',exp",
              "'||'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'||',exp",
              "'!'": null,
              "'=='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'==',exp",
              "'!='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'!=',exp",
              "'>'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>',exp",
              "'<'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<',exp",
              "'>='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>=',exp",
              "'<='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<=',exp",
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#exp:exp,'!=',exp\n" +
              "1#exp:exp,'%',exp\n" +
              "1#exp:exp,'&&',exp\n" +
              "1#exp:exp,'*',exp\n" +
              "1#exp:exp,'+',exp\n" +
              "1#exp:exp,'-',exp\n" +
              "1#exp:exp,'/',exp\n" +
              "1#exp:exp,'<',exp\n" +
              "1#exp:exp,'<=',exp\n" +
              "1#exp:exp,'==',exp\n" +
              "1#exp:exp,'>',exp\n" +
              "1#exp:exp,'>=',exp\n" +
              "1#exp:exp,'||',exp\n" +
              "3#exp:exp,'>=',exp",
          },
        "1#exp:exp,'!=',exp\n1#exp:exp,'%',exp\n1#exp:exp,'&&',exp\n1#exp:exp,'*',exp\n1#exp:exp,'+',exp\n1#exp:exp,'-',exp\n1#exp:exp,'/',exp\n1#exp:exp,'<',exp\n1#exp:exp,'<=',exp\n1#exp:exp,'==',exp\n1#exp:exp,'>',exp\n1#exp:exp,'>=',exp\n1#exp:exp,'||',exp\n3#exp:exp,'<=',exp":
          {
            candidates: [
              "3#exp:exp,'<=',exp",
              "1#exp:exp,'+',exp",
              "1#exp:exp,'-',exp",
              "1#exp:exp,'*',exp",
              "1#exp:exp,'/',exp",
              "1#exp:exp,'%',exp",
              "1#exp:exp,'&&',exp",
              "1#exp:exp,'||',exp",
              "1#exp:exp,'==',exp",
              "1#exp:exp,'!=',exp",
              "1#exp:exp,'>',exp",
              "1#exp:exp,'<',exp",
              "1#exp:exp,'>=',exp",
              "1#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'+',exp",
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'-',exp",
              "'*'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'*',exp",
              "'/'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'/',exp",
              "'%'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'%',exp",
              "'&&'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'&&',exp",
              "'||'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'||',exp",
              "'!'": null,
              "'=='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'==',exp",
              "'!='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'!=',exp",
              "'>'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>',exp",
              "'<'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<',exp",
              "'>='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>=',exp",
              "'<='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<=',exp",
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#exp:exp,'!=',exp\n" +
              "1#exp:exp,'%',exp\n" +
              "1#exp:exp,'&&',exp\n" +
              "1#exp:exp,'*',exp\n" +
              "1#exp:exp,'+',exp\n" +
              "1#exp:exp,'-',exp\n" +
              "1#exp:exp,'/',exp\n" +
              "1#exp:exp,'<',exp\n" +
              "1#exp:exp,'<=',exp\n" +
              "1#exp:exp,'==',exp\n" +
              "1#exp:exp,'>',exp\n" +
              "1#exp:exp,'>=',exp\n" +
              "1#exp:exp,'||',exp\n" +
              "3#exp:exp,'<=',exp",
          },
        "4#loop_stmt:do,'{',__2,'}',while,exp,';'": {
          candidates: ["4#loop_stmt:do,'{',__2,'}',while,exp,';'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "5#loop_stmt:do,'{',__2,'}',while,exp,';'",
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "4#loop_stmt:do,'{',__2,'}',while,exp,';'",
        },
        "0#exp:'!',exp\n0#exp:'-',exp\n0#exp:exp,'!=',exp\n0#exp:exp,'%',exp\n0#exp:exp,'&&',exp\n0#exp:exp,'*',exp\n0#exp:exp,'+',exp\n0#exp:exp,'-',exp\n0#exp:exp,'/',exp\n0#exp:exp,'<',exp\n0#exp:exp,'<=',exp\n0#exp:exp,'==',exp\n0#exp:exp,'>',exp\n0#exp:exp,'>=',exp\n0#exp:exp,'||',exp\n0#exp:identifier\n0#exp:integer\n4#loop_stmt:do,'{','}',while,exp,';'":
          {
            candidates: [
              "4#loop_stmt:do,'{','}',while,exp,';'",
              "0#exp:integer",
              "0#exp:identifier",
              "0#exp:exp,'+',exp",
              "0#exp:exp,'-',exp",
              "0#exp:exp,'*',exp",
              "0#exp:exp,'/',exp",
              "0#exp:exp,'%',exp",
              "0#exp:'-',exp",
              "0#exp:exp,'&&',exp",
              "0#exp:exp,'||',exp",
              "0#exp:'!',exp",
              "0#exp:exp,'==',exp",
              "0#exp:exp,'!=',exp",
              "0#exp:exp,'>',exp",
              "0#exp:exp,'<',exp",
              "0#exp:exp,'>=',exp",
              "0#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#exp:identifier",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp:
                "1#exp:exp,'!=',exp\n" +
                "1#exp:exp,'%',exp\n" +
                "1#exp:exp,'&&',exp\n" +
                "1#exp:exp,'*',exp\n" +
                "1#exp:exp,'+',exp\n" +
                "1#exp:exp,'-',exp\n" +
                "1#exp:exp,'/',exp\n" +
                "1#exp:exp,'<',exp\n" +
                "1#exp:exp,'<=',exp\n" +
                "1#exp:exp,'==',exp\n" +
                "1#exp:exp,'>',exp\n" +
                "1#exp:exp,'>=',exp\n" +
                "1#exp:exp,'||',exp\n" +
                "5#loop_stmt:do,'{','}',while,exp,';'",
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: "1#exp:integer",
              "'+'": null,
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'-',exp",
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'!',exp",
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "4#loop_stmt:do,'{','}',while,exp,';'",
          },
        "4#loop_stmt:while,exp,'{',__2,'}'": {
          candidates: ["4#loop_stmt:while,exp,'{',__2,'}'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": "5#loop_stmt:while,exp,'{',__2,'}'",
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "4#loop_stmt:while,exp,'{',__2,'}'",
        },
        "4#loop_stmt:while,exp,'{','}'": {
          candidates: ["4#loop_stmt:while,exp,'{','}'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "4#loop_stmt:while,exp,'{','}'",
        },
        "5#if_stmt:if,exp,'{','}',else,'{','}'\n5#if_stmt:if,exp,'{','}',else,'{',__4,'}'":
          {
            candidates: [
              "5#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              "5#if_stmt:if,exp,'{','}',else,'{','}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'":
                "0#__4:stmt@ifFalse\n" +
                "0#__4:stmt@ifFalse,__4\n" +
                "0#assign_stmt:identifier,'=',exp,';'\n" +
                "0#if_stmt:if,exp,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
                "0#loop_stmt:do,'{','}',while,exp,';'\n" +
                "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
                "0#loop_stmt:while,exp,'{','}'\n" +
                "0#loop_stmt:while,exp,'{',__2,'}'\n" +
                "0#ret_stmt:return,exp,';'\n" +
                "0#stmt:assign_stmt\n" +
                "0#stmt:if_stmt\n" +
                "0#stmt:loop_stmt\n" +
                "0#stmt:ret_stmt\n" +
                "6#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "6#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "5#if_stmt:if,exp,'{','}',else,'{','}'\n" +
              "5#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
          },
        "5#if_stmt:if,exp,'{',__3,'}'\n5#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n5#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'":
          {
            candidates: [
              "5#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              "5#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              "5#if_stmt:if,exp,'{',__3,'}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else:
                "6#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "6#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "5#if_stmt:if,exp,'{',__3,'}'\n" +
              "5#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
              "5#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          },
        "2#__3:stmt@ifTrue,__3": {
          candidates: ["2#__3:stmt@ifTrue,__3"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "2#__3:stmt@ifTrue,__3",
        },
        "0#exp:'!',exp\n0#exp:'-',exp\n0#exp:exp,'!=',exp\n0#exp:exp,'%',exp\n0#exp:exp,'&&',exp\n0#exp:exp,'*',exp\n0#exp:exp,'+',exp\n0#exp:exp,'-',exp\n0#exp:exp,'/',exp\n0#exp:exp,'<',exp\n0#exp:exp,'<=',exp\n0#exp:exp,'==',exp\n0#exp:exp,'>',exp\n0#exp:exp,'>=',exp\n0#exp:exp,'||',exp\n0#exp:identifier\n0#exp:integer\n5#loop_stmt:do,'{',__2,'}',while,exp,';'":
          {
            candidates: [
              "5#loop_stmt:do,'{',__2,'}',while,exp,';'",
              "0#exp:integer",
              "0#exp:identifier",
              "0#exp:exp,'+',exp",
              "0#exp:exp,'-',exp",
              "0#exp:exp,'*',exp",
              "0#exp:exp,'/',exp",
              "0#exp:exp,'%',exp",
              "0#exp:'-',exp",
              "0#exp:exp,'&&',exp",
              "0#exp:exp,'||',exp",
              "0#exp:'!',exp",
              "0#exp:exp,'==',exp",
              "0#exp:exp,'!=',exp",
              "0#exp:exp,'>',exp",
              "0#exp:exp,'<',exp",
              "0#exp:exp,'>=',exp",
              "0#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#exp:identifier",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp:
                "1#exp:exp,'!=',exp\n" +
                "1#exp:exp,'%',exp\n" +
                "1#exp:exp,'&&',exp\n" +
                "1#exp:exp,'*',exp\n" +
                "1#exp:exp,'+',exp\n" +
                "1#exp:exp,'-',exp\n" +
                "1#exp:exp,'/',exp\n" +
                "1#exp:exp,'<',exp\n" +
                "1#exp:exp,'<=',exp\n" +
                "1#exp:exp,'==',exp\n" +
                "1#exp:exp,'>',exp\n" +
                "1#exp:exp,'>=',exp\n" +
                "1#exp:exp,'||',exp\n" +
                "6#loop_stmt:do,'{',__2,'}',while,exp,';'",
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: "1#exp:integer",
              "'+'": null,
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'-',exp",
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#exp:'!',exp",
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "0#exp:'!',exp\n" +
              "0#exp:'-',exp\n" +
              "0#exp:exp,'!=',exp\n" +
              "0#exp:exp,'%',exp\n" +
              "0#exp:exp,'&&',exp\n" +
              "0#exp:exp,'*',exp\n" +
              "0#exp:exp,'+',exp\n" +
              "0#exp:exp,'-',exp\n" +
              "0#exp:exp,'/',exp\n" +
              "0#exp:exp,'<',exp\n" +
              "0#exp:exp,'<=',exp\n" +
              "0#exp:exp,'==',exp\n" +
              "0#exp:exp,'>',exp\n" +
              "0#exp:exp,'>=',exp\n" +
              "0#exp:exp,'||',exp\n" +
              "0#exp:identifier\n" +
              "0#exp:integer\n" +
              "5#loop_stmt:do,'{',__2,'}',while,exp,';'",
          },
        "1#exp:exp,'!=',exp\n1#exp:exp,'%',exp\n1#exp:exp,'&&',exp\n1#exp:exp,'*',exp\n1#exp:exp,'+',exp\n1#exp:exp,'-',exp\n1#exp:exp,'/',exp\n1#exp:exp,'<',exp\n1#exp:exp,'<=',exp\n1#exp:exp,'==',exp\n1#exp:exp,'>',exp\n1#exp:exp,'>=',exp\n1#exp:exp,'||',exp\n5#loop_stmt:do,'{','}',while,exp,';'":
          {
            candidates: [
              "5#loop_stmt:do,'{','}',while,exp,';'",
              "1#exp:exp,'+',exp",
              "1#exp:exp,'-',exp",
              "1#exp:exp,'*',exp",
              "1#exp:exp,'/',exp",
              "1#exp:exp,'%',exp",
              "1#exp:exp,'&&',exp",
              "1#exp:exp,'||',exp",
              "1#exp:exp,'==',exp",
              "1#exp:exp,'!=',exp",
              "1#exp:exp,'>',exp",
              "1#exp:exp,'<',exp",
              "1#exp:exp,'>=',exp",
              "1#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": "6#loop_stmt:do,'{','}',while,exp,';'",
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'+',exp",
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'-',exp",
              "'*'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'*',exp",
              "'/'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'/',exp",
              "'%'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'%',exp",
              "'&&'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'&&',exp",
              "'||'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'||',exp",
              "'!'": null,
              "'=='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'==',exp",
              "'!='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'!=',exp",
              "'>'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>',exp",
              "'<'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<',exp",
              "'>='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>=',exp",
              "'<='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<=',exp",
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#exp:exp,'!=',exp\n" +
              "1#exp:exp,'%',exp\n" +
              "1#exp:exp,'&&',exp\n" +
              "1#exp:exp,'*',exp\n" +
              "1#exp:exp,'+',exp\n" +
              "1#exp:exp,'-',exp\n" +
              "1#exp:exp,'/',exp\n" +
              "1#exp:exp,'<',exp\n" +
              "1#exp:exp,'<=',exp\n" +
              "1#exp:exp,'==',exp\n" +
              "1#exp:exp,'>',exp\n" +
              "1#exp:exp,'>=',exp\n" +
              "1#exp:exp,'||',exp\n" +
              "5#loop_stmt:do,'{','}',while,exp,';'",
          },
        "5#loop_stmt:while,exp,'{',__2,'}'": {
          candidates: ["5#loop_stmt:while,exp,'{',__2,'}'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "5#loop_stmt:while,exp,'{',__2,'}'",
        },
        "0#__4:stmt@ifFalse\n0#__4:stmt@ifFalse,__4\n0#assign_stmt:identifier,'=',exp,';'\n0#if_stmt:if,exp,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n0#if_stmt:if,exp,'{',__3,'}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n0#loop_stmt:do,'{','}',while,exp,';'\n0#loop_stmt:do,'{',__2,'}',while,exp,';'\n0#loop_stmt:while,exp,'{','}'\n0#loop_stmt:while,exp,'{',__2,'}'\n0#ret_stmt:return,exp,';'\n0#stmt:assign_stmt\n0#stmt:if_stmt\n0#stmt:loop_stmt\n0#stmt:ret_stmt\n6#if_stmt:if,exp,'{','}',else,'{','}'\n6#if_stmt:if,exp,'{','}',else,'{',__4,'}'":
          {
            candidates: [
              "6#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              "6#if_stmt:if,exp,'{','}',else,'{','}'",
              "0#__4:stmt@ifFalse",
              "0#__4:stmt@ifFalse,__4",
              "0#stmt:assign_stmt",
              "0#stmt:ret_stmt",
              "0#stmt:if_stmt",
              "0#stmt:loop_stmt",
              "0#assign_stmt:identifier,'=',exp,';'",
              "0#ret_stmt:return,exp,';'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              "0#if_stmt:if,exp,'{',__3,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{','}'",
              "0#if_stmt:if,exp,'{','}'",
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'",
              "0#loop_stmt:do,'{','}',while,exp,';'",
              "0#loop_stmt:while,exp,'{',__2,'}'",
              "0#loop_stmt:while,exp,'{','}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#assign_stmt:identifier,'=',exp,';'",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": "7#if_stmt:if,exp,'{','}',else,'{','}'",
              if:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#if_stmt:if,exp,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              exp: null,
              __3: null,
              else: null,
              __4: "7#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              do:
                "1#loop_stmt:do,'{','}',while,exp,';'\n" +
                "1#loop_stmt:do,'{',__2,'}',while,exp,';'",
              while:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#loop_stmt:while,exp,'{','}'\n" +
                "1#loop_stmt:while,exp,'{',__2,'}'",
              "';'": null,
              assign_stmt: "1#stmt:assign_stmt",
              ret_stmt: "1#stmt:ret_stmt",
              if_stmt: "1#stmt:if_stmt",
              loop_stmt: "1#stmt:loop_stmt",
              "'='": null,
              return:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#ret_stmt:return,exp,';'",
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt:
                "0#__4:stmt@ifFalse\n" +
                "0#__4:stmt@ifFalse,__4\n" +
                "0#assign_stmt:identifier,'=',exp,';'\n" +
                "0#if_stmt:if,exp,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
                "0#loop_stmt:do,'{','}',while,exp,';'\n" +
                "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
                "0#loop_stmt:while,exp,'{','}'\n" +
                "0#loop_stmt:while,exp,'{',__2,'}'\n" +
                "0#ret_stmt:return,exp,';'\n" +
                "0#stmt:assign_stmt\n" +
                "0#stmt:if_stmt\n" +
                "0#stmt:loop_stmt\n" +
                "0#stmt:ret_stmt\n" +
                "1#__4:stmt@ifFalse\n" +
                "1#__4:stmt@ifFalse,__4",
            },
            id:
              "0#__4:stmt@ifFalse\n" +
              "0#__4:stmt@ifFalse,__4\n" +
              "0#assign_stmt:identifier,'=',exp,';'\n" +
              "0#if_stmt:if,exp,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
              "0#loop_stmt:do,'{','}',while,exp,';'\n" +
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
              "0#loop_stmt:while,exp,'{','}'\n" +
              "0#loop_stmt:while,exp,'{',__2,'}'\n" +
              "0#ret_stmt:return,exp,';'\n" +
              "0#stmt:assign_stmt\n" +
              "0#stmt:if_stmt\n" +
              "0#stmt:loop_stmt\n" +
              "0#stmt:ret_stmt\n" +
              "6#if_stmt:if,exp,'{','}',else,'{','}'\n" +
              "6#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
          },
        "6#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n6#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'":
          {
            candidates: [
              "6#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              "6#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'":
                "0#__4:stmt@ifFalse\n" +
                "0#__4:stmt@ifFalse,__4\n" +
                "0#assign_stmt:identifier,'=',exp,';'\n" +
                "0#if_stmt:if,exp,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
                "0#loop_stmt:do,'{','}',while,exp,';'\n" +
                "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
                "0#loop_stmt:while,exp,'{','}'\n" +
                "0#loop_stmt:while,exp,'{',__2,'}'\n" +
                "0#ret_stmt:return,exp,';'\n" +
                "0#stmt:assign_stmt\n" +
                "0#stmt:if_stmt\n" +
                "0#stmt:loop_stmt\n" +
                "0#stmt:ret_stmt\n" +
                "7#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "7#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": null,
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "6#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
              "6#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          },
        "1#exp:exp,'!=',exp\n1#exp:exp,'%',exp\n1#exp:exp,'&&',exp\n1#exp:exp,'*',exp\n1#exp:exp,'+',exp\n1#exp:exp,'-',exp\n1#exp:exp,'/',exp\n1#exp:exp,'<',exp\n1#exp:exp,'<=',exp\n1#exp:exp,'==',exp\n1#exp:exp,'>',exp\n1#exp:exp,'>=',exp\n1#exp:exp,'||',exp\n6#loop_stmt:do,'{',__2,'}',while,exp,';'":
          {
            candidates: [
              "6#loop_stmt:do,'{',__2,'}',while,exp,';'",
              "1#exp:exp,'+',exp",
              "1#exp:exp,'-',exp",
              "1#exp:exp,'*',exp",
              "1#exp:exp,'/',exp",
              "1#exp:exp,'%',exp",
              "1#exp:exp,'&&',exp",
              "1#exp:exp,'||',exp",
              "1#exp:exp,'==',exp",
              "1#exp:exp,'!=',exp",
              "1#exp:exp,'>',exp",
              "1#exp:exp,'<',exp",
              "1#exp:exp,'>=',exp",
              "1#exp:exp,'<=',exp",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              "';'": "7#loop_stmt:do,'{',__2,'}',while,exp,';'",
              assign_stmt: null,
              ret_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              "'='": null,
              return: null,
              integer: null,
              "'+'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'+',exp",
              "'-'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'-',exp",
              "'*'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'*',exp",
              "'/'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'/',exp",
              "'%'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'%',exp",
              "'&&'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'&&',exp",
              "'||'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'||',exp",
              "'!'": null,
              "'=='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'==',exp",
              "'!='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'!=',exp",
              "'>'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>',exp",
              "'<'":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<',exp",
              "'>='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'>=',exp",
              "'<='":
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "2#exp:exp,'<=',exp",
              fn_def: null,
              "','": null,
              stmt: null,
            },
            id:
              "1#exp:exp,'!=',exp\n" +
              "1#exp:exp,'%',exp\n" +
              "1#exp:exp,'&&',exp\n" +
              "1#exp:exp,'*',exp\n" +
              "1#exp:exp,'+',exp\n" +
              "1#exp:exp,'-',exp\n" +
              "1#exp:exp,'/',exp\n" +
              "1#exp:exp,'<',exp\n" +
              "1#exp:exp,'<=',exp\n" +
              "1#exp:exp,'==',exp\n" +
              "1#exp:exp,'>',exp\n" +
              "1#exp:exp,'>=',exp\n" +
              "1#exp:exp,'||',exp\n" +
              "6#loop_stmt:do,'{',__2,'}',while,exp,';'",
          },
        "6#loop_stmt:do,'{','}',while,exp,';'": {
          candidates: ["6#loop_stmt:do,'{','}',while,exp,';'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "6#loop_stmt:do,'{','}',while,exp,';'",
        },
        "7#if_stmt:if,exp,'{','}',else,'{','}'": {
          candidates: ["7#if_stmt:if,exp,'{','}',else,'{','}'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "7#if_stmt:if,exp,'{','}',else,'{','}'",
        },
        "7#if_stmt:if,exp,'{','}',else,'{',__4,'}'": {
          candidates: ["7#if_stmt:if,exp,'{','}',else,'{',__4,'}'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": "8#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "7#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
        },
        "0#__4:stmt@ifFalse\n0#__4:stmt@ifFalse,__4\n0#assign_stmt:identifier,'=',exp,';'\n0#if_stmt:if,exp,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n0#if_stmt:if,exp,'{',__3,'}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n0#loop_stmt:do,'{','}',while,exp,';'\n0#loop_stmt:do,'{',__2,'}',while,exp,';'\n0#loop_stmt:while,exp,'{','}'\n0#loop_stmt:while,exp,'{',__2,'}'\n0#ret_stmt:return,exp,';'\n0#stmt:assign_stmt\n0#stmt:if_stmt\n0#stmt:loop_stmt\n0#stmt:ret_stmt\n1#__4:stmt@ifFalse\n1#__4:stmt@ifFalse,__4":
          {
            candidates: [
              "1#__4:stmt@ifFalse",
              "1#__4:stmt@ifFalse,__4",
              "0#__4:stmt@ifFalse",
              "0#__4:stmt@ifFalse,__4",
              "0#stmt:assign_stmt",
              "0#stmt:ret_stmt",
              "0#stmt:if_stmt",
              "0#stmt:loop_stmt",
              "0#assign_stmt:identifier,'=',exp,';'",
              "0#ret_stmt:return,exp,';'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              "0#if_stmt:if,exp,'{',__3,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{','}'",
              "0#if_stmt:if,exp,'{','}'",
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'",
              "0#loop_stmt:do,'{','}',while,exp,';'",
              "0#loop_stmt:while,exp,'{',__2,'}'",
              "0#loop_stmt:while,exp,'{','}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#assign_stmt:identifier,'=',exp,';'",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": null,
              if:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#if_stmt:if,exp,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              exp: null,
              __3: null,
              else: null,
              __4: "2#__4:stmt@ifFalse,__4",
              do:
                "1#loop_stmt:do,'{','}',while,exp,';'\n" +
                "1#loop_stmt:do,'{',__2,'}',while,exp,';'",
              while:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#loop_stmt:while,exp,'{','}'\n" +
                "1#loop_stmt:while,exp,'{',__2,'}'",
              "';'": null,
              assign_stmt: "1#stmt:assign_stmt",
              ret_stmt: "1#stmt:ret_stmt",
              if_stmt: "1#stmt:if_stmt",
              loop_stmt: "1#stmt:loop_stmt",
              "'='": null,
              return:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#ret_stmt:return,exp,';'",
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt:
                "0#__4:stmt@ifFalse\n" +
                "0#__4:stmt@ifFalse,__4\n" +
                "0#assign_stmt:identifier,'=',exp,';'\n" +
                "0#if_stmt:if,exp,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
                "0#loop_stmt:do,'{','}',while,exp,';'\n" +
                "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
                "0#loop_stmt:while,exp,'{','}'\n" +
                "0#loop_stmt:while,exp,'{',__2,'}'\n" +
                "0#ret_stmt:return,exp,';'\n" +
                "0#stmt:assign_stmt\n" +
                "0#stmt:if_stmt\n" +
                "0#stmt:loop_stmt\n" +
                "0#stmt:ret_stmt\n" +
                "1#__4:stmt@ifFalse\n" +
                "1#__4:stmt@ifFalse,__4",
            },
            id:
              "0#__4:stmt@ifFalse\n" +
              "0#__4:stmt@ifFalse,__4\n" +
              "0#assign_stmt:identifier,'=',exp,';'\n" +
              "0#if_stmt:if,exp,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
              "0#loop_stmt:do,'{','}',while,exp,';'\n" +
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
              "0#loop_stmt:while,exp,'{','}'\n" +
              "0#loop_stmt:while,exp,'{',__2,'}'\n" +
              "0#ret_stmt:return,exp,';'\n" +
              "0#stmt:assign_stmt\n" +
              "0#stmt:if_stmt\n" +
              "0#stmt:loop_stmt\n" +
              "0#stmt:ret_stmt\n" +
              "1#__4:stmt@ifFalse\n" +
              "1#__4:stmt@ifFalse,__4",
          },
        "0#__4:stmt@ifFalse\n0#__4:stmt@ifFalse,__4\n0#assign_stmt:identifier,'=',exp,';'\n0#if_stmt:if,exp,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{','}'\n0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n0#if_stmt:if,exp,'{',__3,'}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n0#loop_stmt:do,'{','}',while,exp,';'\n0#loop_stmt:do,'{',__2,'}',while,exp,';'\n0#loop_stmt:while,exp,'{','}'\n0#loop_stmt:while,exp,'{',__2,'}'\n0#ret_stmt:return,exp,';'\n0#stmt:assign_stmt\n0#stmt:if_stmt\n0#stmt:loop_stmt\n0#stmt:ret_stmt\n7#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n7#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'":
          {
            candidates: [
              "7#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              "7#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              "0#__4:stmt@ifFalse",
              "0#__4:stmt@ifFalse,__4",
              "0#stmt:assign_stmt",
              "0#stmt:ret_stmt",
              "0#stmt:if_stmt",
              "0#stmt:loop_stmt",
              "0#assign_stmt:identifier,'=',exp,';'",
              "0#ret_stmt:return,exp,';'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              "0#if_stmt:if,exp,'{',__3,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
              "0#if_stmt:if,exp,'{','}',else,'{','}'",
              "0#if_stmt:if,exp,'{','}'",
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'",
              "0#loop_stmt:do,'{','}',while,exp,';'",
              "0#loop_stmt:while,exp,'{',__2,'}'",
              "0#loop_stmt:while,exp,'{','}'",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "1#assign_stmt:identifier,'=',exp,';'",
              "'('": null,
              param: null,
              __1: null,
              "')'": null,
              "'{'": null,
              __2: null,
              "'}'": "8#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
              if:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#if_stmt:if,exp,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "1#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              exp: null,
              __3: null,
              else: null,
              __4: "8#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
              do:
                "1#loop_stmt:do,'{','}',while,exp,';'\n" +
                "1#loop_stmt:do,'{',__2,'}',while,exp,';'",
              while:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#loop_stmt:while,exp,'{','}'\n" +
                "1#loop_stmt:while,exp,'{',__2,'}'",
              "';'": null,
              assign_stmt: "1#stmt:assign_stmt",
              ret_stmt: "1#stmt:ret_stmt",
              if_stmt: "1#stmt:if_stmt",
              loop_stmt: "1#stmt:loop_stmt",
              "'='": null,
              return:
                "0#exp:'!',exp\n" +
                "0#exp:'-',exp\n" +
                "0#exp:exp,'!=',exp\n" +
                "0#exp:exp,'%',exp\n" +
                "0#exp:exp,'&&',exp\n" +
                "0#exp:exp,'*',exp\n" +
                "0#exp:exp,'+',exp\n" +
                "0#exp:exp,'-',exp\n" +
                "0#exp:exp,'/',exp\n" +
                "0#exp:exp,'<',exp\n" +
                "0#exp:exp,'<=',exp\n" +
                "0#exp:exp,'==',exp\n" +
                "0#exp:exp,'>',exp\n" +
                "0#exp:exp,'>=',exp\n" +
                "0#exp:exp,'||',exp\n" +
                "0#exp:identifier\n" +
                "0#exp:integer\n" +
                "1#ret_stmt:return,exp,';'",
              integer: null,
              "'+'": null,
              "'-'": null,
              "'*'": null,
              "'/'": null,
              "'%'": null,
              "'&&'": null,
              "'||'": null,
              "'!'": null,
              "'=='": null,
              "'!='": null,
              "'>'": null,
              "'<'": null,
              "'>='": null,
              "'<='": null,
              fn_def: null,
              "','": null,
              stmt:
                "0#__4:stmt@ifFalse\n" +
                "0#__4:stmt@ifFalse,__4\n" +
                "0#assign_stmt:identifier,'=',exp,';'\n" +
                "0#if_stmt:if,exp,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
                "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
                "0#loop_stmt:do,'{','}',while,exp,';'\n" +
                "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
                "0#loop_stmt:while,exp,'{','}'\n" +
                "0#loop_stmt:while,exp,'{',__2,'}'\n" +
                "0#ret_stmt:return,exp,';'\n" +
                "0#stmt:assign_stmt\n" +
                "0#stmt:if_stmt\n" +
                "0#stmt:loop_stmt\n" +
                "0#stmt:ret_stmt\n" +
                "1#__4:stmt@ifFalse\n" +
                "1#__4:stmt@ifFalse,__4",
            },
            id:
              "0#__4:stmt@ifFalse\n" +
              "0#__4:stmt@ifFalse,__4\n" +
              "0#assign_stmt:identifier,'=',exp,';'\n" +
              "0#if_stmt:if,exp,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{','}',else,'{',__4,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
              "0#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'\n" +
              "0#loop_stmt:do,'{','}',while,exp,';'\n" +
              "0#loop_stmt:do,'{',__2,'}',while,exp,';'\n" +
              "0#loop_stmt:while,exp,'{','}'\n" +
              "0#loop_stmt:while,exp,'{',__2,'}'\n" +
              "0#ret_stmt:return,exp,';'\n" +
              "0#stmt:assign_stmt\n" +
              "0#stmt:if_stmt\n" +
              "0#stmt:loop_stmt\n" +
              "0#stmt:ret_stmt\n" +
              "7#if_stmt:if,exp,'{',__3,'}',else,'{','}'\n" +
              "7#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          },
        "7#loop_stmt:do,'{',__2,'}',while,exp,';'": {
          candidates: ["7#loop_stmt:do,'{',__2,'}',while,exp,';'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "7#loop_stmt:do,'{',__2,'}',while,exp,';'",
        },
        "8#if_stmt:if,exp,'{','}',else,'{',__4,'}'": {
          candidates: ["8#if_stmt:if,exp,'{','}',else,'{',__4,'}'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "8#if_stmt:if,exp,'{','}',else,'{',__4,'}'",
        },
        "2#__4:stmt@ifFalse,__4": {
          candidates: ["2#__4:stmt@ifFalse,__4"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "2#__4:stmt@ifFalse,__4",
        },
        "8#if_stmt:if,exp,'{',__3,'}',else,'{','}'": {
          candidates: ["8#if_stmt:if,exp,'{',__3,'}',else,'{','}'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "8#if_stmt:if,exp,'{',__3,'}',else,'{','}'",
        },
        "8#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'": {
          candidates: ["8#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": "9#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "8#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
        },
        "9#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'": {
          candidates: ["9#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            "'('": null,
            param: null,
            __1: null,
            "')'": null,
            "'{'": null,
            __2: null,
            "'}'": null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            "';'": null,
            assign_stmt: null,
            ret_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            "'='": null,
            return: null,
            integer: null,
            "'+'": null,
            "'-'": null,
            "'*'": null,
            "'/'": null,
            "'%'": null,
            "'&&'": null,
            "'||'": null,
            "'!'": null,
            "'=='": null,
            "'!='": null,
            "'>'": null,
            "'<'": null,
            "'>='": null,
            "'<='": null,
            fn_def: null,
            "','": null,
            stmt: null,
          },
          id: "9#if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
        },
      },
      entryState:
        "0#__0:fn_def\n" +
        "0#__0:fn_def,__0\n" +
        "0#fn_def:fn,identifier,'(',')','{','}'\n" +
        "0#fn_def:fn,identifier,'(',')','{',__2,'}'\n" +
        "0#fn_def:fn,identifier,'(',param,')','{','}'\n" +
        "0#fn_def:fn,identifier,'(',param,')','{',__2,'}'\n" +
        "0#fn_def:fn,identifier,'(',param,__1,')','{','}'\n" +
        "0#fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'\n" +
        "0#fn_defs:__0",
      NTClosures: {
        fn_defs: [
          "fn_defs:__0",
          "__0:fn_def",
          "__0:fn_def,__0",
          "fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          "fn_def:fn,identifier,'(',param,__1,')','{','}'",
          "fn_def:fn,identifier,'(',param,')','{',__2,'}'",
          "fn_def:fn,identifier,'(',param,')','{','}'",
          "fn_def:fn,identifier,'(',')','{',__2,'}'",
          "fn_def:fn,identifier,'(',')','{','}'",
        ],
        fn_def: [
          "fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          "fn_def:fn,identifier,'(',param,__1,')','{','}'",
          "fn_def:fn,identifier,'(',param,')','{',__2,'}'",
          "fn_def:fn,identifier,'(',param,')','{','}'",
          "fn_def:fn,identifier,'(',')','{',__2,'}'",
          "fn_def:fn,identifier,'(',')','{','}'",
        ],
        param: ["param:identifier"],
        if_stmt: [
          "if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          "if_stmt:if,exp,'{',__3,'}',else,'{','}'",
          "if_stmt:if,exp,'{',__3,'}'",
          "if_stmt:if,exp,'{','}',else,'{',__4,'}'",
          "if_stmt:if,exp,'{','}',else,'{','}'",
          "if_stmt:if,exp,'{','}'",
        ],
        loop_stmt: [
          "loop_stmt:do,'{',__2,'}',while,exp,';'",
          "loop_stmt:do,'{','}',while,exp,';'",
          "loop_stmt:while,exp,'{',__2,'}'",
          "loop_stmt:while,exp,'{','}'",
        ],
        stmt: [
          "stmt:assign_stmt",
          "stmt:ret_stmt",
          "stmt:if_stmt",
          "stmt:loop_stmt",
          "assign_stmt:identifier,'=',exp,';'",
          "ret_stmt:return,exp,';'",
          "if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          "if_stmt:if,exp,'{',__3,'}',else,'{','}'",
          "if_stmt:if,exp,'{',__3,'}'",
          "if_stmt:if,exp,'{','}',else,'{',__4,'}'",
          "if_stmt:if,exp,'{','}',else,'{','}'",
          "if_stmt:if,exp,'{','}'",
          "loop_stmt:do,'{',__2,'}',while,exp,';'",
          "loop_stmt:do,'{','}',while,exp,';'",
          "loop_stmt:while,exp,'{',__2,'}'",
          "loop_stmt:while,exp,'{','}'",
        ],
        assign_stmt: ["assign_stmt:identifier,'=',exp,';'"],
        ret_stmt: ["ret_stmt:return,exp,';'"],
        exp: [
          "exp:integer",
          "exp:identifier",
          "exp:exp,'+',exp",
          "exp:exp,'-',exp",
          "exp:exp,'*',exp",
          "exp:exp,'/',exp",
          "exp:exp,'%',exp",
          "exp:'-',exp",
          "exp:exp,'&&',exp",
          "exp:exp,'||',exp",
          "exp:'!',exp",
          "exp:exp,'==',exp",
          "exp:exp,'!=',exp",
          "exp:exp,'>',exp",
          "exp:exp,'<',exp",
          "exp:exp,'>=',exp",
          "exp:exp,'<=',exp",
        ],
        __0: [
          "__0:fn_def",
          "__0:fn_def,__0",
          "fn_def:fn,identifier,'(',param,__1,')','{',__2,'}'",
          "fn_def:fn,identifier,'(',param,__1,')','{','}'",
          "fn_def:fn,identifier,'(',param,')','{',__2,'}'",
          "fn_def:fn,identifier,'(',param,')','{','}'",
          "fn_def:fn,identifier,'(',')','{',__2,'}'",
          "fn_def:fn,identifier,'(',')','{','}'",
        ],
        __1: ["__1:',',param", "__1:',',param,__1"],
        __2: [
          "__2:stmt",
          "__2:stmt,__2",
          "stmt:assign_stmt",
          "stmt:ret_stmt",
          "stmt:if_stmt",
          "stmt:loop_stmt",
          "assign_stmt:identifier,'=',exp,';'",
          "ret_stmt:return,exp,';'",
          "if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          "if_stmt:if,exp,'{',__3,'}',else,'{','}'",
          "if_stmt:if,exp,'{',__3,'}'",
          "if_stmt:if,exp,'{','}',else,'{',__4,'}'",
          "if_stmt:if,exp,'{','}',else,'{','}'",
          "if_stmt:if,exp,'{','}'",
          "loop_stmt:do,'{',__2,'}',while,exp,';'",
          "loop_stmt:do,'{','}',while,exp,';'",
          "loop_stmt:while,exp,'{',__2,'}'",
          "loop_stmt:while,exp,'{','}'",
        ],
        __3: [
          "__3:stmt@ifTrue",
          "__3:stmt@ifTrue,__3",
          "stmt:assign_stmt",
          "stmt:ret_stmt",
          "stmt:if_stmt",
          "stmt:loop_stmt",
          "assign_stmt:identifier,'=',exp,';'",
          "ret_stmt:return,exp,';'",
          "if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          "if_stmt:if,exp,'{',__3,'}',else,'{','}'",
          "if_stmt:if,exp,'{',__3,'}'",
          "if_stmt:if,exp,'{','}',else,'{',__4,'}'",
          "if_stmt:if,exp,'{','}',else,'{','}'",
          "if_stmt:if,exp,'{','}'",
          "loop_stmt:do,'{',__2,'}',while,exp,';'",
          "loop_stmt:do,'{','}',while,exp,';'",
          "loop_stmt:while,exp,'{',__2,'}'",
          "loop_stmt:while,exp,'{','}'",
        ],
        __4: [
          "__4:stmt@ifFalse",
          "__4:stmt@ifFalse,__4",
          "stmt:assign_stmt",
          "stmt:ret_stmt",
          "stmt:if_stmt",
          "stmt:loop_stmt",
          "assign_stmt:identifier,'=',exp,';'",
          "ret_stmt:return,exp,';'",
          "if_stmt:if,exp,'{',__3,'}',else,'{',__4,'}'",
          "if_stmt:if,exp,'{',__3,'}',else,'{','}'",
          "if_stmt:if,exp,'{',__3,'}'",
          "if_stmt:if,exp,'{','}',else,'{',__4,'}'",
          "if_stmt:if,exp,'{','}',else,'{','}'",
          "if_stmt:if,exp,'{','}'",
          "loop_stmt:do,'{',__2,'}',while,exp,';'",
          "loop_stmt:do,'{','}',while,exp,';'",
          "loop_stmt:while,exp,'{',__2,'}'",
          "loop_stmt:while,exp,'{','}'",
        ],
      },
      firstSets: {
        fn_defs: ["__0", "fn_def", "fn"],
        fn_def: ["fn"],
        param: ["identifier"],
        if_stmt: ["if"],
        loop_stmt: ["do", "while"],
        stmt: [
          "assign_stmt",
          "ret_stmt",
          "if_stmt",
          "loop_stmt",
          "identifier",
          "return",
          "if",
          "do",
          "while",
        ],
        assign_stmt: ["identifier"],
        ret_stmt: ["return"],
        exp: ["integer", "identifier", "exp", "'-'", "'!'"],
        __0: ["fn_def", "fn"],
        __1: ["','"],
        __2: [
          "stmt",
          "assign_stmt",
          "ret_stmt",
          "if_stmt",
          "loop_stmt",
          "identifier",
          "return",
          "if",
          "do",
          "while",
        ],
        __3: [
          "stmt@ifTrue",
          "assign_stmt",
          "ret_stmt",
          "if_stmt",
          "loop_stmt",
          "identifier",
          "return",
          "if",
          "do",
          "while",
        ],
        __4: [
          "stmt@ifFalse",
          "assign_stmt",
          "ret_stmt",
          "if_stmt",
          "loop_stmt",
          "identifier",
          "return",
          "if",
          "do",
          "while",
        ],
      },
      followSets: {
        fn_defs: [],
        fn_def: ["__0", "fn_def", "fn"],
        param: ["__1", "','", "')'"],
        if_stmt: [
          "__2",
          "stmt",
          "assign_stmt",
          "ret_stmt",
          "if_stmt",
          "loop_stmt",
          "identifier",
          "return",
          "if",
          "do",
          "while",
          "__3",
          "__4",
          "'}'",
        ],
        loop_stmt: [
          "__2",
          "stmt",
          "assign_stmt",
          "ret_stmt",
          "if_stmt",
          "loop_stmt",
          "identifier",
          "return",
          "if",
          "do",
          "while",
          "__3",
          "__4",
          "'}'",
        ],
        stmt: [
          "__2",
          "stmt",
          "assign_stmt",
          "ret_stmt",
          "if_stmt",
          "loop_stmt",
          "identifier",
          "return",
          "if",
          "do",
          "while",
          "__3",
          "__4",
          "'}'",
        ],
        assign_stmt: [
          "__2",
          "stmt",
          "assign_stmt",
          "ret_stmt",
          "if_stmt",
          "loop_stmt",
          "identifier",
          "return",
          "if",
          "do",
          "while",
          "__3",
          "__4",
          "'}'",
        ],
        ret_stmt: [
          "__2",
          "stmt",
          "assign_stmt",
          "ret_stmt",
          "if_stmt",
          "loop_stmt",
          "identifier",
          "return",
          "if",
          "do",
          "while",
          "__3",
          "__4",
          "'}'",
        ],
        exp: [
          "'{'",
          "';'",
          "'+'",
          "'-'",
          "'*'",
          "'/'",
          "'%'",
          "'&&'",
          "'||'",
          "'=='",
          "'!='",
          "'>'",
          "'<'",
          "'>='",
          "'<='",
        ],
        __0: [],
        __1: ["')'"],
        __2: ["'}'"],
        __3: ["'}'"],
        __4: ["'}'"],
        fn: ["identifier"],
        identifier: [
          "'('",
          "'='",
          "__1",
          "','",
          "')'",
          "'{'",
          "';'",
          "'+'",
          "'-'",
          "'*'",
          "'/'",
          "'%'",
          "'&&'",
          "'||'",
          "'=='",
          "'!='",
          "'>'",
          "'<'",
          "'>='",
          "'<='",
        ],
        "": [
          "param",
          "identifier",
          "'{'",
          "__2",
          "stmt",
          "assign_stmt",
          "ret_stmt",
          "if_stmt",
          "loop_stmt",
          "return",
          "if",
          "do",
          "while",
          "'}'",
          "')'",
          "__3",
          "else",
          "__4",
          "exp",
          "integer",
          "'-'",
          "'!'",
          "__0",
          "fn_def",
          "fn",
        ],
        if: ["exp", "integer", "identifier", "'-'", "'!'"],
        else: ["'{'"],
        do: ["'{'"],
        while: ["exp", "integer", "identifier", "'-'", "'!'"],
        return: ["exp", "integer", "identifier", "'-'", "'!'"],
        integer: [
          "'{'",
          "';'",
          "'+'",
          "'-'",
          "'*'",
          "'/'",
          "'%'",
          "'&&'",
          "'||'",
          "'=='",
          "'!='",
          "'>'",
          "'<'",
          "'>='",
          "'<='",
        ],
      },
      cascadeQueryPrefix: "__",
    },
  },
} as unknown as ELR.ExtractSerializableParserData<DT0ParserBuilder>;
// when using AdvancedBuilder, generated NTs will break the format of serialized parser data
// so we have to cast it manually
