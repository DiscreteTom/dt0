// generated by utils/serialize.ts

// comment all lines and uncomment the next line to re-generate the data
// export const data = undefined;

export const serialized = {
  hash: -1321550216,
  data: {
    dfa: {
      NTs: [
        "fn_defs",
        "fn_def",
        "param",
        "if_stmt",
        "loop_stmt",
        "incr_stmt",
        "decr_stmt",
        "stmt",
        "assign_stmt",
        "ret_stmt",
        "exp",
        "__0",
        "__1",
        "__2",
        "__3",
        "__4",
      ],
      entryNTs: ["fn_defs"],
      grammars: [
        {
          type: 1,
          kind: "__0",
          name: "__0",
          text: undefined,
          str: 'Grammar({ type: "NT", kind: "__0", name: "__0", text: undefined })',
          strWithName: "__0",
          strWithoutName: "__0",
          grammarStrWithName: "__0",
          grammarStrWithoutName: "__0",
        },
        {
          type: 0,
          kind: "fn",
          name: "fn",
          text: undefined,
          str: 'Grammar({ type: "T", kind: "fn", name: "fn", text: undefined })',
          strWithName: "fn",
          strWithoutName: "fn",
          grammarStrWithName: "fn",
          grammarStrWithoutName: "fn",
        },
        {
          type: 0,
          kind: "identifier",
          name: "identifier",
          text: undefined,
          str: 'Grammar({ type: "T", kind: "identifier", name: "identifier", text: undefined })',
          strWithName: "identifier",
          strWithoutName: "identifier",
          grammarStrWithName: "identifier",
          grammarStrWithoutName: "identifier",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "(",
          str: 'Grammar({ type: "T", kind: "", name: "", text: "(" })',
          strWithName: '<anonymous>: "("',
          strWithoutName: '<anonymous>: "("',
          grammarStrWithName: '"("',
          grammarStrWithoutName: '"("',
        },
        {
          type: 1,
          kind: "param",
          name: "param",
          text: undefined,
          str: 'Grammar({ type: "NT", kind: "param", name: "param", text: undefined })',
          strWithName: "param",
          strWithoutName: "param",
          grammarStrWithName: "param",
          grammarStrWithoutName: "param",
        },
        {
          type: 1,
          kind: "__1",
          name: "__1",
          text: undefined,
          str: 'Grammar({ type: "NT", kind: "__1", name: "__1", text: undefined })',
          strWithName: "__1",
          strWithoutName: "__1",
          grammarStrWithName: "__1",
          grammarStrWithoutName: "__1",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: ")",
          str: 'Grammar({ type: "T", kind: "", name: "", text: ")" })',
          strWithName: '<anonymous>: ")"',
          strWithoutName: '<anonymous>: ")"',
          grammarStrWithName: '")"',
          grammarStrWithoutName: '")"',
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "{",
          str: 'Grammar({ type: "T", kind: "", name: "", text: "{" })',
          strWithName: '<anonymous>: "{"',
          strWithoutName: '<anonymous>: "{"',
          grammarStrWithName: '"{"',
          grammarStrWithoutName: '"{"',
        },
        {
          type: 1,
          kind: "__2",
          name: "__2",
          text: undefined,
          str: 'Grammar({ type: "NT", kind: "__2", name: "__2", text: undefined })',
          strWithName: "__2",
          strWithoutName: "__2",
          grammarStrWithName: "__2",
          grammarStrWithoutName: "__2",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "}",
          str: 'Grammar({ type: "T", kind: "", name: "", text: "}" })',
          strWithName: '<anonymous>: "}"',
          strWithoutName: '<anonymous>: "}"',
          grammarStrWithName: '"}"',
          grammarStrWithoutName: '"}"',
        },
        {
          type: 0,
          kind: "if",
          name: "if",
          text: undefined,
          str: 'Grammar({ type: "T", kind: "if", name: "if", text: undefined })',
          strWithName: "if",
          strWithoutName: "if",
          grammarStrWithName: "if",
          grammarStrWithoutName: "if",
        },
        {
          type: 1,
          kind: "exp",
          name: "exp",
          text: undefined,
          str: 'Grammar({ type: "NT", kind: "exp", name: "exp", text: undefined })',
          strWithName: "exp",
          strWithoutName: "exp",
          grammarStrWithName: "exp",
          grammarStrWithoutName: "exp",
        },
        {
          type: 1,
          kind: "__3",
          name: "__3",
          text: undefined,
          str: 'Grammar({ type: "NT", kind: "__3", name: "__3", text: undefined })',
          strWithName: "__3",
          strWithoutName: "__3",
          grammarStrWithName: "__3",
          grammarStrWithoutName: "__3",
        },
        {
          type: 0,
          kind: "else",
          name: "else",
          text: undefined,
          str: 'Grammar({ type: "T", kind: "else", name: "else", text: undefined })',
          strWithName: "else",
          strWithoutName: "else",
          grammarStrWithName: "else",
          grammarStrWithoutName: "else",
        },
        {
          type: 1,
          kind: "__4",
          name: "__4",
          text: undefined,
          str: 'Grammar({ type: "NT", kind: "__4", name: "__4", text: undefined })',
          strWithName: "__4",
          strWithoutName: "__4",
          grammarStrWithName: "__4",
          grammarStrWithoutName: "__4",
        },
        {
          type: 0,
          kind: "do",
          name: "do",
          text: undefined,
          str: 'Grammar({ type: "T", kind: "do", name: "do", text: undefined })',
          strWithName: "do",
          strWithoutName: "do",
          grammarStrWithName: "do",
          grammarStrWithoutName: "do",
        },
        {
          type: 0,
          kind: "while",
          name: "while",
          text: undefined,
          str: 'Grammar({ type: "T", kind: "while", name: "while", text: undefined })',
          strWithName: "while",
          strWithoutName: "while",
          grammarStrWithName: "while",
          grammarStrWithoutName: "while",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: ";",
          str: 'Grammar({ type: "T", kind: "", name: "", text: ";" })',
          strWithName: '<anonymous>: ";"',
          strWithoutName: '<anonymous>: ";"',
          grammarStrWithName: '";"',
          grammarStrWithoutName: '";"',
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "++",
          str: 'Grammar({ type: "T", kind: "", name: "", text: "++" })',
          strWithName: '<anonymous>: "++"',
          strWithoutName: '<anonymous>: "++"',
          grammarStrWithName: '"++"',
          grammarStrWithoutName: '"++"',
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "--",
          str: 'Grammar({ type: "T", kind: "", name: "", text: "--" })',
          strWithName: '<anonymous>: "--"',
          strWithoutName: '<anonymous>: "--"',
          grammarStrWithName: '"--"',
          grammarStrWithoutName: '"--"',
        },
        {
          type: 1,
          kind: "assign_stmt",
          name: "assign_stmt",
          text: undefined,
          str: 'Grammar({ type: "NT", kind: "assign_stmt", name: "assign_stmt", text: undefined })',
          strWithName: "assign_stmt",
          strWithoutName: "assign_stmt",
          grammarStrWithName: "assign_stmt",
          grammarStrWithoutName: "assign_stmt",
        },
        {
          type: 1,
          kind: "ret_stmt",
          name: "ret_stmt",
          text: undefined,
          str: 'Grammar({ type: "NT", kind: "ret_stmt", name: "ret_stmt", text: undefined })',
          strWithName: "ret_stmt",
          strWithoutName: "ret_stmt",
          grammarStrWithName: "ret_stmt",
          grammarStrWithoutName: "ret_stmt",
        },
        {
          type: 1,
          kind: "incr_stmt",
          name: "incr_stmt",
          text: undefined,
          str: 'Grammar({ type: "NT", kind: "incr_stmt", name: "incr_stmt", text: undefined })',
          strWithName: "incr_stmt",
          strWithoutName: "incr_stmt",
          grammarStrWithName: "incr_stmt",
          grammarStrWithoutName: "incr_stmt",
        },
        {
          type: 1,
          kind: "decr_stmt",
          name: "decr_stmt",
          text: undefined,
          str: 'Grammar({ type: "NT", kind: "decr_stmt", name: "decr_stmt", text: undefined })',
          strWithName: "decr_stmt",
          strWithoutName: "decr_stmt",
          grammarStrWithName: "decr_stmt",
          grammarStrWithoutName: "decr_stmt",
        },
        {
          type: 1,
          kind: "if_stmt",
          name: "if_stmt",
          text: undefined,
          str: 'Grammar({ type: "NT", kind: "if_stmt", name: "if_stmt", text: undefined })',
          strWithName: "if_stmt",
          strWithoutName: "if_stmt",
          grammarStrWithName: "if_stmt",
          grammarStrWithoutName: "if_stmt",
        },
        {
          type: 1,
          kind: "loop_stmt",
          name: "loop_stmt",
          text: undefined,
          str: 'Grammar({ type: "NT", kind: "loop_stmt", name: "loop_stmt", text: undefined })',
          strWithName: "loop_stmt",
          strWithoutName: "loop_stmt",
          grammarStrWithName: "loop_stmt",
          grammarStrWithoutName: "loop_stmt",
        },
        {
          type: 0,
          kind: "let",
          name: "let",
          text: undefined,
          str: 'Grammar({ type: "T", kind: "let", name: "let", text: undefined })',
          strWithName: "let",
          strWithoutName: "let",
          grammarStrWithName: "let",
          grammarStrWithoutName: "let",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "=",
          str: 'Grammar({ type: "T", kind: "", name: "", text: "=" })',
          strWithName: '<anonymous>: "="',
          strWithoutName: '<anonymous>: "="',
          grammarStrWithName: '"="',
          grammarStrWithoutName: '"="',
        },
        {
          type: 0,
          kind: "return",
          name: "return",
          text: undefined,
          str: 'Grammar({ type: "T", kind: "return", name: "return", text: undefined })',
          strWithName: "return",
          strWithoutName: "return",
          grammarStrWithName: "return",
          grammarStrWithoutName: "return",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "+",
          str: 'Grammar({ type: "T", kind: "", name: "", text: "+" })',
          strWithName: '<anonymous>: "+"',
          strWithoutName: '<anonymous>: "+"',
          grammarStrWithName: '"+"',
          grammarStrWithoutName: '"+"',
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "-",
          str: 'Grammar({ type: "T", kind: "", name: "", text: "-" })',
          strWithName: '<anonymous>: "-"',
          strWithoutName: '<anonymous>: "-"',
          grammarStrWithName: '"-"',
          grammarStrWithoutName: '"-"',
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "*",
          str: 'Grammar({ type: "T", kind: "", name: "", text: "*" })',
          strWithName: '<anonymous>: "*"',
          strWithoutName: '<anonymous>: "*"',
          grammarStrWithName: '"*"',
          grammarStrWithoutName: '"*"',
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "/",
          str: 'Grammar({ type: "T", kind: "", name: "", text: "/" })',
          strWithName: '<anonymous>: "/"',
          strWithoutName: '<anonymous>: "/"',
          grammarStrWithName: '"/"',
          grammarStrWithoutName: '"/"',
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "%",
          str: 'Grammar({ type: "T", kind: "", name: "", text: "%" })',
          strWithName: '<anonymous>: "%"',
          strWithoutName: '<anonymous>: "%"',
          grammarStrWithName: '"%"',
          grammarStrWithoutName: '"%"',
        },
        {
          type: 0,
          kind: "integer",
          name: "integer",
          text: undefined,
          str: 'Grammar({ type: "T", kind: "integer", name: "integer", text: undefined })',
          strWithName: "integer",
          strWithoutName: "integer",
          grammarStrWithName: "integer",
          grammarStrWithoutName: "integer",
        },
        {
          type: 1,
          kind: "fn_def",
          name: "fn_def",
          text: undefined,
          str: 'Grammar({ type: "NT", kind: "fn_def", name: "fn_def", text: undefined })',
          strWithName: "fn_def",
          strWithoutName: "fn_def",
          grammarStrWithName: "fn_def",
          grammarStrWithoutName: "fn_def",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: ",",
          str: 'Grammar({ type: "T", kind: "", name: "", text: "," })',
          strWithName: '<anonymous>: ","',
          strWithoutName: '<anonymous>: ","',
          grammarStrWithName: '","',
          grammarStrWithoutName: '","',
        },
        {
          type: 1,
          kind: "stmt",
          name: "stmt",
          text: undefined,
          str: 'Grammar({ type: "NT", kind: "stmt", name: "stmt", text: undefined })',
          strWithName: "stmt",
          strWithoutName: "stmt",
          grammarStrWithName: "stmt",
          grammarStrWithoutName: "stmt",
        },
        {
          type: 1,
          kind: "stmt",
          name: "ifTrue",
          text: undefined,
          str: 'Grammar({ type: "NT", kind: "stmt", name: "ifTrue", text: undefined })',
          strWithName: "stmt@ifTrue",
          strWithoutName: "stmt",
          grammarStrWithName: "stmt@ifTrue",
          grammarStrWithoutName: "stmt",
        },
        {
          type: 1,
          kind: "stmt",
          name: "ifFalse",
          text: undefined,
          str: 'Grammar({ type: "NT", kind: "stmt", name: "ifFalse", text: undefined })',
          strWithName: "stmt@ifFalse",
          strWithoutName: "stmt",
          grammarStrWithName: "stmt@ifFalse",
          grammarStrWithoutName: "stmt",
        },
        {
          type: 1,
          kind: "fn_defs",
          name: "fn_defs",
          text: undefined,
          str: 'Grammar({ type: "NT", kind: "fn_defs", name: "fn_defs", text: undefined })',
          strWithName: "fn_defs",
          strWithoutName: "fn_defs",
          grammarStrWithName: "fn_defs",
          grammarStrWithoutName: "fn_defs",
        },
      ],
      grammarRules: [
        {
          NT: "fn_defs",
          rule: ["__0"],
          conflicts: [],
          resolved: [],
          str: "{ fn_defs: `__0` }",
          strWithGrammarName: "{ fn_defs: `__0` }",
          strWithoutGrammarName: "{ fn_defs: `__0` }",
          hydrationId: 0,
        },
        {
          NT: "fn_def",
          rule: [
            "fn",
            "identifier",
            '"("',
            "param",
            "__1",
            '")"',
            '"{"',
            "__2",
            '"}"',
          ],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule:
                '{ fn_def: `fn identifier "(" param __1 ")" "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule:
                '{ fn_def: `fn identifier "(" param ")" "{" __2 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ fn_def: `fn identifier "(" param ")" "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ fn_def: `fn identifier "(" ")" "{" __2 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ fn_def: `fn identifier "(" ")" "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: '{ fn_def: `fn identifier "(" param __1 ")" "{" __2 "}"` }',
          strWithGrammarName:
            '{ fn_def: `fn identifier "(" param __1 ")" "{" __2 "}"` }',
          strWithoutGrammarName:
            '{ fn_def: `fn identifier "(" param __1 ")" "{" __2 "}"` }',
          hydrationId: 1,
        },
        {
          NT: "fn_def",
          rule: [
            "fn",
            "identifier",
            '"("',
            "param",
            "__1",
            '")"',
            '"{"',
            '"}"',
          ],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule:
                '{ fn_def: `fn identifier "(" param __1 ")" "{" __2 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule:
                '{ fn_def: `fn identifier "(" param ")" "{" __2 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ fn_def: `fn identifier "(" param ")" "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ fn_def: `fn identifier "(" ")" "{" __2 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ fn_def: `fn identifier "(" ")" "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: '{ fn_def: `fn identifier "(" param __1 ")" "{" "}"` }',
          strWithGrammarName:
            '{ fn_def: `fn identifier "(" param __1 ")" "{" "}"` }',
          strWithoutGrammarName:
            '{ fn_def: `fn identifier "(" param __1 ")" "{" "}"` }',
          hydrationId: 1,
        },
        {
          NT: "fn_def",
          rule: [
            "fn",
            "identifier",
            '"("',
            "param",
            '")"',
            '"{"',
            "__2",
            '"}"',
          ],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule:
                '{ fn_def: `fn identifier "(" param __1 ")" "{" __2 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule:
                '{ fn_def: `fn identifier "(" param __1 ")" "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ fn_def: `fn identifier "(" param ")" "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ fn_def: `fn identifier "(" ")" "{" __2 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ fn_def: `fn identifier "(" ")" "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: '{ fn_def: `fn identifier "(" param ")" "{" __2 "}"` }',
          strWithGrammarName:
            '{ fn_def: `fn identifier "(" param ")" "{" __2 "}"` }',
          strWithoutGrammarName:
            '{ fn_def: `fn identifier "(" param ")" "{" __2 "}"` }',
          hydrationId: 1,
        },
        {
          NT: "fn_def",
          rule: ["fn", "identifier", '"("', "param", '")"', '"{"', '"}"'],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule:
                '{ fn_def: `fn identifier "(" param __1 ")" "{" __2 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule:
                '{ fn_def: `fn identifier "(" param __1 ")" "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule:
                '{ fn_def: `fn identifier "(" param ")" "{" __2 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ fn_def: `fn identifier "(" ")" "{" __2 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ fn_def: `fn identifier "(" ")" "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: '{ fn_def: `fn identifier "(" param ")" "{" "}"` }',
          strWithGrammarName:
            '{ fn_def: `fn identifier "(" param ")" "{" "}"` }',
          strWithoutGrammarName:
            '{ fn_def: `fn identifier "(" param ")" "{" "}"` }',
          hydrationId: 1,
        },
        {
          NT: "fn_def",
          rule: ["fn", "identifier", '"("', '")"', '"{"', "__2", '"}"'],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule:
                '{ fn_def: `fn identifier "(" param __1 ")" "{" __2 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule:
                '{ fn_def: `fn identifier "(" param __1 ")" "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule:
                '{ fn_def: `fn identifier "(" param ")" "{" __2 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ fn_def: `fn identifier "(" param ")" "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ fn_def: `fn identifier "(" ")" "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: '{ fn_def: `fn identifier "(" ")" "{" __2 "}"` }',
          strWithGrammarName: '{ fn_def: `fn identifier "(" ")" "{" __2 "}"` }',
          strWithoutGrammarName:
            '{ fn_def: `fn identifier "(" ")" "{" __2 "}"` }',
          hydrationId: 1,
        },
        {
          NT: "fn_def",
          rule: ["fn", "identifier", '"("', '")"', '"{"', '"}"'],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule:
                '{ fn_def: `fn identifier "(" param __1 ")" "{" __2 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule:
                '{ fn_def: `fn identifier "(" param __1 ")" "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule:
                '{ fn_def: `fn identifier "(" param ")" "{" __2 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ fn_def: `fn identifier "(" param ")" "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ fn_def: `fn identifier "(" ")" "{" __2 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: '{ fn_def: `fn identifier "(" ")" "{" "}"` }',
          strWithGrammarName: '{ fn_def: `fn identifier "(" ")" "{" "}"` }',
          strWithoutGrammarName: '{ fn_def: `fn identifier "(" ")" "{" "}"` }',
          hydrationId: 1,
        },
        {
          NT: "param",
          rule: ["identifier"],
          conflicts: [],
          resolved: [],
          str: "{ param: `identifier` }",
          strWithGrammarName: "{ param: `identifier` }",
          strWithoutGrammarName: "{ param: `identifier` }",
          hydrationId: 2,
        },
        {
          NT: "if_stmt",
          rule: ["if", "exp", '"{"', "__3", '"}"', "else", '"{"', "__4", '"}"'],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" __3 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" "}" else "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
          strWithGrammarName:
            '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
          strWithoutGrammarName:
            '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
          hydrationId: 3,
        },
        {
          NT: "if_stmt",
          rule: ["if", "exp", '"{"', "__3", '"}"', "else", '"{"', '"}"'],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" __3 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" "}" else "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
          strWithGrammarName: '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
          strWithoutGrammarName:
            '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
          hydrationId: 3,
        },
        {
          NT: "if_stmt",
          rule: ["if", "exp", '"{"', "__3", '"}"'],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" "}" else "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: '{ if_stmt: `if exp "{" __3 "}"` }',
          strWithGrammarName: '{ if_stmt: `if exp "{" __3 "}"` }',
          strWithoutGrammarName: '{ if_stmt: `if exp "{" __3 "}"` }',
          hydrationId: 3,
        },
        {
          NT: "if_stmt",
          rule: ["if", "exp", '"{"', '"}"', "else", '"{"', "__4", '"}"'],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" __3 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" "}" else "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
          strWithGrammarName: '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
          strWithoutGrammarName:
            '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
          hydrationId: 3,
        },
        {
          NT: "if_stmt",
          rule: ["if", "exp", '"{"', '"}"', "else", '"{"', '"}"'],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" __3 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: '{ if_stmt: `if exp "{" "}" else "{" "}"` }',
          strWithGrammarName: '{ if_stmt: `if exp "{" "}" else "{" "}"` }',
          strWithoutGrammarName: '{ if_stmt: `if exp "{" "}" else "{" "}"` }',
          hydrationId: 3,
        },
        {
          NT: "if_stmt",
          rule: ["if", "exp", '"{"', '"}"'],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" __3 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ if_stmt: `if exp "{" "}" else "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: '{ if_stmt: `if exp "{" "}"` }',
          strWithGrammarName: '{ if_stmt: `if exp "{" "}"` }',
          strWithoutGrammarName: '{ if_stmt: `if exp "{" "}"` }',
          hydrationId: 3,
        },
        {
          NT: "loop_stmt",
          rule: ["do", '"{"', "__2", '"}"', "while", "exp", '";"'],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: '{ loop_stmt: `do "{" "}" while exp ";"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: '{ loop_stmt: `do "{" __2 "}" while exp ";"` }',
          strWithGrammarName: '{ loop_stmt: `do "{" __2 "}" while exp ";"` }',
          strWithoutGrammarName:
            '{ loop_stmt: `do "{" __2 "}" while exp ";"` }',
          hydrationId: 4,
        },
        {
          NT: "loop_stmt",
          rule: ["do", '"{"', '"}"', "while", "exp", '";"'],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: '{ loop_stmt: `do "{" __2 "}" while exp ";"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: '{ loop_stmt: `do "{" "}" while exp ";"` }',
          strWithGrammarName: '{ loop_stmt: `do "{" "}" while exp ";"` }',
          strWithoutGrammarName: '{ loop_stmt: `do "{" "}" while exp ";"` }',
          hydrationId: 4,
        },
        {
          NT: "loop_stmt",
          rule: ["while", "exp", '"{"', "__2", '"}"'],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: '{ loop_stmt: `while exp "{" "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: '{ loop_stmt: `while exp "{" __2 "}"` }',
          strWithGrammarName: '{ loop_stmt: `while exp "{" __2 "}"` }',
          strWithoutGrammarName: '{ loop_stmt: `while exp "{" __2 "}"` }',
          hydrationId: 5,
        },
        {
          NT: "loop_stmt",
          rule: ["while", "exp", '"{"', '"}"'],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: '{ loop_stmt: `while exp "{" __2 "}"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: '{ loop_stmt: `while exp "{" "}"` }',
          strWithGrammarName: '{ loop_stmt: `while exp "{" "}"` }',
          strWithoutGrammarName: '{ loop_stmt: `while exp "{" "}"` }',
          hydrationId: 5,
        },
        {
          NT: "incr_stmt",
          rule: ['"++"', "identifier", '";"'],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: '{ incr_stmt: `identifier "++" ";"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: '{ incr_stmt: `"++" identifier ";"` }',
          strWithGrammarName: '{ incr_stmt: `"++" identifier ";"` }',
          strWithoutGrammarName: '{ incr_stmt: `"++" identifier ";"` }',
          hydrationId: 6,
        },
        {
          NT: "incr_stmt",
          rule: ["identifier", '"++"', '";"'],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: '{ incr_stmt: `"++" identifier ";"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: '{ incr_stmt: `identifier "++" ";"` }',
          strWithGrammarName: '{ incr_stmt: `identifier "++" ";"` }',
          strWithoutGrammarName: '{ incr_stmt: `identifier "++" ";"` }',
          hydrationId: 6,
        },
        {
          NT: "decr_stmt",
          rule: ['"--"', "identifier", '";"'],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: '{ decr_stmt: `identifier "--" ";"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: '{ decr_stmt: `"--" identifier ";"` }',
          strWithGrammarName: '{ decr_stmt: `"--" identifier ";"` }',
          strWithoutGrammarName: '{ decr_stmt: `"--" identifier ";"` }',
          hydrationId: 7,
        },
        {
          NT: "decr_stmt",
          rule: ["identifier", '"--"', '";"'],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: '{ decr_stmt: `"--" identifier ";"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: '{ decr_stmt: `identifier "--" ";"` }',
          strWithGrammarName: '{ decr_stmt: `identifier "--" ";"` }',
          strWithoutGrammarName: '{ decr_stmt: `identifier "--" ";"` }',
          hydrationId: 7,
        },
        {
          NT: "stmt",
          rule: ["assign_stmt"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "{ stmt: `ret_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `incr_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `decr_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `if_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `loop_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: "{ stmt: `assign_stmt` }",
          strWithGrammarName: "{ stmt: `assign_stmt` }",
          strWithoutGrammarName: "{ stmt: `assign_stmt` }",
          hydrationId: 8,
        },
        {
          NT: "stmt",
          rule: ["ret_stmt"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "{ stmt: `assign_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `incr_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `decr_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `if_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `loop_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: "{ stmt: `ret_stmt` }",
          strWithGrammarName: "{ stmt: `ret_stmt` }",
          strWithoutGrammarName: "{ stmt: `ret_stmt` }",
          hydrationId: 8,
        },
        {
          NT: "stmt",
          rule: ["incr_stmt"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "{ stmt: `assign_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `ret_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `decr_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `if_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `loop_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: "{ stmt: `incr_stmt` }",
          strWithGrammarName: "{ stmt: `incr_stmt` }",
          strWithoutGrammarName: "{ stmt: `incr_stmt` }",
          hydrationId: 8,
        },
        {
          NT: "stmt",
          rule: ["decr_stmt"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "{ stmt: `assign_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `ret_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `incr_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `if_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `loop_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: "{ stmt: `decr_stmt` }",
          strWithGrammarName: "{ stmt: `decr_stmt` }",
          strWithoutGrammarName: "{ stmt: `decr_stmt` }",
          hydrationId: 8,
        },
        {
          NT: "stmt",
          rule: ["if_stmt"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "{ stmt: `assign_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `ret_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `incr_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `decr_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `loop_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: "{ stmt: `if_stmt` }",
          strWithGrammarName: "{ stmt: `if_stmt` }",
          strWithoutGrammarName: "{ stmt: `if_stmt` }",
          hydrationId: 8,
        },
        {
          NT: "stmt",
          rule: ["loop_stmt"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "{ stmt: `assign_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `ret_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `incr_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `decr_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ stmt: `if_stmt` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: "{ stmt: `loop_stmt` }",
          strWithGrammarName: "{ stmt: `loop_stmt` }",
          strWithoutGrammarName: "{ stmt: `loop_stmt` }",
          hydrationId: 8,
        },
        {
          NT: "assign_stmt",
          rule: ["let", "identifier", '"="', "exp", '";"'],
          conflicts: [],
          resolved: [],
          str: '{ assign_stmt: `let identifier "=" exp ";"` }',
          strWithGrammarName: '{ assign_stmt: `let identifier "=" exp ";"` }',
          strWithoutGrammarName:
            '{ assign_stmt: `let identifier "=" exp ";"` }',
          hydrationId: 9,
        },
        {
          NT: "ret_stmt",
          rule: ["return", "exp", '";"'],
          conflicts: [],
          resolved: [],
          str: '{ ret_stmt: `return exp ";"` }',
          strWithGrammarName: '{ ret_stmt: `return exp ";"` }',
          strWithoutGrammarName: '{ ret_stmt: `return exp ";"` }',
          hydrationId: 10,
        },
        {
          NT: "exp",
          rule: ["exp", '"+"', "exp"],
          conflicts: [
            {
              type: 0,
              anotherRule: '{ exp: `exp "+" exp` }',
              next: ['"+"'],
              handleEnd: false,
              resolvers: [8],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "-" exp` }',
              next: ['"-"'],
              handleEnd: false,
              resolvers: [9, 11],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "*" exp` }',
              next: ['"*"'],
              handleEnd: false,
              resolvers: [2],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "/" exp` }',
              next: ['"/"'],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "%" exp` }',
              next: ['"%"'],
              handleEnd: false,
              resolvers: [6],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: '{ exp: `"-" exp` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `"-" exp` }',
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "*" exp` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "*" exp` }',
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "/" exp` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "/" exp` }',
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "%" exp` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "%" exp` }',
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "+" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "-" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "-" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "-" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "-" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          str: '{ exp: `exp "+" exp` }',
          strWithGrammarName: '{ exp: `exp "+" exp` }',
          strWithoutGrammarName: '{ exp: `exp "+" exp` }',
          hydrationId: 11,
        },
        {
          NT: "exp",
          rule: ["exp", '"-"', "exp"],
          conflicts: [
            {
              type: 0,
              anotherRule: '{ exp: `exp "+" exp` }',
              next: ['"+"'],
              handleEnd: false,
              resolvers: [8, 10],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "-" exp` }',
              next: ['"-"'],
              handleEnd: false,
              resolvers: [12],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "*" exp` }',
              next: ['"*"'],
              handleEnd: false,
              resolvers: [2],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "/" exp` }',
              next: ['"/"'],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "%" exp` }',
              next: ['"%"'],
              handleEnd: false,
              resolvers: [6],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: '{ exp: `"-" exp` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `"-" exp` }',
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "*" exp` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "*" exp` }',
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "/" exp` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "/" exp` }',
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "%" exp` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "%" exp` }',
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "+" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "+" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "+" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "+" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "-" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          str: '{ exp: `exp "-" exp` }',
          strWithGrammarName: '{ exp: `exp "-" exp` }',
          strWithoutGrammarName: '{ exp: `exp "-" exp` }',
          hydrationId: 12,
        },
        {
          NT: "exp",
          rule: ["exp", '"*"', "exp"],
          conflicts: [
            {
              type: 0,
              anotherRule: '{ exp: `exp "+" exp` }',
              next: ['"+"'],
              handleEnd: false,
              resolvers: [2],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "-" exp` }',
              next: ['"-"'],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "*" exp` }',
              next: ['"*"'],
              handleEnd: false,
              resolvers: [6],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "/" exp` }',
              next: ['"/"'],
              handleEnd: false,
              resolvers: [7, 11],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "%" exp` }',
              next: ['"%"'],
              handleEnd: false,
              resolvers: [9, 13],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: '{ exp: `"-" exp` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `"-" exp` }',
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "+" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "+" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "-" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "-" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "*" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "/" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "/" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "%" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "%" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "/" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "/" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "%" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "%" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          str: '{ exp: `exp "*" exp` }',
          strWithGrammarName: '{ exp: `exp "*" exp` }',
          strWithoutGrammarName: '{ exp: `exp "*" exp` }',
          hydrationId: 13,
        },
        {
          NT: "exp",
          rule: ["exp", '"/"', "exp"],
          conflicts: [
            {
              type: 0,
              anotherRule: '{ exp: `exp "+" exp` }',
              next: ['"+"'],
              handleEnd: false,
              resolvers: [2],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "-" exp` }',
              next: ['"-"'],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "*" exp` }',
              next: ['"*"'],
              handleEnd: false,
              resolvers: [6, 8],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "/" exp` }',
              next: ['"/"'],
              handleEnd: false,
              resolvers: [10],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "%" exp` }',
              next: ['"%"'],
              handleEnd: false,
              resolvers: [11, 13],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: '{ exp: `"-" exp` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `"-" exp` }',
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "+" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "+" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "-" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "-" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "*" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "*" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "*" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "*" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "/" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "%" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "%" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "%" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "%" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          str: '{ exp: `exp "/" exp` }',
          strWithGrammarName: '{ exp: `exp "/" exp` }',
          strWithoutGrammarName: '{ exp: `exp "/" exp` }',
          hydrationId: 14,
        },
        {
          NT: "exp",
          rule: ["exp", '"%"', "exp"],
          conflicts: [
            {
              type: 0,
              anotherRule: '{ exp: `exp "+" exp` }',
              next: ['"+"'],
              handleEnd: false,
              resolvers: [2],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "-" exp` }',
              next: ['"-"'],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "*" exp` }',
              next: ['"*"'],
              handleEnd: false,
              resolvers: [6, 10],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "/" exp` }',
              next: ['"/"'],
              handleEnd: false,
              resolvers: [8, 12],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "%" exp` }',
              next: ['"%"'],
              handleEnd: false,
              resolvers: [14],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: '{ exp: `"-" exp` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `"-" exp` }',
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "+" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "+" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "-" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "-" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "*" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "*" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "/" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "/" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "*" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "*" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "/" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "/" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "%" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          str: '{ exp: `exp "%" exp` }',
          strWithGrammarName: '{ exp: `exp "%" exp` }',
          strWithoutGrammarName: '{ exp: `exp "%" exp` }',
          hydrationId: 15,
        },
        {
          NT: "exp",
          rule: ['"-"', "exp"],
          conflicts: [
            {
              type: 0,
              anotherRule: '{ exp: `exp "+" exp` }',
              next: ['"+"'],
              handleEnd: false,
              resolvers: [6],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "-" exp` }',
              next: ['"-"'],
              handleEnd: false,
              resolvers: [8],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "*" exp` }',
              next: ['"*"'],
              handleEnd: false,
              resolvers: [0],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "/" exp` }',
              next: ['"/"'],
              handleEnd: false,
              resolvers: [2],
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "%" exp` }',
              next: ['"%"'],
              handleEnd: false,
              resolvers: [4],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: '{ exp: `exp "*" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "*" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "/" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "/" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "%" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "%" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "+" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "+" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `exp "-" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ exp: `exp "-" exp` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ exp: `"-" exp` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          str: '{ exp: `"-" exp` }',
          strWithGrammarName: '{ exp: `"-" exp` }',
          strWithoutGrammarName: '{ exp: `"-" exp` }',
          hydrationId: 16,
        },
        {
          NT: "exp",
          rule: ["integer"],
          conflicts: [],
          resolved: [],
          str: "{ exp: `integer` }",
          strWithGrammarName: "{ exp: `integer` }",
          strWithoutGrammarName: "{ exp: `integer` }",
          hydrationId: 17,
        },
        {
          NT: "exp",
          rule: ["identifier"],
          conflicts: [],
          resolved: [],
          str: "{ exp: `identifier` }",
          strWithGrammarName: "{ exp: `identifier` }",
          strWithoutGrammarName: "{ exp: `identifier` }",
          hydrationId: 18,
        },
        {
          NT: "__0",
          rule: ["fn_def"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "{ __0: `fn_def __0` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: "{ __0: `fn_def` }",
          strWithGrammarName: "{ __0: `fn_def` }",
          strWithoutGrammarName: "{ __0: `fn_def` }",
          hydrationId: 199,
        },
        {
          NT: "__0",
          rule: ["fn_def", "__0"],
          conflicts: [],
          resolved: [],
          str: "{ __0: `fn_def __0` }",
          strWithGrammarName: "{ __0: `fn_def __0` }",
          strWithoutGrammarName: "{ __0: `fn_def __0` }",
          hydrationId: 199,
        },
        {
          NT: "__1",
          rule: ['","', "param"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: '{ __1: `"," param __1` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: '{ __1: `"," param` }',
          strWithGrammarName: '{ __1: `"," param` }',
          strWithoutGrammarName: '{ __1: `"," param` }',
          hydrationId: 200,
        },
        {
          NT: "__1",
          rule: ['","', "param", "__1"],
          conflicts: [],
          resolved: [],
          str: '{ __1: `"," param __1` }',
          strWithGrammarName: '{ __1: `"," param __1` }',
          strWithoutGrammarName: '{ __1: `"," param __1` }',
          hydrationId: 200,
        },
        {
          NT: "__2",
          rule: ["stmt"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "{ __2: `stmt __2` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: "{ __2: `stmt` }",
          strWithGrammarName: "{ __2: `stmt` }",
          strWithoutGrammarName: "{ __2: `stmt` }",
          hydrationId: 201,
        },
        {
          NT: "__2",
          rule: ["stmt", "__2"],
          conflicts: [],
          resolved: [],
          str: "{ __2: `stmt __2` }",
          strWithGrammarName: "{ __2: `stmt __2` }",
          strWithoutGrammarName: "{ __2: `stmt __2` }",
          hydrationId: 201,
        },
        {
          NT: "__3",
          rule: ["stmt@ifTrue"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "{ __3: `stmt@ifTrue __3` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: "{ __3: `stmt@ifTrue` }",
          strWithGrammarName: "{ __3: `stmt@ifTrue` }",
          strWithoutGrammarName: "{ __3: `stmt` }",
          hydrationId: 202,
        },
        {
          NT: "__3",
          rule: ["stmt@ifTrue", "__3"],
          conflicts: [],
          resolved: [],
          str: "{ __3: `stmt@ifTrue __3` }",
          strWithGrammarName: "{ __3: `stmt@ifTrue __3` }",
          strWithoutGrammarName: "{ __3: `stmt __3` }",
          hydrationId: 202,
        },
        {
          NT: "__4",
          rule: ["stmt@ifFalse"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "{ __4: `stmt@ifFalse __4` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
          ],
          str: "{ __4: `stmt@ifFalse` }",
          strWithGrammarName: "{ __4: `stmt@ifFalse` }",
          strWithoutGrammarName: "{ __4: `stmt` }",
          hydrationId: 203,
        },
        {
          NT: "__4",
          rule: ["stmt@ifFalse", "__4"],
          conflicts: [],
          resolved: [],
          str: "{ __4: `stmt@ifFalse __4` }",
          strWithGrammarName: "{ __4: `stmt@ifFalse __4` }",
          strWithoutGrammarName: "{ __4: `stmt __4` }",
          hydrationId: 203,
        },
      ],
      candidates: [
        {
          gr: "{ fn_defs: `__0` }",
          digested: 0,
          nextMap: { __0: "fn_defs := __0 #" },
          str: "fn_defs := # __0",
          strWithGrammarName: "fn_defs := # __0",
        },
        {
          gr: '{ fn_def: `fn identifier "(" param __1 ")" "{" __2 "}"` }',
          digested: 0,
          nextMap: {
            fn: 'fn_def := fn # identifier "(" param __1 ")" "{" __2 "}"',
          },
          str: 'fn_def := # fn identifier "(" param __1 ")" "{" __2 "}"',
          strWithGrammarName:
            'fn_def := # fn identifier "(" param __1 ")" "{" __2 "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param __1 ")" "{" "}"` }',
          digested: 0,
          nextMap: {
            fn: 'fn_def := fn # identifier "(" param __1 ")" "{" "}"',
          },
          str: 'fn_def := # fn identifier "(" param __1 ")" "{" "}"',
          strWithGrammarName:
            'fn_def := # fn identifier "(" param __1 ")" "{" "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param ")" "{" __2 "}"` }',
          digested: 0,
          nextMap: {
            fn: 'fn_def := fn # identifier "(" param ")" "{" __2 "}"',
          },
          str: 'fn_def := # fn identifier "(" param ")" "{" __2 "}"',
          strWithGrammarName:
            'fn_def := # fn identifier "(" param ")" "{" __2 "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param ")" "{" "}"` }',
          digested: 0,
          nextMap: { fn: 'fn_def := fn # identifier "(" param ")" "{" "}"' },
          str: 'fn_def := # fn identifier "(" param ")" "{" "}"',
          strWithGrammarName: 'fn_def := # fn identifier "(" param ")" "{" "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" ")" "{" __2 "}"` }',
          digested: 0,
          nextMap: { fn: 'fn_def := fn # identifier "(" ")" "{" __2 "}"' },
          str: 'fn_def := # fn identifier "(" ")" "{" __2 "}"',
          strWithGrammarName: 'fn_def := # fn identifier "(" ")" "{" __2 "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" ")" "{" "}"` }',
          digested: 0,
          nextMap: { fn: 'fn_def := fn # identifier "(" ")" "{" "}"' },
          str: 'fn_def := # fn identifier "(" ")" "{" "}"',
          strWithGrammarName: 'fn_def := # fn identifier "(" ")" "{" "}"',
        },
        {
          gr: "{ param: `identifier` }",
          digested: 0,
          nextMap: { identifier: "param := identifier #" },
          str: "param := # identifier",
          strWithGrammarName: "param := # identifier",
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
          digested: 0,
          nextMap: { if: 'if_stmt := if # exp "{" __3 "}" else "{" __4 "}"' },
          str: 'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"',
          strWithGrammarName:
            'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
          digested: 0,
          nextMap: { if: 'if_stmt := if # exp "{" __3 "}" else "{" "}"' },
          str: 'if_stmt := # if exp "{" __3 "}" else "{" "}"',
          strWithGrammarName: 'if_stmt := # if exp "{" __3 "}" else "{" "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}"` }',
          digested: 0,
          nextMap: { if: 'if_stmt := if # exp "{" __3 "}"' },
          str: 'if_stmt := # if exp "{" __3 "}"',
          strWithGrammarName: 'if_stmt := # if exp "{" __3 "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
          digested: 0,
          nextMap: { if: 'if_stmt := if # exp "{" "}" else "{" __4 "}"' },
          str: 'if_stmt := # if exp "{" "}" else "{" __4 "}"',
          strWithGrammarName: 'if_stmt := # if exp "{" "}" else "{" __4 "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}" else "{" "}"` }',
          digested: 0,
          nextMap: { if: 'if_stmt := if # exp "{" "}" else "{" "}"' },
          str: 'if_stmt := # if exp "{" "}" else "{" "}"',
          strWithGrammarName: 'if_stmt := # if exp "{" "}" else "{" "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}"` }',
          digested: 0,
          nextMap: { if: 'if_stmt := if # exp "{" "}"' },
          str: 'if_stmt := # if exp "{" "}"',
          strWithGrammarName: 'if_stmt := # if exp "{" "}"',
        },
        {
          gr: '{ loop_stmt: `do "{" __2 "}" while exp ";"` }',
          digested: 0,
          nextMap: { do: 'loop_stmt := do # "{" __2 "}" while exp ";"' },
          str: 'loop_stmt := # do "{" __2 "}" while exp ";"',
          strWithGrammarName: 'loop_stmt := # do "{" __2 "}" while exp ";"',
        },
        {
          gr: '{ loop_stmt: `do "{" "}" while exp ";"` }',
          digested: 0,
          nextMap: { do: 'loop_stmt := do # "{" "}" while exp ";"' },
          str: 'loop_stmt := # do "{" "}" while exp ";"',
          strWithGrammarName: 'loop_stmt := # do "{" "}" while exp ";"',
        },
        {
          gr: '{ loop_stmt: `while exp "{" __2 "}"` }',
          digested: 0,
          nextMap: { while: 'loop_stmt := while # exp "{" __2 "}"' },
          str: 'loop_stmt := # while exp "{" __2 "}"',
          strWithGrammarName: 'loop_stmt := # while exp "{" __2 "}"',
        },
        {
          gr: '{ loop_stmt: `while exp "{" "}"` }',
          digested: 0,
          nextMap: { while: 'loop_stmt := while # exp "{" "}"' },
          str: 'loop_stmt := # while exp "{" "}"',
          strWithGrammarName: 'loop_stmt := # while exp "{" "}"',
        },
        {
          gr: '{ incr_stmt: `"++" identifier ";"` }',
          digested: 0,
          nextMap: { '"++"': 'incr_stmt := "++" # identifier ";"' },
          str: 'incr_stmt := # "++" identifier ";"',
          strWithGrammarName: 'incr_stmt := # "++" identifier ";"',
        },
        {
          gr: '{ incr_stmt: `identifier "++" ";"` }',
          digested: 0,
          nextMap: { identifier: 'incr_stmt := identifier # "++" ";"' },
          str: 'incr_stmt := # identifier "++" ";"',
          strWithGrammarName: 'incr_stmt := # identifier "++" ";"',
        },
        {
          gr: '{ decr_stmt: `"--" identifier ";"` }',
          digested: 0,
          nextMap: { '"--"': 'decr_stmt := "--" # identifier ";"' },
          str: 'decr_stmt := # "--" identifier ";"',
          strWithGrammarName: 'decr_stmt := # "--" identifier ";"',
        },
        {
          gr: '{ decr_stmt: `identifier "--" ";"` }',
          digested: 0,
          nextMap: { identifier: 'decr_stmt := identifier # "--" ";"' },
          str: 'decr_stmt := # identifier "--" ";"',
          strWithGrammarName: 'decr_stmt := # identifier "--" ";"',
        },
        {
          gr: "{ stmt: `assign_stmt` }",
          digested: 0,
          nextMap: { assign_stmt: "stmt := assign_stmt #" },
          str: "stmt := # assign_stmt",
          strWithGrammarName: "stmt := # assign_stmt",
        },
        {
          gr: "{ stmt: `ret_stmt` }",
          digested: 0,
          nextMap: { ret_stmt: "stmt := ret_stmt #" },
          str: "stmt := # ret_stmt",
          strWithGrammarName: "stmt := # ret_stmt",
        },
        {
          gr: "{ stmt: `incr_stmt` }",
          digested: 0,
          nextMap: { incr_stmt: "stmt := incr_stmt #" },
          str: "stmt := # incr_stmt",
          strWithGrammarName: "stmt := # incr_stmt",
        },
        {
          gr: "{ stmt: `decr_stmt` }",
          digested: 0,
          nextMap: { decr_stmt: "stmt := decr_stmt #" },
          str: "stmt := # decr_stmt",
          strWithGrammarName: "stmt := # decr_stmt",
        },
        {
          gr: "{ stmt: `if_stmt` }",
          digested: 0,
          nextMap: { if_stmt: "stmt := if_stmt #" },
          str: "stmt := # if_stmt",
          strWithGrammarName: "stmt := # if_stmt",
        },
        {
          gr: "{ stmt: `loop_stmt` }",
          digested: 0,
          nextMap: { loop_stmt: "stmt := loop_stmt #" },
          str: "stmt := # loop_stmt",
          strWithGrammarName: "stmt := # loop_stmt",
        },
        {
          gr: '{ assign_stmt: `let identifier "=" exp ";"` }',
          digested: 0,
          nextMap: { let: 'assign_stmt := let # identifier "=" exp ";"' },
          str: 'assign_stmt := # let identifier "=" exp ";"',
          strWithGrammarName: 'assign_stmt := # let identifier "=" exp ";"',
        },
        {
          gr: '{ ret_stmt: `return exp ";"` }',
          digested: 0,
          nextMap: { return: 'ret_stmt := return # exp ";"' },
          str: 'ret_stmt := # return exp ";"',
          strWithGrammarName: 'ret_stmt := # return exp ";"',
        },
        {
          gr: '{ exp: `exp "+" exp` }',
          digested: 0,
          nextMap: { exp: 'exp := exp # "+" exp' },
          str: 'exp := # exp "+" exp',
          strWithGrammarName: 'exp := # exp "+" exp',
        },
        {
          gr: '{ exp: `exp "-" exp` }',
          digested: 0,
          nextMap: { exp: 'exp := exp # "-" exp' },
          str: 'exp := # exp "-" exp',
          strWithGrammarName: 'exp := # exp "-" exp',
        },
        {
          gr: '{ exp: `exp "*" exp` }',
          digested: 0,
          nextMap: { exp: 'exp := exp # "*" exp' },
          str: 'exp := # exp "*" exp',
          strWithGrammarName: 'exp := # exp "*" exp',
        },
        {
          gr: '{ exp: `exp "/" exp` }',
          digested: 0,
          nextMap: { exp: 'exp := exp # "/" exp' },
          str: 'exp := # exp "/" exp',
          strWithGrammarName: 'exp := # exp "/" exp',
        },
        {
          gr: '{ exp: `exp "%" exp` }',
          digested: 0,
          nextMap: { exp: 'exp := exp # "%" exp' },
          str: 'exp := # exp "%" exp',
          strWithGrammarName: 'exp := # exp "%" exp',
        },
        {
          gr: '{ exp: `"-" exp` }',
          digested: 0,
          nextMap: { '"-"': 'exp := "-" # exp' },
          str: 'exp := # "-" exp',
          strWithGrammarName: 'exp := # "-" exp',
        },
        {
          gr: "{ exp: `integer` }",
          digested: 0,
          nextMap: { integer: "exp := integer #" },
          str: "exp := # integer",
          strWithGrammarName: "exp := # integer",
        },
        {
          gr: "{ exp: `identifier` }",
          digested: 0,
          nextMap: { identifier: "exp := identifier #" },
          str: "exp := # identifier",
          strWithGrammarName: "exp := # identifier",
        },
        {
          gr: "{ __0: `fn_def` }",
          digested: 0,
          nextMap: { fn_def: "__0 := fn_def #" },
          str: "__0 := # fn_def",
          strWithGrammarName: "__0 := # fn_def",
        },
        {
          gr: "{ __0: `fn_def __0` }",
          digested: 0,
          nextMap: { fn_def: "__0 := fn_def # __0" },
          str: "__0 := # fn_def __0",
          strWithGrammarName: "__0 := # fn_def __0",
        },
        {
          gr: '{ __1: `"," param` }',
          digested: 0,
          nextMap: { '","': '__1 := "," # param' },
          str: '__1 := # "," param',
          strWithGrammarName: '__1 := # "," param',
        },
        {
          gr: '{ __1: `"," param __1` }',
          digested: 0,
          nextMap: { '","': '__1 := "," # param __1' },
          str: '__1 := # "," param __1',
          strWithGrammarName: '__1 := # "," param __1',
        },
        {
          gr: "{ __2: `stmt` }",
          digested: 0,
          nextMap: { stmt: "__2 := stmt #" },
          str: "__2 := # stmt",
          strWithGrammarName: "__2 := # stmt",
        },
        {
          gr: "{ __2: `stmt __2` }",
          digested: 0,
          nextMap: { stmt: "__2 := stmt # __2" },
          str: "__2 := # stmt __2",
          strWithGrammarName: "__2 := # stmt __2",
        },
        {
          gr: "{ __3: `stmt@ifTrue` }",
          digested: 0,
          nextMap: { "stmt@ifTrue": "__3 := stmt@ifTrue #" },
          str: "__3 := # stmt@ifTrue",
          strWithGrammarName: "__3 := # stmt@ifTrue",
        },
        {
          gr: "{ __3: `stmt@ifTrue __3` }",
          digested: 0,
          nextMap: { "stmt@ifTrue": "__3 := stmt@ifTrue # __3" },
          str: "__3 := # stmt@ifTrue __3",
          strWithGrammarName: "__3 := # stmt@ifTrue __3",
        },
        {
          gr: "{ __4: `stmt@ifFalse` }",
          digested: 0,
          nextMap: { "stmt@ifFalse": "__4 := stmt@ifFalse #" },
          str: "__4 := # stmt@ifFalse",
          strWithGrammarName: "__4 := # stmt@ifFalse",
        },
        {
          gr: "{ __4: `stmt@ifFalse __4` }",
          digested: 0,
          nextMap: { "stmt@ifFalse": "__4 := stmt@ifFalse # __4" },
          str: "__4 := # stmt@ifFalse __4",
          strWithGrammarName: "__4 := # stmt@ifFalse __4",
        },
        {
          gr: "{ fn_defs: `__0` }",
          digested: 1,
          nextMap: {},
          str: "fn_defs := __0 #",
          strWithGrammarName: "fn_defs := __0 #",
        },
        {
          gr: '{ fn_def: `fn identifier "(" param __1 ")" "{" __2 "}"` }',
          digested: 1,
          nextMap: {
            identifier:
              'fn_def := fn identifier # "(" param __1 ")" "{" __2 "}"',
          },
          str: 'fn_def := fn # identifier "(" param __1 ")" "{" __2 "}"',
          strWithGrammarName:
            'fn_def := fn # identifier "(" param __1 ")" "{" __2 "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param __1 ")" "{" "}"` }',
          digested: 1,
          nextMap: {
            identifier: 'fn_def := fn identifier # "(" param __1 ")" "{" "}"',
          },
          str: 'fn_def := fn # identifier "(" param __1 ")" "{" "}"',
          strWithGrammarName:
            'fn_def := fn # identifier "(" param __1 ")" "{" "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param ")" "{" __2 "}"` }',
          digested: 1,
          nextMap: {
            identifier: 'fn_def := fn identifier # "(" param ")" "{" __2 "}"',
          },
          str: 'fn_def := fn # identifier "(" param ")" "{" __2 "}"',
          strWithGrammarName:
            'fn_def := fn # identifier "(" param ")" "{" __2 "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param ")" "{" "}"` }',
          digested: 1,
          nextMap: {
            identifier: 'fn_def := fn identifier # "(" param ")" "{" "}"',
          },
          str: 'fn_def := fn # identifier "(" param ")" "{" "}"',
          strWithGrammarName: 'fn_def := fn # identifier "(" param ")" "{" "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" ")" "{" __2 "}"` }',
          digested: 1,
          nextMap: {
            identifier: 'fn_def := fn identifier # "(" ")" "{" __2 "}"',
          },
          str: 'fn_def := fn # identifier "(" ")" "{" __2 "}"',
          strWithGrammarName: 'fn_def := fn # identifier "(" ")" "{" __2 "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" ")" "{" "}"` }',
          digested: 1,
          nextMap: { identifier: 'fn_def := fn identifier # "(" ")" "{" "}"' },
          str: 'fn_def := fn # identifier "(" ")" "{" "}"',
          strWithGrammarName: 'fn_def := fn # identifier "(" ")" "{" "}"',
        },
        {
          gr: "{ __0: `fn_def` }",
          digested: 1,
          nextMap: {},
          str: "__0 := fn_def #",
          strWithGrammarName: "__0 := fn_def #",
        },
        {
          gr: "{ __0: `fn_def __0` }",
          digested: 1,
          nextMap: { __0: "__0 := fn_def __0 #" },
          str: "__0 := fn_def # __0",
          strWithGrammarName: "__0 := fn_def # __0",
        },
        {
          gr: '{ fn_def: `fn identifier "(" param __1 ")" "{" __2 "}"` }',
          digested: 2,
          nextMap: {
            '"("': 'fn_def := fn identifier "(" # param __1 ")" "{" __2 "}"',
          },
          str: 'fn_def := fn identifier # "(" param __1 ")" "{" __2 "}"',
          strWithGrammarName:
            'fn_def := fn identifier # "(" param __1 ")" "{" __2 "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param __1 ")" "{" "}"` }',
          digested: 2,
          nextMap: {
            '"("': 'fn_def := fn identifier "(" # param __1 ")" "{" "}"',
          },
          str: 'fn_def := fn identifier # "(" param __1 ")" "{" "}"',
          strWithGrammarName:
            'fn_def := fn identifier # "(" param __1 ")" "{" "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param ")" "{" __2 "}"` }',
          digested: 2,
          nextMap: {
            '"("': 'fn_def := fn identifier "(" # param ")" "{" __2 "}"',
          },
          str: 'fn_def := fn identifier # "(" param ")" "{" __2 "}"',
          strWithGrammarName:
            'fn_def := fn identifier # "(" param ")" "{" __2 "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param ")" "{" "}"` }',
          digested: 2,
          nextMap: { '"("': 'fn_def := fn identifier "(" # param ")" "{" "}"' },
          str: 'fn_def := fn identifier # "(" param ")" "{" "}"',
          strWithGrammarName: 'fn_def := fn identifier # "(" param ")" "{" "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" ")" "{" __2 "}"` }',
          digested: 2,
          nextMap: { '"("': 'fn_def := fn identifier "(" # ")" "{" __2 "}"' },
          str: 'fn_def := fn identifier # "(" ")" "{" __2 "}"',
          strWithGrammarName: 'fn_def := fn identifier # "(" ")" "{" __2 "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" ")" "{" "}"` }',
          digested: 2,
          nextMap: { '"("': 'fn_def := fn identifier "(" # ")" "{" "}"' },
          str: 'fn_def := fn identifier # "(" ")" "{" "}"',
          strWithGrammarName: 'fn_def := fn identifier # "(" ")" "{" "}"',
        },
        {
          gr: "{ __0: `fn_def __0` }",
          digested: 2,
          nextMap: {},
          str: "__0 := fn_def __0 #",
          strWithGrammarName: "__0 := fn_def __0 #",
        },
        {
          gr: '{ fn_def: `fn identifier "(" param __1 ")" "{" __2 "}"` }',
          digested: 3,
          nextMap: {
            param: 'fn_def := fn identifier "(" param # __1 ")" "{" __2 "}"',
          },
          str: 'fn_def := fn identifier "(" # param __1 ")" "{" __2 "}"',
          strWithGrammarName:
            'fn_def := fn identifier "(" # param __1 ")" "{" __2 "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param __1 ")" "{" "}"` }',
          digested: 3,
          nextMap: {
            param: 'fn_def := fn identifier "(" param # __1 ")" "{" "}"',
          },
          str: 'fn_def := fn identifier "(" # param __1 ")" "{" "}"',
          strWithGrammarName:
            'fn_def := fn identifier "(" # param __1 ")" "{" "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param ")" "{" __2 "}"` }',
          digested: 3,
          nextMap: {
            param: 'fn_def := fn identifier "(" param # ")" "{" __2 "}"',
          },
          str: 'fn_def := fn identifier "(" # param ")" "{" __2 "}"',
          strWithGrammarName:
            'fn_def := fn identifier "(" # param ")" "{" __2 "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param ")" "{" "}"` }',
          digested: 3,
          nextMap: { param: 'fn_def := fn identifier "(" param # ")" "{" "}"' },
          str: 'fn_def := fn identifier "(" # param ")" "{" "}"',
          strWithGrammarName: 'fn_def := fn identifier "(" # param ")" "{" "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" ")" "{" __2 "}"` }',
          digested: 3,
          nextMap: { '")"': 'fn_def := fn identifier "(" ")" # "{" __2 "}"' },
          str: 'fn_def := fn identifier "(" # ")" "{" __2 "}"',
          strWithGrammarName: 'fn_def := fn identifier "(" # ")" "{" __2 "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" ")" "{" "}"` }',
          digested: 3,
          nextMap: { '")"': 'fn_def := fn identifier "(" ")" # "{" "}"' },
          str: 'fn_def := fn identifier "(" # ")" "{" "}"',
          strWithGrammarName: 'fn_def := fn identifier "(" # ")" "{" "}"',
        },
        {
          gr: "{ param: `identifier` }",
          digested: 1,
          nextMap: {},
          str: "param := identifier #",
          strWithGrammarName: "param := identifier #",
        },
        {
          gr: '{ fn_def: `fn identifier "(" param __1 ")" "{" __2 "}"` }',
          digested: 4,
          nextMap: {
            __1: 'fn_def := fn identifier "(" param __1 # ")" "{" __2 "}"',
          },
          str: 'fn_def := fn identifier "(" param # __1 ")" "{" __2 "}"',
          strWithGrammarName:
            'fn_def := fn identifier "(" param # __1 ")" "{" __2 "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param __1 ")" "{" "}"` }',
          digested: 4,
          nextMap: {
            __1: 'fn_def := fn identifier "(" param __1 # ")" "{" "}"',
          },
          str: 'fn_def := fn identifier "(" param # __1 ")" "{" "}"',
          strWithGrammarName:
            'fn_def := fn identifier "(" param # __1 ")" "{" "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param ")" "{" __2 "}"` }',
          digested: 4,
          nextMap: {
            '")"': 'fn_def := fn identifier "(" param ")" # "{" __2 "}"',
          },
          str: 'fn_def := fn identifier "(" param # ")" "{" __2 "}"',
          strWithGrammarName:
            'fn_def := fn identifier "(" param # ")" "{" __2 "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param ")" "{" "}"` }',
          digested: 4,
          nextMap: { '")"': 'fn_def := fn identifier "(" param ")" # "{" "}"' },
          str: 'fn_def := fn identifier "(" param # ")" "{" "}"',
          strWithGrammarName: 'fn_def := fn identifier "(" param # ")" "{" "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" ")" "{" __2 "}"` }',
          digested: 4,
          nextMap: { '"{"': 'fn_def := fn identifier "(" ")" "{" # __2 "}"' },
          str: 'fn_def := fn identifier "(" ")" # "{" __2 "}"',
          strWithGrammarName: 'fn_def := fn identifier "(" ")" # "{" __2 "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" ")" "{" "}"` }',
          digested: 4,
          nextMap: { '"{"': 'fn_def := fn identifier "(" ")" "{" # "}"' },
          str: 'fn_def := fn identifier "(" ")" # "{" "}"',
          strWithGrammarName: 'fn_def := fn identifier "(" ")" # "{" "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param __1 ")" "{" __2 "}"` }',
          digested: 5,
          nextMap: {
            '")"': 'fn_def := fn identifier "(" param __1 ")" # "{" __2 "}"',
          },
          str: 'fn_def := fn identifier "(" param __1 # ")" "{" __2 "}"',
          strWithGrammarName:
            'fn_def := fn identifier "(" param __1 # ")" "{" __2 "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param __1 ")" "{" "}"` }',
          digested: 5,
          nextMap: {
            '")"': 'fn_def := fn identifier "(" param __1 ")" # "{" "}"',
          },
          str: 'fn_def := fn identifier "(" param __1 # ")" "{" "}"',
          strWithGrammarName:
            'fn_def := fn identifier "(" param __1 # ")" "{" "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param ")" "{" __2 "}"` }',
          digested: 5,
          nextMap: {
            '"{"': 'fn_def := fn identifier "(" param ")" "{" # __2 "}"',
          },
          str: 'fn_def := fn identifier "(" param ")" # "{" __2 "}"',
          strWithGrammarName:
            'fn_def := fn identifier "(" param ")" # "{" __2 "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param ")" "{" "}"` }',
          digested: 5,
          nextMap: { '"{"': 'fn_def := fn identifier "(" param ")" "{" # "}"' },
          str: 'fn_def := fn identifier "(" param ")" # "{" "}"',
          strWithGrammarName: 'fn_def := fn identifier "(" param ")" # "{" "}"',
        },
        {
          gr: '{ __1: `"," param` }',
          digested: 1,
          nextMap: { param: '__1 := "," param #' },
          str: '__1 := "," # param',
          strWithGrammarName: '__1 := "," # param',
        },
        {
          gr: '{ __1: `"," param __1` }',
          digested: 1,
          nextMap: { param: '__1 := "," param # __1' },
          str: '__1 := "," # param __1',
          strWithGrammarName: '__1 := "," # param __1',
        },
        {
          gr: '{ fn_def: `fn identifier "(" ")" "{" __2 "}"` }',
          digested: 5,
          nextMap: { __2: 'fn_def := fn identifier "(" ")" "{" __2 # "}"' },
          str: 'fn_def := fn identifier "(" ")" "{" # __2 "}"',
          strWithGrammarName: 'fn_def := fn identifier "(" ")" "{" # __2 "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" ")" "{" "}"` }',
          digested: 5,
          nextMap: { '"}"': 'fn_def := fn identifier "(" ")" "{" "}" #' },
          str: 'fn_def := fn identifier "(" ")" "{" # "}"',
          strWithGrammarName: 'fn_def := fn identifier "(" ")" "{" # "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param __1 ")" "{" __2 "}"` }',
          digested: 6,
          nextMap: {
            '"{"': 'fn_def := fn identifier "(" param __1 ")" "{" # __2 "}"',
          },
          str: 'fn_def := fn identifier "(" param __1 ")" # "{" __2 "}"',
          strWithGrammarName:
            'fn_def := fn identifier "(" param __1 ")" # "{" __2 "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param __1 ")" "{" "}"` }',
          digested: 6,
          nextMap: {
            '"{"': 'fn_def := fn identifier "(" param __1 ")" "{" # "}"',
          },
          str: 'fn_def := fn identifier "(" param __1 ")" # "{" "}"',
          strWithGrammarName:
            'fn_def := fn identifier "(" param __1 ")" # "{" "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param ")" "{" __2 "}"` }',
          digested: 6,
          nextMap: {
            __2: 'fn_def := fn identifier "(" param ")" "{" __2 # "}"',
          },
          str: 'fn_def := fn identifier "(" param ")" "{" # __2 "}"',
          strWithGrammarName:
            'fn_def := fn identifier "(" param ")" "{" # __2 "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param ")" "{" "}"` }',
          digested: 6,
          nextMap: { '"}"': 'fn_def := fn identifier "(" param ")" "{" "}" #' },
          str: 'fn_def := fn identifier "(" param ")" "{" # "}"',
          strWithGrammarName: 'fn_def := fn identifier "(" param ")" "{" # "}"',
        },
        {
          gr: '{ __1: `"," param` }',
          digested: 2,
          nextMap: {},
          str: '__1 := "," param #',
          strWithGrammarName: '__1 := "," param #',
        },
        {
          gr: '{ __1: `"," param __1` }',
          digested: 2,
          nextMap: { __1: '__1 := "," param __1 #' },
          str: '__1 := "," param # __1',
          strWithGrammarName: '__1 := "," param # __1',
        },
        {
          gr: '{ incr_stmt: `identifier "++" ";"` }',
          digested: 1,
          nextMap: { '"++"': 'incr_stmt := identifier "++" # ";"' },
          str: 'incr_stmt := identifier # "++" ";"',
          strWithGrammarName: 'incr_stmt := identifier # "++" ";"',
        },
        {
          gr: '{ decr_stmt: `identifier "--" ";"` }',
          digested: 1,
          nextMap: { '"--"': 'decr_stmt := identifier "--" # ";"' },
          str: 'decr_stmt := identifier # "--" ";"',
          strWithGrammarName: 'decr_stmt := identifier # "--" ";"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" ")" "{" __2 "}"` }',
          digested: 6,
          nextMap: { '"}"': 'fn_def := fn identifier "(" ")" "{" __2 "}" #' },
          str: 'fn_def := fn identifier "(" ")" "{" __2 # "}"',
          strWithGrammarName: 'fn_def := fn identifier "(" ")" "{" __2 # "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" ")" "{" "}"` }',
          digested: 6,
          nextMap: {},
          str: 'fn_def := fn identifier "(" ")" "{" "}" #',
          strWithGrammarName: 'fn_def := fn identifier "(" ")" "{" "}" #',
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
          digested: 1,
          nextMap: { exp: 'if_stmt := if exp # "{" __3 "}" else "{" __4 "}"' },
          str: 'if_stmt := if # exp "{" __3 "}" else "{" __4 "}"',
          strWithGrammarName:
            'if_stmt := if # exp "{" __3 "}" else "{" __4 "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
          digested: 1,
          nextMap: { exp: 'if_stmt := if exp # "{" __3 "}" else "{" "}"' },
          str: 'if_stmt := if # exp "{" __3 "}" else "{" "}"',
          strWithGrammarName: 'if_stmt := if # exp "{" __3 "}" else "{" "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}"` }',
          digested: 1,
          nextMap: { exp: 'if_stmt := if exp # "{" __3 "}"' },
          str: 'if_stmt := if # exp "{" __3 "}"',
          strWithGrammarName: 'if_stmt := if # exp "{" __3 "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
          digested: 1,
          nextMap: { exp: 'if_stmt := if exp # "{" "}" else "{" __4 "}"' },
          str: 'if_stmt := if # exp "{" "}" else "{" __4 "}"',
          strWithGrammarName: 'if_stmt := if # exp "{" "}" else "{" __4 "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}" else "{" "}"` }',
          digested: 1,
          nextMap: { exp: 'if_stmt := if exp # "{" "}" else "{" "}"' },
          str: 'if_stmt := if # exp "{" "}" else "{" "}"',
          strWithGrammarName: 'if_stmt := if # exp "{" "}" else "{" "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}"` }',
          digested: 1,
          nextMap: { exp: 'if_stmt := if exp # "{" "}"' },
          str: 'if_stmt := if # exp "{" "}"',
          strWithGrammarName: 'if_stmt := if # exp "{" "}"',
        },
        {
          gr: '{ loop_stmt: `do "{" __2 "}" while exp ";"` }',
          digested: 1,
          nextMap: { '"{"': 'loop_stmt := do "{" # __2 "}" while exp ";"' },
          str: 'loop_stmt := do # "{" __2 "}" while exp ";"',
          strWithGrammarName: 'loop_stmt := do # "{" __2 "}" while exp ";"',
        },
        {
          gr: '{ loop_stmt: `do "{" "}" while exp ";"` }',
          digested: 1,
          nextMap: { '"{"': 'loop_stmt := do "{" # "}" while exp ";"' },
          str: 'loop_stmt := do # "{" "}" while exp ";"',
          strWithGrammarName: 'loop_stmt := do # "{" "}" while exp ";"',
        },
        {
          gr: '{ loop_stmt: `while exp "{" __2 "}"` }',
          digested: 1,
          nextMap: { exp: 'loop_stmt := while exp # "{" __2 "}"' },
          str: 'loop_stmt := while # exp "{" __2 "}"',
          strWithGrammarName: 'loop_stmt := while # exp "{" __2 "}"',
        },
        {
          gr: '{ loop_stmt: `while exp "{" "}"` }',
          digested: 1,
          nextMap: { exp: 'loop_stmt := while exp # "{" "}"' },
          str: 'loop_stmt := while # exp "{" "}"',
          strWithGrammarName: 'loop_stmt := while # exp "{" "}"',
        },
        {
          gr: '{ incr_stmt: `"++" identifier ";"` }',
          digested: 1,
          nextMap: { identifier: 'incr_stmt := "++" identifier # ";"' },
          str: 'incr_stmt := "++" # identifier ";"',
          strWithGrammarName: 'incr_stmt := "++" # identifier ";"',
        },
        {
          gr: '{ decr_stmt: `"--" identifier ";"` }',
          digested: 1,
          nextMap: { identifier: 'decr_stmt := "--" identifier # ";"' },
          str: 'decr_stmt := "--" # identifier ";"',
          strWithGrammarName: 'decr_stmt := "--" # identifier ";"',
        },
        {
          gr: "{ stmt: `assign_stmt` }",
          digested: 1,
          nextMap: {},
          str: "stmt := assign_stmt #",
          strWithGrammarName: "stmt := assign_stmt #",
        },
        {
          gr: "{ stmt: `ret_stmt` }",
          digested: 1,
          nextMap: {},
          str: "stmt := ret_stmt #",
          strWithGrammarName: "stmt := ret_stmt #",
        },
        {
          gr: "{ stmt: `incr_stmt` }",
          digested: 1,
          nextMap: {},
          str: "stmt := incr_stmt #",
          strWithGrammarName: "stmt := incr_stmt #",
        },
        {
          gr: "{ stmt: `decr_stmt` }",
          digested: 1,
          nextMap: {},
          str: "stmt := decr_stmt #",
          strWithGrammarName: "stmt := decr_stmt #",
        },
        {
          gr: "{ stmt: `if_stmt` }",
          digested: 1,
          nextMap: {},
          str: "stmt := if_stmt #",
          strWithGrammarName: "stmt := if_stmt #",
        },
        {
          gr: "{ stmt: `loop_stmt` }",
          digested: 1,
          nextMap: {},
          str: "stmt := loop_stmt #",
          strWithGrammarName: "stmt := loop_stmt #",
        },
        {
          gr: '{ assign_stmt: `let identifier "=" exp ";"` }',
          digested: 1,
          nextMap: {
            identifier: 'assign_stmt := let identifier # "=" exp ";"',
          },
          str: 'assign_stmt := let # identifier "=" exp ";"',
          strWithGrammarName: 'assign_stmt := let # identifier "=" exp ";"',
        },
        {
          gr: '{ ret_stmt: `return exp ";"` }',
          digested: 1,
          nextMap: { exp: 'ret_stmt := return exp # ";"' },
          str: 'ret_stmt := return # exp ";"',
          strWithGrammarName: 'ret_stmt := return # exp ";"',
        },
        {
          gr: "{ __2: `stmt` }",
          digested: 1,
          nextMap: {},
          str: "__2 := stmt #",
          strWithGrammarName: "__2 := stmt #",
        },
        {
          gr: "{ __2: `stmt __2` }",
          digested: 1,
          nextMap: { __2: "__2 := stmt __2 #" },
          str: "__2 := stmt # __2",
          strWithGrammarName: "__2 := stmt # __2",
        },
        {
          gr: '{ fn_def: `fn identifier "(" param __1 ")" "{" __2 "}"` }',
          digested: 7,
          nextMap: {
            __2: 'fn_def := fn identifier "(" param __1 ")" "{" __2 # "}"',
          },
          str: 'fn_def := fn identifier "(" param __1 ")" "{" # __2 "}"',
          strWithGrammarName:
            'fn_def := fn identifier "(" param __1 ")" "{" # __2 "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param __1 ")" "{" "}"` }',
          digested: 7,
          nextMap: {
            '"}"': 'fn_def := fn identifier "(" param __1 ")" "{" "}" #',
          },
          str: 'fn_def := fn identifier "(" param __1 ")" "{" # "}"',
          strWithGrammarName:
            'fn_def := fn identifier "(" param __1 ")" "{" # "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param ")" "{" __2 "}"` }',
          digested: 7,
          nextMap: {
            '"}"': 'fn_def := fn identifier "(" param ")" "{" __2 "}" #',
          },
          str: 'fn_def := fn identifier "(" param ")" "{" __2 # "}"',
          strWithGrammarName:
            'fn_def := fn identifier "(" param ")" "{" __2 # "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param ")" "{" "}"` }',
          digested: 7,
          nextMap: {},
          str: 'fn_def := fn identifier "(" param ")" "{" "}" #',
          strWithGrammarName: 'fn_def := fn identifier "(" param ")" "{" "}" #',
        },
        {
          gr: '{ __1: `"," param __1` }',
          digested: 3,
          nextMap: {},
          str: '__1 := "," param __1 #',
          strWithGrammarName: '__1 := "," param __1 #',
        },
        {
          gr: '{ incr_stmt: `identifier "++" ";"` }',
          digested: 2,
          nextMap: { '";"': 'incr_stmt := identifier "++" ";" #' },
          str: 'incr_stmt := identifier "++" # ";"',
          strWithGrammarName: 'incr_stmt := identifier "++" # ";"',
        },
        {
          gr: '{ decr_stmt: `identifier "--" ";"` }',
          digested: 2,
          nextMap: { '";"': 'decr_stmt := identifier "--" ";" #' },
          str: 'decr_stmt := identifier "--" # ";"',
          strWithGrammarName: 'decr_stmt := identifier "--" # ";"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" ")" "{" __2 "}"` }',
          digested: 7,
          nextMap: {},
          str: 'fn_def := fn identifier "(" ")" "{" __2 "}" #',
          strWithGrammarName: 'fn_def := fn identifier "(" ")" "{" __2 "}" #',
        },
        {
          gr: "{ exp: `identifier` }",
          digested: 1,
          nextMap: {},
          str: "exp := identifier #",
          strWithGrammarName: "exp := identifier #",
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
          digested: 2,
          nextMap: {
            '"{"': 'if_stmt := if exp "{" # __3 "}" else "{" __4 "}"',
          },
          str: 'if_stmt := if exp # "{" __3 "}" else "{" __4 "}"',
          strWithGrammarName:
            'if_stmt := if exp # "{" __3 "}" else "{" __4 "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
          digested: 2,
          nextMap: { '"{"': 'if_stmt := if exp "{" # __3 "}" else "{" "}"' },
          str: 'if_stmt := if exp # "{" __3 "}" else "{" "}"',
          strWithGrammarName: 'if_stmt := if exp # "{" __3 "}" else "{" "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}"` }',
          digested: 2,
          nextMap: { '"{"': 'if_stmt := if exp "{" # __3 "}"' },
          str: 'if_stmt := if exp # "{" __3 "}"',
          strWithGrammarName: 'if_stmt := if exp # "{" __3 "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
          digested: 2,
          nextMap: { '"{"': 'if_stmt := if exp "{" # "}" else "{" __4 "}"' },
          str: 'if_stmt := if exp # "{" "}" else "{" __4 "}"',
          strWithGrammarName: 'if_stmt := if exp # "{" "}" else "{" __4 "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}" else "{" "}"` }',
          digested: 2,
          nextMap: { '"{"': 'if_stmt := if exp "{" # "}" else "{" "}"' },
          str: 'if_stmt := if exp # "{" "}" else "{" "}"',
          strWithGrammarName: 'if_stmt := if exp # "{" "}" else "{" "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}"` }',
          digested: 2,
          nextMap: { '"{"': 'if_stmt := if exp "{" # "}"' },
          str: 'if_stmt := if exp # "{" "}"',
          strWithGrammarName: 'if_stmt := if exp # "{" "}"',
        },
        {
          gr: '{ exp: `exp "+" exp` }',
          digested: 1,
          nextMap: { '"+"': 'exp := exp "+" # exp' },
          str: 'exp := exp # "+" exp',
          strWithGrammarName: 'exp := exp # "+" exp',
        },
        {
          gr: '{ exp: `exp "-" exp` }',
          digested: 1,
          nextMap: { '"-"': 'exp := exp "-" # exp' },
          str: 'exp := exp # "-" exp',
          strWithGrammarName: 'exp := exp # "-" exp',
        },
        {
          gr: '{ exp: `exp "*" exp` }',
          digested: 1,
          nextMap: { '"*"': 'exp := exp "*" # exp' },
          str: 'exp := exp # "*" exp',
          strWithGrammarName: 'exp := exp # "*" exp',
        },
        {
          gr: '{ exp: `exp "/" exp` }',
          digested: 1,
          nextMap: { '"/"': 'exp := exp "/" # exp' },
          str: 'exp := exp # "/" exp',
          strWithGrammarName: 'exp := exp # "/" exp',
        },
        {
          gr: '{ exp: `exp "%" exp` }',
          digested: 1,
          nextMap: { '"%"': 'exp := exp "%" # exp' },
          str: 'exp := exp # "%" exp',
          strWithGrammarName: 'exp := exp # "%" exp',
        },
        {
          gr: '{ exp: `"-" exp` }',
          digested: 1,
          nextMap: { exp: 'exp := "-" exp #' },
          str: 'exp := "-" # exp',
          strWithGrammarName: 'exp := "-" # exp',
        },
        {
          gr: "{ exp: `integer` }",
          digested: 1,
          nextMap: {},
          str: "exp := integer #",
          strWithGrammarName: "exp := integer #",
        },
        {
          gr: '{ loop_stmt: `do "{" __2 "}" while exp ";"` }',
          digested: 2,
          nextMap: { __2: 'loop_stmt := do "{" __2 # "}" while exp ";"' },
          str: 'loop_stmt := do "{" # __2 "}" while exp ";"',
          strWithGrammarName: 'loop_stmt := do "{" # __2 "}" while exp ";"',
        },
        {
          gr: '{ loop_stmt: `do "{" "}" while exp ";"` }',
          digested: 2,
          nextMap: { '"}"': 'loop_stmt := do "{" "}" # while exp ";"' },
          str: 'loop_stmt := do "{" # "}" while exp ";"',
          strWithGrammarName: 'loop_stmt := do "{" # "}" while exp ";"',
        },
        {
          gr: '{ loop_stmt: `while exp "{" __2 "}"` }',
          digested: 2,
          nextMap: { '"{"': 'loop_stmt := while exp "{" # __2 "}"' },
          str: 'loop_stmt := while exp # "{" __2 "}"',
          strWithGrammarName: 'loop_stmt := while exp # "{" __2 "}"',
        },
        {
          gr: '{ loop_stmt: `while exp "{" "}"` }',
          digested: 2,
          nextMap: { '"{"': 'loop_stmt := while exp "{" # "}"' },
          str: 'loop_stmt := while exp # "{" "}"',
          strWithGrammarName: 'loop_stmt := while exp # "{" "}"',
        },
        {
          gr: '{ incr_stmt: `"++" identifier ";"` }',
          digested: 2,
          nextMap: { '";"': 'incr_stmt := "++" identifier ";" #' },
          str: 'incr_stmt := "++" identifier # ";"',
          strWithGrammarName: 'incr_stmt := "++" identifier # ";"',
        },
        {
          gr: '{ decr_stmt: `"--" identifier ";"` }',
          digested: 2,
          nextMap: { '";"': 'decr_stmt := "--" identifier ";" #' },
          str: 'decr_stmt := "--" identifier # ";"',
          strWithGrammarName: 'decr_stmt := "--" identifier # ";"',
        },
        {
          gr: '{ assign_stmt: `let identifier "=" exp ";"` }',
          digested: 2,
          nextMap: { '"="': 'assign_stmt := let identifier "=" # exp ";"' },
          str: 'assign_stmt := let identifier # "=" exp ";"',
          strWithGrammarName: 'assign_stmt := let identifier # "=" exp ";"',
        },
        {
          gr: '{ ret_stmt: `return exp ";"` }',
          digested: 2,
          nextMap: { '";"': 'ret_stmt := return exp ";" #' },
          str: 'ret_stmt := return exp # ";"',
          strWithGrammarName: 'ret_stmt := return exp # ";"',
        },
        {
          gr: "{ __2: `stmt __2` }",
          digested: 2,
          nextMap: {},
          str: "__2 := stmt __2 #",
          strWithGrammarName: "__2 := stmt __2 #",
        },
        {
          gr: '{ fn_def: `fn identifier "(" param __1 ")" "{" __2 "}"` }',
          digested: 8,
          nextMap: {
            '"}"': 'fn_def := fn identifier "(" param __1 ")" "{" __2 "}" #',
          },
          str: 'fn_def := fn identifier "(" param __1 ")" "{" __2 # "}"',
          strWithGrammarName:
            'fn_def := fn identifier "(" param __1 ")" "{" __2 # "}"',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param __1 ")" "{" "}"` }',
          digested: 8,
          nextMap: {},
          str: 'fn_def := fn identifier "(" param __1 ")" "{" "}" #',
          strWithGrammarName:
            'fn_def := fn identifier "(" param __1 ")" "{" "}" #',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param ")" "{" __2 "}"` }',
          digested: 8,
          nextMap: {},
          str: 'fn_def := fn identifier "(" param ")" "{" __2 "}" #',
          strWithGrammarName:
            'fn_def := fn identifier "(" param ")" "{" __2 "}" #',
        },
        {
          gr: '{ incr_stmt: `identifier "++" ";"` }',
          digested: 3,
          nextMap: {},
          str: 'incr_stmt := identifier "++" ";" #',
          strWithGrammarName: 'incr_stmt := identifier "++" ";" #',
        },
        {
          gr: '{ decr_stmt: `identifier "--" ";"` }',
          digested: 3,
          nextMap: {},
          str: 'decr_stmt := identifier "--" ";" #',
          strWithGrammarName: 'decr_stmt := identifier "--" ";" #',
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
          digested: 3,
          nextMap: { __3: 'if_stmt := if exp "{" __3 # "}" else "{" __4 "}"' },
          str: 'if_stmt := if exp "{" # __3 "}" else "{" __4 "}"',
          strWithGrammarName:
            'if_stmt := if exp "{" # __3 "}" else "{" __4 "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
          digested: 3,
          nextMap: { __3: 'if_stmt := if exp "{" __3 # "}" else "{" "}"' },
          str: 'if_stmt := if exp "{" # __3 "}" else "{" "}"',
          strWithGrammarName: 'if_stmt := if exp "{" # __3 "}" else "{" "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}"` }',
          digested: 3,
          nextMap: { __3: 'if_stmt := if exp "{" __3 # "}"' },
          str: 'if_stmt := if exp "{" # __3 "}"',
          strWithGrammarName: 'if_stmt := if exp "{" # __3 "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
          digested: 3,
          nextMap: { '"}"': 'if_stmt := if exp "{" "}" # else "{" __4 "}"' },
          str: 'if_stmt := if exp "{" # "}" else "{" __4 "}"',
          strWithGrammarName: 'if_stmt := if exp "{" # "}" else "{" __4 "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}" else "{" "}"` }',
          digested: 3,
          nextMap: { '"}"': 'if_stmt := if exp "{" "}" # else "{" "}"' },
          str: 'if_stmt := if exp "{" # "}" else "{" "}"',
          strWithGrammarName: 'if_stmt := if exp "{" # "}" else "{" "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}"` }',
          digested: 3,
          nextMap: { '"}"': 'if_stmt := if exp "{" "}" #' },
          str: 'if_stmt := if exp "{" # "}"',
          strWithGrammarName: 'if_stmt := if exp "{" # "}"',
        },
        {
          gr: '{ exp: `exp "+" exp` }',
          digested: 2,
          nextMap: { exp: 'exp := exp "+" exp #' },
          str: 'exp := exp "+" # exp',
          strWithGrammarName: 'exp := exp "+" # exp',
        },
        {
          gr: '{ exp: `exp "-" exp` }',
          digested: 2,
          nextMap: { exp: 'exp := exp "-" exp #' },
          str: 'exp := exp "-" # exp',
          strWithGrammarName: 'exp := exp "-" # exp',
        },
        {
          gr: '{ exp: `exp "*" exp` }',
          digested: 2,
          nextMap: { exp: 'exp := exp "*" exp #' },
          str: 'exp := exp "*" # exp',
          strWithGrammarName: 'exp := exp "*" # exp',
        },
        {
          gr: '{ exp: `exp "/" exp` }',
          digested: 2,
          nextMap: { exp: 'exp := exp "/" exp #' },
          str: 'exp := exp "/" # exp',
          strWithGrammarName: 'exp := exp "/" # exp',
        },
        {
          gr: '{ exp: `exp "%" exp` }',
          digested: 2,
          nextMap: { exp: 'exp := exp "%" exp #' },
          str: 'exp := exp "%" # exp',
          strWithGrammarName: 'exp := exp "%" # exp',
        },
        {
          gr: '{ exp: `"-" exp` }',
          digested: 2,
          nextMap: {},
          str: 'exp := "-" exp #',
          strWithGrammarName: 'exp := "-" exp #',
        },
        {
          gr: '{ loop_stmt: `do "{" __2 "}" while exp ";"` }',
          digested: 3,
          nextMap: { '"}"': 'loop_stmt := do "{" __2 "}" # while exp ";"' },
          str: 'loop_stmt := do "{" __2 # "}" while exp ";"',
          strWithGrammarName: 'loop_stmt := do "{" __2 # "}" while exp ";"',
        },
        {
          gr: '{ loop_stmt: `do "{" "}" while exp ";"` }',
          digested: 3,
          nextMap: { while: 'loop_stmt := do "{" "}" while # exp ";"' },
          str: 'loop_stmt := do "{" "}" # while exp ";"',
          strWithGrammarName: 'loop_stmt := do "{" "}" # while exp ";"',
        },
        {
          gr: '{ loop_stmt: `while exp "{" __2 "}"` }',
          digested: 3,
          nextMap: { __2: 'loop_stmt := while exp "{" __2 # "}"' },
          str: 'loop_stmt := while exp "{" # __2 "}"',
          strWithGrammarName: 'loop_stmt := while exp "{" # __2 "}"',
        },
        {
          gr: '{ loop_stmt: `while exp "{" "}"` }',
          digested: 3,
          nextMap: { '"}"': 'loop_stmt := while exp "{" "}" #' },
          str: 'loop_stmt := while exp "{" # "}"',
          strWithGrammarName: 'loop_stmt := while exp "{" # "}"',
        },
        {
          gr: '{ incr_stmt: `"++" identifier ";"` }',
          digested: 3,
          nextMap: {},
          str: 'incr_stmt := "++" identifier ";" #',
          strWithGrammarName: 'incr_stmt := "++" identifier ";" #',
        },
        {
          gr: '{ decr_stmt: `"--" identifier ";"` }',
          digested: 3,
          nextMap: {},
          str: 'decr_stmt := "--" identifier ";" #',
          strWithGrammarName: 'decr_stmt := "--" identifier ";" #',
        },
        {
          gr: '{ assign_stmt: `let identifier "=" exp ";"` }',
          digested: 3,
          nextMap: { exp: 'assign_stmt := let identifier "=" exp # ";"' },
          str: 'assign_stmt := let identifier "=" # exp ";"',
          strWithGrammarName: 'assign_stmt := let identifier "=" # exp ";"',
        },
        {
          gr: '{ ret_stmt: `return exp ";"` }',
          digested: 3,
          nextMap: {},
          str: 'ret_stmt := return exp ";" #',
          strWithGrammarName: 'ret_stmt := return exp ";" #',
        },
        {
          gr: '{ fn_def: `fn identifier "(" param __1 ")" "{" __2 "}"` }',
          digested: 9,
          nextMap: {},
          str: 'fn_def := fn identifier "(" param __1 ")" "{" __2 "}" #',
          strWithGrammarName:
            'fn_def := fn identifier "(" param __1 ")" "{" __2 "}" #',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
          digested: 4,
          nextMap: { else: 'if_stmt := if exp "{" "}" else # "{" __4 "}"' },
          str: 'if_stmt := if exp "{" "}" # else "{" __4 "}"',
          strWithGrammarName: 'if_stmt := if exp "{" "}" # else "{" __4 "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}" else "{" "}"` }',
          digested: 4,
          nextMap: { else: 'if_stmt := if exp "{" "}" else # "{" "}"' },
          str: 'if_stmt := if exp "{" "}" # else "{" "}"',
          strWithGrammarName: 'if_stmt := if exp "{" "}" # else "{" "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}"` }',
          digested: 4,
          nextMap: {},
          str: 'if_stmt := if exp "{" "}" #',
          strWithGrammarName: 'if_stmt := if exp "{" "}" #',
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
          digested: 4,
          nextMap: {
            '"}"': 'if_stmt := if exp "{" __3 "}" # else "{" __4 "}"',
          },
          str: 'if_stmt := if exp "{" __3 # "}" else "{" __4 "}"',
          strWithGrammarName:
            'if_stmt := if exp "{" __3 # "}" else "{" __4 "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
          digested: 4,
          nextMap: { '"}"': 'if_stmt := if exp "{" __3 "}" # else "{" "}"' },
          str: 'if_stmt := if exp "{" __3 # "}" else "{" "}"',
          strWithGrammarName: 'if_stmt := if exp "{" __3 # "}" else "{" "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}"` }',
          digested: 4,
          nextMap: { '"}"': 'if_stmt := if exp "{" __3 "}" #' },
          str: 'if_stmt := if exp "{" __3 # "}"',
          strWithGrammarName: 'if_stmt := if exp "{" __3 # "}"',
        },
        {
          gr: "{ __3: `stmt@ifTrue` }",
          digested: 1,
          nextMap: {},
          str: "__3 := stmt@ifTrue #",
          strWithGrammarName: "__3 := stmt@ifTrue #",
        },
        {
          gr: "{ __3: `stmt@ifTrue __3` }",
          digested: 1,
          nextMap: { __3: "__3 := stmt@ifTrue __3 #" },
          str: "__3 := stmt@ifTrue # __3",
          strWithGrammarName: "__3 := stmt@ifTrue # __3",
        },
        {
          gr: '{ exp: `exp "+" exp` }',
          digested: 3,
          nextMap: {},
          str: 'exp := exp "+" exp #',
          strWithGrammarName: 'exp := exp "+" exp #',
        },
        {
          gr: '{ exp: `exp "-" exp` }',
          digested: 3,
          nextMap: {},
          str: 'exp := exp "-" exp #',
          strWithGrammarName: 'exp := exp "-" exp #',
        },
        {
          gr: '{ exp: `exp "*" exp` }',
          digested: 3,
          nextMap: {},
          str: 'exp := exp "*" exp #',
          strWithGrammarName: 'exp := exp "*" exp #',
        },
        {
          gr: '{ exp: `exp "/" exp` }',
          digested: 3,
          nextMap: {},
          str: 'exp := exp "/" exp #',
          strWithGrammarName: 'exp := exp "/" exp #',
        },
        {
          gr: '{ exp: `exp "%" exp` }',
          digested: 3,
          nextMap: {},
          str: 'exp := exp "%" exp #',
          strWithGrammarName: 'exp := exp "%" exp #',
        },
        {
          gr: '{ loop_stmt: `do "{" __2 "}" while exp ";"` }',
          digested: 4,
          nextMap: { while: 'loop_stmt := do "{" __2 "}" while # exp ";"' },
          str: 'loop_stmt := do "{" __2 "}" # while exp ";"',
          strWithGrammarName: 'loop_stmt := do "{" __2 "}" # while exp ";"',
        },
        {
          gr: '{ loop_stmt: `do "{" "}" while exp ";"` }',
          digested: 4,
          nextMap: { exp: 'loop_stmt := do "{" "}" while exp # ";"' },
          str: 'loop_stmt := do "{" "}" while # exp ";"',
          strWithGrammarName: 'loop_stmt := do "{" "}" while # exp ";"',
        },
        {
          gr: '{ loop_stmt: `while exp "{" __2 "}"` }',
          digested: 4,
          nextMap: { '"}"': 'loop_stmt := while exp "{" __2 "}" #' },
          str: 'loop_stmt := while exp "{" __2 # "}"',
          strWithGrammarName: 'loop_stmt := while exp "{" __2 # "}"',
        },
        {
          gr: '{ loop_stmt: `while exp "{" "}"` }',
          digested: 4,
          nextMap: {},
          str: 'loop_stmt := while exp "{" "}" #',
          strWithGrammarName: 'loop_stmt := while exp "{" "}" #',
        },
        {
          gr: '{ assign_stmt: `let identifier "=" exp ";"` }',
          digested: 4,
          nextMap: { '";"': 'assign_stmt := let identifier "=" exp ";" #' },
          str: 'assign_stmt := let identifier "=" exp # ";"',
          strWithGrammarName: 'assign_stmt := let identifier "=" exp # ";"',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
          digested: 5,
          nextMap: { '"{"': 'if_stmt := if exp "{" "}" else "{" # __4 "}"' },
          str: 'if_stmt := if exp "{" "}" else # "{" __4 "}"',
          strWithGrammarName: 'if_stmt := if exp "{" "}" else # "{" __4 "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}" else "{" "}"` }',
          digested: 5,
          nextMap: { '"{"': 'if_stmt := if exp "{" "}" else "{" # "}"' },
          str: 'if_stmt := if exp "{" "}" else # "{" "}"',
          strWithGrammarName: 'if_stmt := if exp "{" "}" else # "{" "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
          digested: 5,
          nextMap: { else: 'if_stmt := if exp "{" __3 "}" else # "{" __4 "}"' },
          str: 'if_stmt := if exp "{" __3 "}" # else "{" __4 "}"',
          strWithGrammarName:
            'if_stmt := if exp "{" __3 "}" # else "{" __4 "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
          digested: 5,
          nextMap: { else: 'if_stmt := if exp "{" __3 "}" else # "{" "}"' },
          str: 'if_stmt := if exp "{" __3 "}" # else "{" "}"',
          strWithGrammarName: 'if_stmt := if exp "{" __3 "}" # else "{" "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}"` }',
          digested: 5,
          nextMap: {},
          str: 'if_stmt := if exp "{" __3 "}" #',
          strWithGrammarName: 'if_stmt := if exp "{" __3 "}" #',
        },
        {
          gr: "{ __3: `stmt@ifTrue __3` }",
          digested: 2,
          nextMap: {},
          str: "__3 := stmt@ifTrue __3 #",
          strWithGrammarName: "__3 := stmt@ifTrue __3 #",
        },
        {
          gr: '{ loop_stmt: `do "{" __2 "}" while exp ";"` }',
          digested: 5,
          nextMap: { exp: 'loop_stmt := do "{" __2 "}" while exp # ";"' },
          str: 'loop_stmt := do "{" __2 "}" while # exp ";"',
          strWithGrammarName: 'loop_stmt := do "{" __2 "}" while # exp ";"',
        },
        {
          gr: '{ loop_stmt: `do "{" "}" while exp ";"` }',
          digested: 5,
          nextMap: { '";"': 'loop_stmt := do "{" "}" while exp ";" #' },
          str: 'loop_stmt := do "{" "}" while exp # ";"',
          strWithGrammarName: 'loop_stmt := do "{" "}" while exp # ";"',
        },
        {
          gr: '{ loop_stmt: `while exp "{" __2 "}"` }',
          digested: 5,
          nextMap: {},
          str: 'loop_stmt := while exp "{" __2 "}" #',
          strWithGrammarName: 'loop_stmt := while exp "{" __2 "}" #',
        },
        {
          gr: '{ assign_stmt: `let identifier "=" exp ";"` }',
          digested: 5,
          nextMap: {},
          str: 'assign_stmt := let identifier "=" exp ";" #',
          strWithGrammarName: 'assign_stmt := let identifier "=" exp ";" #',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
          digested: 6,
          nextMap: { __4: 'if_stmt := if exp "{" "}" else "{" __4 # "}"' },
          str: 'if_stmt := if exp "{" "}" else "{" # __4 "}"',
          strWithGrammarName: 'if_stmt := if exp "{" "}" else "{" # __4 "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}" else "{" "}"` }',
          digested: 6,
          nextMap: { '"}"': 'if_stmt := if exp "{" "}" else "{" "}" #' },
          str: 'if_stmt := if exp "{" "}" else "{" # "}"',
          strWithGrammarName: 'if_stmt := if exp "{" "}" else "{" # "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
          digested: 6,
          nextMap: {
            '"{"': 'if_stmt := if exp "{" __3 "}" else "{" # __4 "}"',
          },
          str: 'if_stmt := if exp "{" __3 "}" else # "{" __4 "}"',
          strWithGrammarName:
            'if_stmt := if exp "{" __3 "}" else # "{" __4 "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
          digested: 6,
          nextMap: { '"{"': 'if_stmt := if exp "{" __3 "}" else "{" # "}"' },
          str: 'if_stmt := if exp "{" __3 "}" else # "{" "}"',
          strWithGrammarName: 'if_stmt := if exp "{" __3 "}" else # "{" "}"',
        },
        {
          gr: '{ loop_stmt: `do "{" __2 "}" while exp ";"` }',
          digested: 6,
          nextMap: { '";"': 'loop_stmt := do "{" __2 "}" while exp ";" #' },
          str: 'loop_stmt := do "{" __2 "}" while exp # ";"',
          strWithGrammarName: 'loop_stmt := do "{" __2 "}" while exp # ";"',
        },
        {
          gr: '{ loop_stmt: `do "{" "}" while exp ";"` }',
          digested: 6,
          nextMap: {},
          str: 'loop_stmt := do "{" "}" while exp ";" #',
          strWithGrammarName: 'loop_stmt := do "{" "}" while exp ";" #',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}" else "{" "}"` }',
          digested: 7,
          nextMap: {},
          str: 'if_stmt := if exp "{" "}" else "{" "}" #',
          strWithGrammarName: 'if_stmt := if exp "{" "}" else "{" "}" #',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
          digested: 7,
          nextMap: { '"}"': 'if_stmt := if exp "{" "}" else "{" __4 "}" #' },
          str: 'if_stmt := if exp "{" "}" else "{" __4 # "}"',
          strWithGrammarName: 'if_stmt := if exp "{" "}" else "{" __4 # "}"',
        },
        {
          gr: "{ __4: `stmt@ifFalse` }",
          digested: 1,
          nextMap: {},
          str: "__4 := stmt@ifFalse #",
          strWithGrammarName: "__4 := stmt@ifFalse #",
        },
        {
          gr: "{ __4: `stmt@ifFalse __4` }",
          digested: 1,
          nextMap: { __4: "__4 := stmt@ifFalse __4 #" },
          str: "__4 := stmt@ifFalse # __4",
          strWithGrammarName: "__4 := stmt@ifFalse # __4",
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
          digested: 7,
          nextMap: { __4: 'if_stmt := if exp "{" __3 "}" else "{" __4 # "}"' },
          str: 'if_stmt := if exp "{" __3 "}" else "{" # __4 "}"',
          strWithGrammarName:
            'if_stmt := if exp "{" __3 "}" else "{" # __4 "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
          digested: 7,
          nextMap: { '"}"': 'if_stmt := if exp "{" __3 "}" else "{" "}" #' },
          str: 'if_stmt := if exp "{" __3 "}" else "{" # "}"',
          strWithGrammarName: 'if_stmt := if exp "{" __3 "}" else "{" # "}"',
        },
        {
          gr: '{ loop_stmt: `do "{" __2 "}" while exp ";"` }',
          digested: 7,
          nextMap: {},
          str: 'loop_stmt := do "{" __2 "}" while exp ";" #',
          strWithGrammarName: 'loop_stmt := do "{" __2 "}" while exp ";" #',
        },
        {
          gr: '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
          digested: 8,
          nextMap: {},
          str: 'if_stmt := if exp "{" "}" else "{" __4 "}" #',
          strWithGrammarName: 'if_stmt := if exp "{" "}" else "{" __4 "}" #',
        },
        {
          gr: "{ __4: `stmt@ifFalse __4` }",
          digested: 2,
          nextMap: {},
          str: "__4 := stmt@ifFalse __4 #",
          strWithGrammarName: "__4 := stmt@ifFalse __4 #",
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
          digested: 8,
          nextMap: {},
          str: 'if_stmt := if exp "{" __3 "}" else "{" "}" #',
          strWithGrammarName: 'if_stmt := if exp "{" __3 "}" else "{" "}" #',
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
          digested: 8,
          nextMap: {
            '"}"': 'if_stmt := if exp "{" __3 "}" else "{" __4 "}" #',
          },
          str: 'if_stmt := if exp "{" __3 "}" else "{" __4 # "}"',
          strWithGrammarName:
            'if_stmt := if exp "{" __3 "}" else "{" __4 # "}"',
        },
        {
          gr: '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
          digested: 9,
          nextMap: {},
          str: 'if_stmt := if exp "{" __3 "}" else "{" __4 "}" #',
          strWithGrammarName:
            'if_stmt := if exp "{" __3 "}" else "{" __4 "}" #',
        },
      ],
      states: {
        '__0 := # fn_def\n__0 := # fn_def __0\nfn_def := # fn identifier "(" ")" "{" "}"\nfn_def := # fn identifier "(" ")" "{" __2 "}"\nfn_def := # fn identifier "(" param ")" "{" "}"\nfn_def := # fn identifier "(" param ")" "{" __2 "}"\nfn_def := # fn identifier "(" param __1 ")" "{" "}"\nfn_def := # fn identifier "(" param __1 ")" "{" __2 "}"\nfn_defs := # __0':
          {
            candidates: [
              "fn_defs := # __0",
              "__0 := # fn_def",
              "__0 := # fn_def __0",
              'fn_def := # fn identifier "(" param __1 ")" "{" __2 "}"',
              'fn_def := # fn identifier "(" param __1 ")" "{" "}"',
              'fn_def := # fn identifier "(" param ")" "{" __2 "}"',
              'fn_def := # fn identifier "(" param ")" "{" "}"',
              'fn_def := # fn identifier "(" ")" "{" __2 "}"',
              'fn_def := # fn identifier "(" ")" "{" "}"',
            ],
            nextMap: {
              __0: "fn_defs := __0 #",
              fn:
                'fn_def := fn # identifier "(" ")" "{" "}"\n' +
                'fn_def := fn # identifier "(" ")" "{" __2 "}"\n' +
                'fn_def := fn # identifier "(" param ")" "{" "}"\n' +
                'fn_def := fn # identifier "(" param ")" "{" __2 "}"\n' +
                'fn_def := fn # identifier "(" param __1 ")" "{" "}"\n' +
                'fn_def := fn # identifier "(" param __1 ")" "{" __2 "}"',
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def:
                "__0 := # fn_def\n" +
                "__0 := # fn_def __0\n" +
                "__0 := fn_def #\n" +
                "__0 := fn_def # __0\n" +
                'fn_def := # fn identifier "(" ")" "{" "}"\n' +
                'fn_def := # fn identifier "(" ")" "{" __2 "}"\n' +
                'fn_def := # fn identifier "(" param ")" "{" "}"\n' +
                'fn_def := # fn identifier "(" param ")" "{" __2 "}"\n' +
                'fn_def := # fn identifier "(" param __1 ")" "{" "}"\n' +
                'fn_def := # fn identifier "(" param __1 ")" "{" __2 "}"',
              '","': null,
              stmt: null,
            },
            str:
              "__0 := # fn_def\n" +
              "__0 := # fn_def __0\n" +
              'fn_def := # fn identifier "(" ")" "{" "}"\n' +
              'fn_def := # fn identifier "(" ")" "{" __2 "}"\n' +
              'fn_def := # fn identifier "(" param ")" "{" "}"\n' +
              'fn_def := # fn identifier "(" param ")" "{" __2 "}"\n' +
              'fn_def := # fn identifier "(" param __1 ")" "{" "}"\n' +
              'fn_def := # fn identifier "(" param __1 ")" "{" __2 "}"\n' +
              "fn_defs := # __0",
          },
        "fn_defs := __0 #": {
          candidates: ["fn_defs := __0 #"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: "fn_defs := __0 #",
        },
        'fn_def := fn # identifier "(" ")" "{" "}"\nfn_def := fn # identifier "(" ")" "{" __2 "}"\nfn_def := fn # identifier "(" param ")" "{" "}"\nfn_def := fn # identifier "(" param ")" "{" __2 "}"\nfn_def := fn # identifier "(" param __1 ")" "{" "}"\nfn_def := fn # identifier "(" param __1 ")" "{" __2 "}"':
          {
            candidates: [
              'fn_def := fn # identifier "(" param __1 ")" "{" __2 "}"',
              'fn_def := fn # identifier "(" param __1 ")" "{" "}"',
              'fn_def := fn # identifier "(" param ")" "{" __2 "}"',
              'fn_def := fn # identifier "(" param ")" "{" "}"',
              'fn_def := fn # identifier "(" ")" "{" __2 "}"',
              'fn_def := fn # identifier "(" ")" "{" "}"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier:
                'fn_def := fn identifier # "(" ")" "{" "}"\n' +
                'fn_def := fn identifier # "(" ")" "{" __2 "}"\n' +
                'fn_def := fn identifier # "(" param ")" "{" "}"\n' +
                'fn_def := fn identifier # "(" param ")" "{" __2 "}"\n' +
                'fn_def := fn identifier # "(" param __1 ")" "{" "}"\n' +
                'fn_def := fn identifier # "(" param __1 ")" "{" __2 "}"',
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'fn_def := fn # identifier "(" ")" "{" "}"\n' +
              'fn_def := fn # identifier "(" ")" "{" __2 "}"\n' +
              'fn_def := fn # identifier "(" param ")" "{" "}"\n' +
              'fn_def := fn # identifier "(" param ")" "{" __2 "}"\n' +
              'fn_def := fn # identifier "(" param __1 ")" "{" "}"\n' +
              'fn_def := fn # identifier "(" param __1 ")" "{" __2 "}"',
          },
        '__0 := # fn_def\n__0 := # fn_def __0\n__0 := fn_def #\n__0 := fn_def # __0\nfn_def := # fn identifier "(" ")" "{" "}"\nfn_def := # fn identifier "(" ")" "{" __2 "}"\nfn_def := # fn identifier "(" param ")" "{" "}"\nfn_def := # fn identifier "(" param ")" "{" __2 "}"\nfn_def := # fn identifier "(" param __1 ")" "{" "}"\nfn_def := # fn identifier "(" param __1 ")" "{" __2 "}"':
          {
            candidates: [
              "__0 := fn_def #",
              "__0 := fn_def # __0",
              "__0 := # fn_def",
              "__0 := # fn_def __0",
              'fn_def := # fn identifier "(" param __1 ")" "{" __2 "}"',
              'fn_def := # fn identifier "(" param __1 ")" "{" "}"',
              'fn_def := # fn identifier "(" param ")" "{" __2 "}"',
              'fn_def := # fn identifier "(" param ")" "{" "}"',
              'fn_def := # fn identifier "(" ")" "{" __2 "}"',
              'fn_def := # fn identifier "(" ")" "{" "}"',
            ],
            nextMap: {
              __0: "__0 := fn_def __0 #",
              fn:
                'fn_def := fn # identifier "(" ")" "{" "}"\n' +
                'fn_def := fn # identifier "(" ")" "{" __2 "}"\n' +
                'fn_def := fn # identifier "(" param ")" "{" "}"\n' +
                'fn_def := fn # identifier "(" param ")" "{" __2 "}"\n' +
                'fn_def := fn # identifier "(" param __1 ")" "{" "}"\n' +
                'fn_def := fn # identifier "(" param __1 ")" "{" __2 "}"',
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def:
                "__0 := # fn_def\n" +
                "__0 := # fn_def __0\n" +
                "__0 := fn_def #\n" +
                "__0 := fn_def # __0\n" +
                'fn_def := # fn identifier "(" ")" "{" "}"\n' +
                'fn_def := # fn identifier "(" ")" "{" __2 "}"\n' +
                'fn_def := # fn identifier "(" param ")" "{" "}"\n' +
                'fn_def := # fn identifier "(" param ")" "{" __2 "}"\n' +
                'fn_def := # fn identifier "(" param __1 ")" "{" "}"\n' +
                'fn_def := # fn identifier "(" param __1 ")" "{" __2 "}"',
              '","': null,
              stmt: null,
            },
            str:
              "__0 := # fn_def\n" +
              "__0 := # fn_def __0\n" +
              "__0 := fn_def #\n" +
              "__0 := fn_def # __0\n" +
              'fn_def := # fn identifier "(" ")" "{" "}"\n' +
              'fn_def := # fn identifier "(" ")" "{" __2 "}"\n' +
              'fn_def := # fn identifier "(" param ")" "{" "}"\n' +
              'fn_def := # fn identifier "(" param ")" "{" __2 "}"\n' +
              'fn_def := # fn identifier "(" param __1 ")" "{" "}"\n' +
              'fn_def := # fn identifier "(" param __1 ")" "{" __2 "}"',
          },
        'fn_def := fn identifier # "(" ")" "{" "}"\nfn_def := fn identifier # "(" ")" "{" __2 "}"\nfn_def := fn identifier # "(" param ")" "{" "}"\nfn_def := fn identifier # "(" param ")" "{" __2 "}"\nfn_def := fn identifier # "(" param __1 ")" "{" "}"\nfn_def := fn identifier # "(" param __1 ")" "{" __2 "}"':
          {
            candidates: [
              'fn_def := fn identifier # "(" param __1 ")" "{" __2 "}"',
              'fn_def := fn identifier # "(" param __1 ")" "{" "}"',
              'fn_def := fn identifier # "(" param ")" "{" __2 "}"',
              'fn_def := fn identifier # "(" param ")" "{" "}"',
              'fn_def := fn identifier # "(" ")" "{" __2 "}"',
              'fn_def := fn identifier # "(" ")" "{" "}"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("':
                'fn_def := fn identifier "(" # ")" "{" "}"\n' +
                'fn_def := fn identifier "(" # ")" "{" __2 "}"\n' +
                'fn_def := fn identifier "(" # param ")" "{" "}"\n' +
                'fn_def := fn identifier "(" # param ")" "{" __2 "}"\n' +
                'fn_def := fn identifier "(" # param __1 ")" "{" "}"\n' +
                'fn_def := fn identifier "(" # param __1 ")" "{" __2 "}"\n' +
                "param := # identifier",
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'fn_def := fn identifier # "(" ")" "{" "}"\n' +
              'fn_def := fn identifier # "(" ")" "{" __2 "}"\n' +
              'fn_def := fn identifier # "(" param ")" "{" "}"\n' +
              'fn_def := fn identifier # "(" param ")" "{" __2 "}"\n' +
              'fn_def := fn identifier # "(" param __1 ")" "{" "}"\n' +
              'fn_def := fn identifier # "(" param __1 ")" "{" __2 "}"',
          },
        "__0 := fn_def __0 #": {
          candidates: ["__0 := fn_def __0 #"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: "__0 := fn_def __0 #",
        },
        'fn_def := fn identifier "(" # ")" "{" "}"\nfn_def := fn identifier "(" # ")" "{" __2 "}"\nfn_def := fn identifier "(" # param ")" "{" "}"\nfn_def := fn identifier "(" # param ")" "{" __2 "}"\nfn_def := fn identifier "(" # param __1 ")" "{" "}"\nfn_def := fn identifier "(" # param __1 ")" "{" __2 "}"\nparam := # identifier':
          {
            candidates: [
              'fn_def := fn identifier "(" # param __1 ")" "{" __2 "}"',
              'fn_def := fn identifier "(" # param __1 ")" "{" "}"',
              'fn_def := fn identifier "(" # param ")" "{" __2 "}"',
              'fn_def := fn identifier "(" # param ")" "{" "}"',
              'fn_def := fn identifier "(" # ")" "{" __2 "}"',
              'fn_def := fn identifier "(" # ")" "{" "}"',
              "param := # identifier",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "param := identifier #",
              '"("': null,
              param:
                '__1 := # "," param\n' +
                '__1 := # "," param __1\n' +
                'fn_def := fn identifier "(" param # ")" "{" "}"\n' +
                'fn_def := fn identifier "(" param # ")" "{" __2 "}"\n' +
                'fn_def := fn identifier "(" param # __1 ")" "{" "}"\n' +
                'fn_def := fn identifier "(" param # __1 ")" "{" __2 "}"',
              __1: null,
              '")"':
                'fn_def := fn identifier "(" ")" # "{" "}"\n' +
                'fn_def := fn identifier "(" ")" # "{" __2 "}"',
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'fn_def := fn identifier "(" # ")" "{" "}"\n' +
              'fn_def := fn identifier "(" # ")" "{" __2 "}"\n' +
              'fn_def := fn identifier "(" # param ")" "{" "}"\n' +
              'fn_def := fn identifier "(" # param ")" "{" __2 "}"\n' +
              'fn_def := fn identifier "(" # param __1 ")" "{" "}"\n' +
              'fn_def := fn identifier "(" # param __1 ")" "{" __2 "}"\n' +
              "param := # identifier",
          },
        "param := identifier #": {
          candidates: ["param := identifier #"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: "param := identifier #",
        },
        '__1 := # "," param\n__1 := # "," param __1\nfn_def := fn identifier "(" param # ")" "{" "}"\nfn_def := fn identifier "(" param # ")" "{" __2 "}"\nfn_def := fn identifier "(" param # __1 ")" "{" "}"\nfn_def := fn identifier "(" param # __1 ")" "{" __2 "}"':
          {
            candidates: [
              'fn_def := fn identifier "(" param # __1 ")" "{" __2 "}"',
              'fn_def := fn identifier "(" param # __1 ")" "{" "}"',
              'fn_def := fn identifier "(" param # ")" "{" __2 "}"',
              'fn_def := fn identifier "(" param # ")" "{" "}"',
              '__1 := # "," param',
              '__1 := # "," param __1',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1:
                'fn_def := fn identifier "(" param __1 # ")" "{" "}"\n' +
                'fn_def := fn identifier "(" param __1 # ")" "{" __2 "}"',
              '")"':
                'fn_def := fn identifier "(" param ")" # "{" "}"\n' +
                'fn_def := fn identifier "(" param ")" # "{" __2 "}"',
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","':
                '__1 := "," # param\n__1 := "," # param __1\nparam := # identifier',
              stmt: null,
            },
            str:
              '__1 := # "," param\n' +
              '__1 := # "," param __1\n' +
              'fn_def := fn identifier "(" param # ")" "{" "}"\n' +
              'fn_def := fn identifier "(" param # ")" "{" __2 "}"\n' +
              'fn_def := fn identifier "(" param # __1 ")" "{" "}"\n' +
              'fn_def := fn identifier "(" param # __1 ")" "{" __2 "}"',
          },
        'fn_def := fn identifier "(" ")" # "{" "}"\nfn_def := fn identifier "(" ")" # "{" __2 "}"':
          {
            candidates: [
              'fn_def := fn identifier "(" ")" # "{" __2 "}"',
              'fn_def := fn identifier "(" ")" # "{" "}"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"':
                "__2 := # stmt\n" +
                "__2 := # stmt __2\n" +
                'assign_stmt := # let identifier "=" exp ";"\n' +
                'decr_stmt := # "--" identifier ";"\n' +
                'decr_stmt := # identifier "--" ";"\n' +
                'fn_def := fn identifier "(" ")" "{" # "}"\n' +
                'fn_def := fn identifier "(" ")" "{" # __2 "}"\n' +
                'if_stmt := # if exp "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := # if exp "{" __3 "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
                'incr_stmt := # "++" identifier ";"\n' +
                'incr_stmt := # identifier "++" ";"\n' +
                'loop_stmt := # do "{" "}" while exp ";"\n' +
                'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
                'loop_stmt := # while exp "{" "}"\n' +
                'loop_stmt := # while exp "{" __2 "}"\n' +
                'ret_stmt := # return exp ";"\n' +
                "stmt := # assign_stmt\n" +
                "stmt := # decr_stmt\n" +
                "stmt := # if_stmt\n" +
                "stmt := # incr_stmt\n" +
                "stmt := # loop_stmt\n" +
                "stmt := # ret_stmt",
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'fn_def := fn identifier "(" ")" # "{" "}"\n' +
              'fn_def := fn identifier "(" ")" # "{" __2 "}"',
          },
        'fn_def := fn identifier "(" param __1 # ")" "{" "}"\nfn_def := fn identifier "(" param __1 # ")" "{" __2 "}"':
          {
            candidates: [
              'fn_def := fn identifier "(" param __1 # ")" "{" __2 "}"',
              'fn_def := fn identifier "(" param __1 # ")" "{" "}"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"':
                'fn_def := fn identifier "(" param __1 ")" # "{" "}"\n' +
                'fn_def := fn identifier "(" param __1 ")" # "{" __2 "}"',
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'fn_def := fn identifier "(" param __1 # ")" "{" "}"\n' +
              'fn_def := fn identifier "(" param __1 # ")" "{" __2 "}"',
          },
        'fn_def := fn identifier "(" param ")" # "{" "}"\nfn_def := fn identifier "(" param ")" # "{" __2 "}"':
          {
            candidates: [
              'fn_def := fn identifier "(" param ")" # "{" __2 "}"',
              'fn_def := fn identifier "(" param ")" # "{" "}"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"':
                "__2 := # stmt\n" +
                "__2 := # stmt __2\n" +
                'assign_stmt := # let identifier "=" exp ";"\n' +
                'decr_stmt := # "--" identifier ";"\n' +
                'decr_stmt := # identifier "--" ";"\n' +
                'fn_def := fn identifier "(" param ")" "{" # "}"\n' +
                'fn_def := fn identifier "(" param ")" "{" # __2 "}"\n' +
                'if_stmt := # if exp "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := # if exp "{" __3 "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
                'incr_stmt := # "++" identifier ";"\n' +
                'incr_stmt := # identifier "++" ";"\n' +
                'loop_stmt := # do "{" "}" while exp ";"\n' +
                'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
                'loop_stmt := # while exp "{" "}"\n' +
                'loop_stmt := # while exp "{" __2 "}"\n' +
                'ret_stmt := # return exp ";"\n' +
                "stmt := # assign_stmt\n" +
                "stmt := # decr_stmt\n" +
                "stmt := # if_stmt\n" +
                "stmt := # incr_stmt\n" +
                "stmt := # loop_stmt\n" +
                "stmt := # ret_stmt",
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'fn_def := fn identifier "(" param ")" # "{" "}"\n' +
              'fn_def := fn identifier "(" param ")" # "{" __2 "}"',
          },
        '__1 := "," # param\n__1 := "," # param __1\nparam := # identifier': {
          candidates: [
            '__1 := "," # param',
            '__1 := "," # param __1',
            "param := # identifier",
          ],
          nextMap: {
            __0: null,
            fn: null,
            identifier: "param := identifier #",
            '"("': null,
            param:
              '__1 := "," param #\n' +
              '__1 := "," param # __1\n' +
              '__1 := # "," param\n' +
              '__1 := # "," param __1',
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: '__1 := "," # param\n__1 := "," # param __1\nparam := # identifier',
        },
        '__2 := # stmt\n__2 := # stmt __2\nassign_stmt := # let identifier "=" exp ";"\ndecr_stmt := # "--" identifier ";"\ndecr_stmt := # identifier "--" ";"\nfn_def := fn identifier "(" ")" "{" # "}"\nfn_def := fn identifier "(" ")" "{" # __2 "}"\nif_stmt := # if exp "{" "}"\nif_stmt := # if exp "{" "}" else "{" "}"\nif_stmt := # if exp "{" "}" else "{" __4 "}"\nif_stmt := # if exp "{" __3 "}"\nif_stmt := # if exp "{" __3 "}" else "{" "}"\nif_stmt := # if exp "{" __3 "}" else "{" __4 "}"\nincr_stmt := # "++" identifier ";"\nincr_stmt := # identifier "++" ";"\nloop_stmt := # do "{" "}" while exp ";"\nloop_stmt := # do "{" __2 "}" while exp ";"\nloop_stmt := # while exp "{" "}"\nloop_stmt := # while exp "{" __2 "}"\nret_stmt := # return exp ";"\nstmt := # assign_stmt\nstmt := # decr_stmt\nstmt := # if_stmt\nstmt := # incr_stmt\nstmt := # loop_stmt\nstmt := # ret_stmt':
          {
            candidates: [
              'fn_def := fn identifier "(" ")" "{" # __2 "}"',
              'fn_def := fn identifier "(" ")" "{" # "}"',
              "__2 := # stmt",
              "__2 := # stmt __2",
              "stmt := # assign_stmt",
              "stmt := # ret_stmt",
              "stmt := # incr_stmt",
              "stmt := # decr_stmt",
              "stmt := # if_stmt",
              "stmt := # loop_stmt",
              'assign_stmt := # let identifier "=" exp ";"',
              'ret_stmt := # return exp ";"',
              'incr_stmt := # "++" identifier ";"',
              'incr_stmt := # identifier "++" ";"',
              'decr_stmt := # "--" identifier ";"',
              'decr_stmt := # identifier "--" ";"',
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" __3 "}" else "{" "}"',
              'if_stmt := # if exp "{" __3 "}"',
              'if_stmt := # if exp "{" "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" "}" else "{" "}"',
              'if_stmt := # if exp "{" "}"',
              'loop_stmt := # do "{" __2 "}" while exp ";"',
              'loop_stmt := # do "{" "}" while exp ";"',
              'loop_stmt := # while exp "{" __2 "}"',
              'loop_stmt := # while exp "{" "}"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier:
                'decr_stmt := identifier # "--" ";"\n' +
                'incr_stmt := identifier # "++" ";"',
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: 'fn_def := fn identifier "(" ")" "{" __2 # "}"',
              '"}"': 'fn_def := fn identifier "(" ")" "{" "}" #',
              if:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'if_stmt := if # exp "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := if # exp "{" __3 "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" __4 "}"',
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do:
                'loop_stmt := do # "{" "}" while exp ";"\n' +
                'loop_stmt := do # "{" __2 "}" while exp ";"',
              while:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'loop_stmt := while # exp "{" "}"\n' +
                'loop_stmt := while # exp "{" __2 "}"',
              '";"': null,
              '"++"': 'incr_stmt := "++" # identifier ";"',
              '"--"': 'decr_stmt := "--" # identifier ";"',
              assign_stmt: "stmt := assign_stmt #",
              ret_stmt: "stmt := ret_stmt #",
              incr_stmt: "stmt := incr_stmt #",
              decr_stmt: "stmt := decr_stmt #",
              if_stmt: "stmt := if_stmt #",
              loop_stmt: "stmt := loop_stmt #",
              let: 'assign_stmt := let # identifier "=" exp ";"',
              '"="': null,
              return:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'ret_stmt := return # exp ";"',
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt:
                "__2 := # stmt\n" +
                "__2 := # stmt __2\n" +
                "__2 := stmt #\n" +
                "__2 := stmt # __2\n" +
                'assign_stmt := # let identifier "=" exp ";"\n' +
                'decr_stmt := # "--" identifier ";"\n' +
                'decr_stmt := # identifier "--" ";"\n' +
                'if_stmt := # if exp "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := # if exp "{" __3 "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
                'incr_stmt := # "++" identifier ";"\n' +
                'incr_stmt := # identifier "++" ";"\n' +
                'loop_stmt := # do "{" "}" while exp ";"\n' +
                'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
                'loop_stmt := # while exp "{" "}"\n' +
                'loop_stmt := # while exp "{" __2 "}"\n' +
                'ret_stmt := # return exp ";"\n' +
                "stmt := # assign_stmt\n" +
                "stmt := # decr_stmt\n" +
                "stmt := # if_stmt\n" +
                "stmt := # incr_stmt\n" +
                "stmt := # loop_stmt\n" +
                "stmt := # ret_stmt",
            },
            str:
              "__2 := # stmt\n" +
              "__2 := # stmt __2\n" +
              'assign_stmt := # let identifier "=" exp ";"\n' +
              'decr_stmt := # "--" identifier ";"\n' +
              'decr_stmt := # identifier "--" ";"\n' +
              'fn_def := fn identifier "(" ")" "{" # "}"\n' +
              'fn_def := fn identifier "(" ")" "{" # __2 "}"\n' +
              'if_stmt := # if exp "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
              'if_stmt := # if exp "{" __3 "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
              'incr_stmt := # "++" identifier ";"\n' +
              'incr_stmt := # identifier "++" ";"\n' +
              'loop_stmt := # do "{" "}" while exp ";"\n' +
              'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
              'loop_stmt := # while exp "{" "}"\n' +
              'loop_stmt := # while exp "{" __2 "}"\n' +
              'ret_stmt := # return exp ";"\n' +
              "stmt := # assign_stmt\n" +
              "stmt := # decr_stmt\n" +
              "stmt := # if_stmt\n" +
              "stmt := # incr_stmt\n" +
              "stmt := # loop_stmt\n" +
              "stmt := # ret_stmt",
          },
        'fn_def := fn identifier "(" param __1 ")" # "{" "}"\nfn_def := fn identifier "(" param __1 ")" # "{" __2 "}"':
          {
            candidates: [
              'fn_def := fn identifier "(" param __1 ")" # "{" __2 "}"',
              'fn_def := fn identifier "(" param __1 ")" # "{" "}"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"':
                "__2 := # stmt\n" +
                "__2 := # stmt __2\n" +
                'assign_stmt := # let identifier "=" exp ";"\n' +
                'decr_stmt := # "--" identifier ";"\n' +
                'decr_stmt := # identifier "--" ";"\n' +
                'fn_def := fn identifier "(" param __1 ")" "{" # "}"\n' +
                'fn_def := fn identifier "(" param __1 ")" "{" # __2 "}"\n' +
                'if_stmt := # if exp "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := # if exp "{" __3 "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
                'incr_stmt := # "++" identifier ";"\n' +
                'incr_stmt := # identifier "++" ";"\n' +
                'loop_stmt := # do "{" "}" while exp ";"\n' +
                'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
                'loop_stmt := # while exp "{" "}"\n' +
                'loop_stmt := # while exp "{" __2 "}"\n' +
                'ret_stmt := # return exp ";"\n' +
                "stmt := # assign_stmt\n" +
                "stmt := # decr_stmt\n" +
                "stmt := # if_stmt\n" +
                "stmt := # incr_stmt\n" +
                "stmt := # loop_stmt\n" +
                "stmt := # ret_stmt",
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'fn_def := fn identifier "(" param __1 ")" # "{" "}"\n' +
              'fn_def := fn identifier "(" param __1 ")" # "{" __2 "}"',
          },
        '__2 := # stmt\n__2 := # stmt __2\nassign_stmt := # let identifier "=" exp ";"\ndecr_stmt := # "--" identifier ";"\ndecr_stmt := # identifier "--" ";"\nfn_def := fn identifier "(" param ")" "{" # "}"\nfn_def := fn identifier "(" param ")" "{" # __2 "}"\nif_stmt := # if exp "{" "}"\nif_stmt := # if exp "{" "}" else "{" "}"\nif_stmt := # if exp "{" "}" else "{" __4 "}"\nif_stmt := # if exp "{" __3 "}"\nif_stmt := # if exp "{" __3 "}" else "{" "}"\nif_stmt := # if exp "{" __3 "}" else "{" __4 "}"\nincr_stmt := # "++" identifier ";"\nincr_stmt := # identifier "++" ";"\nloop_stmt := # do "{" "}" while exp ";"\nloop_stmt := # do "{" __2 "}" while exp ";"\nloop_stmt := # while exp "{" "}"\nloop_stmt := # while exp "{" __2 "}"\nret_stmt := # return exp ";"\nstmt := # assign_stmt\nstmt := # decr_stmt\nstmt := # if_stmt\nstmt := # incr_stmt\nstmt := # loop_stmt\nstmt := # ret_stmt':
          {
            candidates: [
              'fn_def := fn identifier "(" param ")" "{" # __2 "}"',
              'fn_def := fn identifier "(" param ")" "{" # "}"',
              "__2 := # stmt",
              "__2 := # stmt __2",
              "stmt := # assign_stmt",
              "stmt := # ret_stmt",
              "stmt := # incr_stmt",
              "stmt := # decr_stmt",
              "stmt := # if_stmt",
              "stmt := # loop_stmt",
              'assign_stmt := # let identifier "=" exp ";"',
              'ret_stmt := # return exp ";"',
              'incr_stmt := # "++" identifier ";"',
              'incr_stmt := # identifier "++" ";"',
              'decr_stmt := # "--" identifier ";"',
              'decr_stmt := # identifier "--" ";"',
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" __3 "}" else "{" "}"',
              'if_stmt := # if exp "{" __3 "}"',
              'if_stmt := # if exp "{" "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" "}" else "{" "}"',
              'if_stmt := # if exp "{" "}"',
              'loop_stmt := # do "{" __2 "}" while exp ";"',
              'loop_stmt := # do "{" "}" while exp ";"',
              'loop_stmt := # while exp "{" __2 "}"',
              'loop_stmt := # while exp "{" "}"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier:
                'decr_stmt := identifier # "--" ";"\n' +
                'incr_stmt := identifier # "++" ";"',
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: 'fn_def := fn identifier "(" param ")" "{" __2 # "}"',
              '"}"': 'fn_def := fn identifier "(" param ")" "{" "}" #',
              if:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'if_stmt := if # exp "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := if # exp "{" __3 "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" __4 "}"',
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do:
                'loop_stmt := do # "{" "}" while exp ";"\n' +
                'loop_stmt := do # "{" __2 "}" while exp ";"',
              while:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'loop_stmt := while # exp "{" "}"\n' +
                'loop_stmt := while # exp "{" __2 "}"',
              '";"': null,
              '"++"': 'incr_stmt := "++" # identifier ";"',
              '"--"': 'decr_stmt := "--" # identifier ";"',
              assign_stmt: "stmt := assign_stmt #",
              ret_stmt: "stmt := ret_stmt #",
              incr_stmt: "stmt := incr_stmt #",
              decr_stmt: "stmt := decr_stmt #",
              if_stmt: "stmt := if_stmt #",
              loop_stmt: "stmt := loop_stmt #",
              let: 'assign_stmt := let # identifier "=" exp ";"',
              '"="': null,
              return:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'ret_stmt := return # exp ";"',
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt:
                "__2 := # stmt\n" +
                "__2 := # stmt __2\n" +
                "__2 := stmt #\n" +
                "__2 := stmt # __2\n" +
                'assign_stmt := # let identifier "=" exp ";"\n' +
                'decr_stmt := # "--" identifier ";"\n' +
                'decr_stmt := # identifier "--" ";"\n' +
                'if_stmt := # if exp "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := # if exp "{" __3 "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
                'incr_stmt := # "++" identifier ";"\n' +
                'incr_stmt := # identifier "++" ";"\n' +
                'loop_stmt := # do "{" "}" while exp ";"\n' +
                'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
                'loop_stmt := # while exp "{" "}"\n' +
                'loop_stmt := # while exp "{" __2 "}"\n' +
                'ret_stmt := # return exp ";"\n' +
                "stmt := # assign_stmt\n" +
                "stmt := # decr_stmt\n" +
                "stmt := # if_stmt\n" +
                "stmt := # incr_stmt\n" +
                "stmt := # loop_stmt\n" +
                "stmt := # ret_stmt",
            },
            str:
              "__2 := # stmt\n" +
              "__2 := # stmt __2\n" +
              'assign_stmt := # let identifier "=" exp ";"\n' +
              'decr_stmt := # "--" identifier ";"\n' +
              'decr_stmt := # identifier "--" ";"\n' +
              'fn_def := fn identifier "(" param ")" "{" # "}"\n' +
              'fn_def := fn identifier "(" param ")" "{" # __2 "}"\n' +
              'if_stmt := # if exp "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
              'if_stmt := # if exp "{" __3 "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
              'incr_stmt := # "++" identifier ";"\n' +
              'incr_stmt := # identifier "++" ";"\n' +
              'loop_stmt := # do "{" "}" while exp ";"\n' +
              'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
              'loop_stmt := # while exp "{" "}"\n' +
              'loop_stmt := # while exp "{" __2 "}"\n' +
              'ret_stmt := # return exp ";"\n' +
              "stmt := # assign_stmt\n" +
              "stmt := # decr_stmt\n" +
              "stmt := # if_stmt\n" +
              "stmt := # incr_stmt\n" +
              "stmt := # loop_stmt\n" +
              "stmt := # ret_stmt",
          },
        '__1 := "," param #\n__1 := "," param # __1\n__1 := # "," param\n__1 := # "," param __1':
          {
            candidates: [
              '__1 := "," param #',
              '__1 := "," param # __1',
              '__1 := # "," param',
              '__1 := # "," param __1',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: '__1 := "," param __1 #',
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","':
                '__1 := "," # param\n__1 := "," # param __1\nparam := # identifier',
              stmt: null,
            },
            str:
              '__1 := "," param #\n' +
              '__1 := "," param # __1\n' +
              '__1 := # "," param\n' +
              '__1 := # "," param __1',
          },
        'decr_stmt := identifier # "--" ";"\nincr_stmt := identifier # "++" ";"':
          {
            candidates: [
              'incr_stmt := identifier # "++" ";"',
              'decr_stmt := identifier # "--" ";"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': 'incr_stmt := identifier "++" # ";"',
              '"--"': 'decr_stmt := identifier "--" # ";"',
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'decr_stmt := identifier # "--" ";"\n' +
              'incr_stmt := identifier # "++" ";"',
          },
        'fn_def := fn identifier "(" ")" "{" __2 # "}"': {
          candidates: ['fn_def := fn identifier "(" ")" "{" __2 # "}"'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': 'fn_def := fn identifier "(" ")" "{" __2 "}" #',
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'fn_def := fn identifier "(" ")" "{" __2 # "}"',
        },
        'fn_def := fn identifier "(" ")" "{" "}" #': {
          candidates: ['fn_def := fn identifier "(" ")" "{" "}" #'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'fn_def := fn identifier "(" ")" "{" "}" #',
        },
        'exp := # "-" exp\nexp := # exp "%" exp\nexp := # exp "*" exp\nexp := # exp "+" exp\nexp := # exp "-" exp\nexp := # exp "/" exp\nexp := # identifier\nexp := # integer\nif_stmt := if # exp "{" "}"\nif_stmt := if # exp "{" "}" else "{" "}"\nif_stmt := if # exp "{" "}" else "{" __4 "}"\nif_stmt := if # exp "{" __3 "}"\nif_stmt := if # exp "{" __3 "}" else "{" "}"\nif_stmt := if # exp "{" __3 "}" else "{" __4 "}"':
          {
            candidates: [
              'if_stmt := if # exp "{" __3 "}" else "{" __4 "}"',
              'if_stmt := if # exp "{" __3 "}" else "{" "}"',
              'if_stmt := if # exp "{" __3 "}"',
              'if_stmt := if # exp "{" "}" else "{" __4 "}"',
              'if_stmt := if # exp "{" "}" else "{" "}"',
              'if_stmt := if # exp "{" "}"',
              'exp := # exp "+" exp',
              'exp := # exp "-" exp',
              'exp := # exp "*" exp',
              'exp := # exp "/" exp',
              'exp := # exp "%" exp',
              'exp := # "-" exp',
              "exp := # integer",
              "exp := # identifier",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "exp := identifier #",
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp:
                'exp := exp # "%" exp\n' +
                'exp := exp # "*" exp\n' +
                'exp := exp # "+" exp\n' +
                'exp := exp # "-" exp\n' +
                'exp := exp # "/" exp\n' +
                'if_stmt := if exp # "{" "}"\n' +
                'if_stmt := if exp # "{" "}" else "{" "}"\n' +
                'if_stmt := if exp # "{" "}" else "{" __4 "}"\n' +
                'if_stmt := if exp # "{" __3 "}"\n' +
                'if_stmt := if exp # "{" __3 "}" else "{" "}"\n' +
                'if_stmt := if exp # "{" __3 "}" else "{" __4 "}"',
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"':
                'exp := "-" # exp\n' +
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer",
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: "exp := integer #",
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := # "-" exp\n' +
              'exp := # exp "%" exp\n' +
              'exp := # exp "*" exp\n' +
              'exp := # exp "+" exp\n' +
              'exp := # exp "-" exp\n' +
              'exp := # exp "/" exp\n' +
              "exp := # identifier\n" +
              "exp := # integer\n" +
              'if_stmt := if # exp "{" "}"\n' +
              'if_stmt := if # exp "{" "}" else "{" "}"\n' +
              'if_stmt := if # exp "{" "}" else "{" __4 "}"\n' +
              'if_stmt := if # exp "{" __3 "}"\n' +
              'if_stmt := if # exp "{" __3 "}" else "{" "}"\n' +
              'if_stmt := if # exp "{" __3 "}" else "{" __4 "}"',
          },
        'loop_stmt := do # "{" "}" while exp ";"\nloop_stmt := do # "{" __2 "}" while exp ";"':
          {
            candidates: [
              'loop_stmt := do # "{" __2 "}" while exp ";"',
              'loop_stmt := do # "{" "}" while exp ";"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"':
                "__2 := # stmt\n" +
                "__2 := # stmt __2\n" +
                'assign_stmt := # let identifier "=" exp ";"\n' +
                'decr_stmt := # "--" identifier ";"\n' +
                'decr_stmt := # identifier "--" ";"\n' +
                'if_stmt := # if exp "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := # if exp "{" __3 "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
                'incr_stmt := # "++" identifier ";"\n' +
                'incr_stmt := # identifier "++" ";"\n' +
                'loop_stmt := # do "{" "}" while exp ";"\n' +
                'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
                'loop_stmt := # while exp "{" "}"\n' +
                'loop_stmt := # while exp "{" __2 "}"\n' +
                'loop_stmt := do "{" # "}" while exp ";"\n' +
                'loop_stmt := do "{" # __2 "}" while exp ";"\n' +
                'ret_stmt := # return exp ";"\n' +
                "stmt := # assign_stmt\n" +
                "stmt := # decr_stmt\n" +
                "stmt := # if_stmt\n" +
                "stmt := # incr_stmt\n" +
                "stmt := # loop_stmt\n" +
                "stmt := # ret_stmt",
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'loop_stmt := do # "{" "}" while exp ";"\n' +
              'loop_stmt := do # "{" __2 "}" while exp ";"',
          },
        'exp := # "-" exp\nexp := # exp "%" exp\nexp := # exp "*" exp\nexp := # exp "+" exp\nexp := # exp "-" exp\nexp := # exp "/" exp\nexp := # identifier\nexp := # integer\nloop_stmt := while # exp "{" "}"\nloop_stmt := while # exp "{" __2 "}"':
          {
            candidates: [
              'loop_stmt := while # exp "{" __2 "}"',
              'loop_stmt := while # exp "{" "}"',
              'exp := # exp "+" exp',
              'exp := # exp "-" exp',
              'exp := # exp "*" exp',
              'exp := # exp "/" exp',
              'exp := # exp "%" exp',
              'exp := # "-" exp',
              "exp := # integer",
              "exp := # identifier",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "exp := identifier #",
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp:
                'exp := exp # "%" exp\n' +
                'exp := exp # "*" exp\n' +
                'exp := exp # "+" exp\n' +
                'exp := exp # "-" exp\n' +
                'exp := exp # "/" exp\n' +
                'loop_stmt := while exp # "{" "}"\n' +
                'loop_stmt := while exp # "{" __2 "}"',
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"':
                'exp := "-" # exp\n' +
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer",
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: "exp := integer #",
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := # "-" exp\n' +
              'exp := # exp "%" exp\n' +
              'exp := # exp "*" exp\n' +
              'exp := # exp "+" exp\n' +
              'exp := # exp "-" exp\n' +
              'exp := # exp "/" exp\n' +
              "exp := # identifier\n" +
              "exp := # integer\n" +
              'loop_stmt := while # exp "{" "}"\n' +
              'loop_stmt := while # exp "{" __2 "}"',
          },
        'incr_stmt := "++" # identifier ";"': {
          candidates: ['incr_stmt := "++" # identifier ";"'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: 'incr_stmt := "++" identifier # ";"',
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'incr_stmt := "++" # identifier ";"',
        },
        'decr_stmt := "--" # identifier ";"': {
          candidates: ['decr_stmt := "--" # identifier ";"'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: 'decr_stmt := "--" identifier # ";"',
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'decr_stmt := "--" # identifier ";"',
        },
        "stmt := assign_stmt #": {
          candidates: ["stmt := assign_stmt #"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: "stmt := assign_stmt #",
        },
        "stmt := ret_stmt #": {
          candidates: ["stmt := ret_stmt #"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: "stmt := ret_stmt #",
        },
        "stmt := incr_stmt #": {
          candidates: ["stmt := incr_stmt #"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: "stmt := incr_stmt #",
        },
        "stmt := decr_stmt #": {
          candidates: ["stmt := decr_stmt #"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: "stmt := decr_stmt #",
        },
        "stmt := if_stmt #": {
          candidates: ["stmt := if_stmt #"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: "stmt := if_stmt #",
        },
        "stmt := loop_stmt #": {
          candidates: ["stmt := loop_stmt #"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: "stmt := loop_stmt #",
        },
        'assign_stmt := let # identifier "=" exp ";"': {
          candidates: ['assign_stmt := let # identifier "=" exp ";"'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: 'assign_stmt := let identifier # "=" exp ";"',
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'assign_stmt := let # identifier "=" exp ";"',
        },
        'exp := # "-" exp\nexp := # exp "%" exp\nexp := # exp "*" exp\nexp := # exp "+" exp\nexp := # exp "-" exp\nexp := # exp "/" exp\nexp := # identifier\nexp := # integer\nret_stmt := return # exp ";"':
          {
            candidates: [
              'ret_stmt := return # exp ";"',
              'exp := # exp "+" exp',
              'exp := # exp "-" exp',
              'exp := # exp "*" exp',
              'exp := # exp "/" exp',
              'exp := # exp "%" exp',
              'exp := # "-" exp',
              "exp := # integer",
              "exp := # identifier",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "exp := identifier #",
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp:
                'exp := exp # "%" exp\n' +
                'exp := exp # "*" exp\n' +
                'exp := exp # "+" exp\n' +
                'exp := exp # "-" exp\n' +
                'exp := exp # "/" exp\n' +
                'ret_stmt := return exp # ";"',
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"':
                'exp := "-" # exp\n' +
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer",
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: "exp := integer #",
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := # "-" exp\n' +
              'exp := # exp "%" exp\n' +
              'exp := # exp "*" exp\n' +
              'exp := # exp "+" exp\n' +
              'exp := # exp "-" exp\n' +
              'exp := # exp "/" exp\n' +
              "exp := # identifier\n" +
              "exp := # integer\n" +
              'ret_stmt := return # exp ";"',
          },
        '__2 := # stmt\n__2 := # stmt __2\n__2 := stmt #\n__2 := stmt # __2\nassign_stmt := # let identifier "=" exp ";"\ndecr_stmt := # "--" identifier ";"\ndecr_stmt := # identifier "--" ";"\nif_stmt := # if exp "{" "}"\nif_stmt := # if exp "{" "}" else "{" "}"\nif_stmt := # if exp "{" "}" else "{" __4 "}"\nif_stmt := # if exp "{" __3 "}"\nif_stmt := # if exp "{" __3 "}" else "{" "}"\nif_stmt := # if exp "{" __3 "}" else "{" __4 "}"\nincr_stmt := # "++" identifier ";"\nincr_stmt := # identifier "++" ";"\nloop_stmt := # do "{" "}" while exp ";"\nloop_stmt := # do "{" __2 "}" while exp ";"\nloop_stmt := # while exp "{" "}"\nloop_stmt := # while exp "{" __2 "}"\nret_stmt := # return exp ";"\nstmt := # assign_stmt\nstmt := # decr_stmt\nstmt := # if_stmt\nstmt := # incr_stmt\nstmt := # loop_stmt\nstmt := # ret_stmt':
          {
            candidates: [
              "__2 := stmt #",
              "__2 := stmt # __2",
              "__2 := # stmt",
              "__2 := # stmt __2",
              "stmt := # assign_stmt",
              "stmt := # ret_stmt",
              "stmt := # incr_stmt",
              "stmt := # decr_stmt",
              "stmt := # if_stmt",
              "stmt := # loop_stmt",
              'assign_stmt := # let identifier "=" exp ";"',
              'ret_stmt := # return exp ";"',
              'incr_stmt := # "++" identifier ";"',
              'incr_stmt := # identifier "++" ";"',
              'decr_stmt := # "--" identifier ";"',
              'decr_stmt := # identifier "--" ";"',
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" __3 "}" else "{" "}"',
              'if_stmt := # if exp "{" __3 "}"',
              'if_stmt := # if exp "{" "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" "}" else "{" "}"',
              'if_stmt := # if exp "{" "}"',
              'loop_stmt := # do "{" __2 "}" while exp ";"',
              'loop_stmt := # do "{" "}" while exp ";"',
              'loop_stmt := # while exp "{" __2 "}"',
              'loop_stmt := # while exp "{" "}"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier:
                'decr_stmt := identifier # "--" ";"\n' +
                'incr_stmt := identifier # "++" ";"',
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: "__2 := stmt __2 #",
              '"}"': null,
              if:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'if_stmt := if # exp "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := if # exp "{" __3 "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" __4 "}"',
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do:
                'loop_stmt := do # "{" "}" while exp ";"\n' +
                'loop_stmt := do # "{" __2 "}" while exp ";"',
              while:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'loop_stmt := while # exp "{" "}"\n' +
                'loop_stmt := while # exp "{" __2 "}"',
              '";"': null,
              '"++"': 'incr_stmt := "++" # identifier ";"',
              '"--"': 'decr_stmt := "--" # identifier ";"',
              assign_stmt: "stmt := assign_stmt #",
              ret_stmt: "stmt := ret_stmt #",
              incr_stmt: "stmt := incr_stmt #",
              decr_stmt: "stmt := decr_stmt #",
              if_stmt: "stmt := if_stmt #",
              loop_stmt: "stmt := loop_stmt #",
              let: 'assign_stmt := let # identifier "=" exp ";"',
              '"="': null,
              return:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'ret_stmt := return # exp ";"',
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt:
                "__2 := # stmt\n" +
                "__2 := # stmt __2\n" +
                "__2 := stmt #\n" +
                "__2 := stmt # __2\n" +
                'assign_stmt := # let identifier "=" exp ";"\n' +
                'decr_stmt := # "--" identifier ";"\n' +
                'decr_stmt := # identifier "--" ";"\n' +
                'if_stmt := # if exp "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := # if exp "{" __3 "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
                'incr_stmt := # "++" identifier ";"\n' +
                'incr_stmt := # identifier "++" ";"\n' +
                'loop_stmt := # do "{" "}" while exp ";"\n' +
                'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
                'loop_stmt := # while exp "{" "}"\n' +
                'loop_stmt := # while exp "{" __2 "}"\n' +
                'ret_stmt := # return exp ";"\n' +
                "stmt := # assign_stmt\n" +
                "stmt := # decr_stmt\n" +
                "stmt := # if_stmt\n" +
                "stmt := # incr_stmt\n" +
                "stmt := # loop_stmt\n" +
                "stmt := # ret_stmt",
            },
            str:
              "__2 := # stmt\n" +
              "__2 := # stmt __2\n" +
              "__2 := stmt #\n" +
              "__2 := stmt # __2\n" +
              'assign_stmt := # let identifier "=" exp ";"\n' +
              'decr_stmt := # "--" identifier ";"\n' +
              'decr_stmt := # identifier "--" ";"\n' +
              'if_stmt := # if exp "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
              'if_stmt := # if exp "{" __3 "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
              'incr_stmt := # "++" identifier ";"\n' +
              'incr_stmt := # identifier "++" ";"\n' +
              'loop_stmt := # do "{" "}" while exp ";"\n' +
              'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
              'loop_stmt := # while exp "{" "}"\n' +
              'loop_stmt := # while exp "{" __2 "}"\n' +
              'ret_stmt := # return exp ";"\n' +
              "stmt := # assign_stmt\n" +
              "stmt := # decr_stmt\n" +
              "stmt := # if_stmt\n" +
              "stmt := # incr_stmt\n" +
              "stmt := # loop_stmt\n" +
              "stmt := # ret_stmt",
          },
        '__2 := # stmt\n__2 := # stmt __2\nassign_stmt := # let identifier "=" exp ";"\ndecr_stmt := # "--" identifier ";"\ndecr_stmt := # identifier "--" ";"\nfn_def := fn identifier "(" param __1 ")" "{" # "}"\nfn_def := fn identifier "(" param __1 ")" "{" # __2 "}"\nif_stmt := # if exp "{" "}"\nif_stmt := # if exp "{" "}" else "{" "}"\nif_stmt := # if exp "{" "}" else "{" __4 "}"\nif_stmt := # if exp "{" __3 "}"\nif_stmt := # if exp "{" __3 "}" else "{" "}"\nif_stmt := # if exp "{" __3 "}" else "{" __4 "}"\nincr_stmt := # "++" identifier ";"\nincr_stmt := # identifier "++" ";"\nloop_stmt := # do "{" "}" while exp ";"\nloop_stmt := # do "{" __2 "}" while exp ";"\nloop_stmt := # while exp "{" "}"\nloop_stmt := # while exp "{" __2 "}"\nret_stmt := # return exp ";"\nstmt := # assign_stmt\nstmt := # decr_stmt\nstmt := # if_stmt\nstmt := # incr_stmt\nstmt := # loop_stmt\nstmt := # ret_stmt':
          {
            candidates: [
              'fn_def := fn identifier "(" param __1 ")" "{" # __2 "}"',
              'fn_def := fn identifier "(" param __1 ")" "{" # "}"',
              "__2 := # stmt",
              "__2 := # stmt __2",
              "stmt := # assign_stmt",
              "stmt := # ret_stmt",
              "stmt := # incr_stmt",
              "stmt := # decr_stmt",
              "stmt := # if_stmt",
              "stmt := # loop_stmt",
              'assign_stmt := # let identifier "=" exp ";"',
              'ret_stmt := # return exp ";"',
              'incr_stmt := # "++" identifier ";"',
              'incr_stmt := # identifier "++" ";"',
              'decr_stmt := # "--" identifier ";"',
              'decr_stmt := # identifier "--" ";"',
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" __3 "}" else "{" "}"',
              'if_stmt := # if exp "{" __3 "}"',
              'if_stmt := # if exp "{" "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" "}" else "{" "}"',
              'if_stmt := # if exp "{" "}"',
              'loop_stmt := # do "{" __2 "}" while exp ";"',
              'loop_stmt := # do "{" "}" while exp ";"',
              'loop_stmt := # while exp "{" __2 "}"',
              'loop_stmt := # while exp "{" "}"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier:
                'decr_stmt := identifier # "--" ";"\n' +
                'incr_stmt := identifier # "++" ";"',
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: 'fn_def := fn identifier "(" param __1 ")" "{" __2 # "}"',
              '"}"': 'fn_def := fn identifier "(" param __1 ")" "{" "}" #',
              if:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'if_stmt := if # exp "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := if # exp "{" __3 "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" __4 "}"',
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do:
                'loop_stmt := do # "{" "}" while exp ";"\n' +
                'loop_stmt := do # "{" __2 "}" while exp ";"',
              while:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'loop_stmt := while # exp "{" "}"\n' +
                'loop_stmt := while # exp "{" __2 "}"',
              '";"': null,
              '"++"': 'incr_stmt := "++" # identifier ";"',
              '"--"': 'decr_stmt := "--" # identifier ";"',
              assign_stmt: "stmt := assign_stmt #",
              ret_stmt: "stmt := ret_stmt #",
              incr_stmt: "stmt := incr_stmt #",
              decr_stmt: "stmt := decr_stmt #",
              if_stmt: "stmt := if_stmt #",
              loop_stmt: "stmt := loop_stmt #",
              let: 'assign_stmt := let # identifier "=" exp ";"',
              '"="': null,
              return:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'ret_stmt := return # exp ";"',
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt:
                "__2 := # stmt\n" +
                "__2 := # stmt __2\n" +
                "__2 := stmt #\n" +
                "__2 := stmt # __2\n" +
                'assign_stmt := # let identifier "=" exp ";"\n' +
                'decr_stmt := # "--" identifier ";"\n' +
                'decr_stmt := # identifier "--" ";"\n' +
                'if_stmt := # if exp "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := # if exp "{" __3 "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
                'incr_stmt := # "++" identifier ";"\n' +
                'incr_stmt := # identifier "++" ";"\n' +
                'loop_stmt := # do "{" "}" while exp ";"\n' +
                'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
                'loop_stmt := # while exp "{" "}"\n' +
                'loop_stmt := # while exp "{" __2 "}"\n' +
                'ret_stmt := # return exp ";"\n' +
                "stmt := # assign_stmt\n" +
                "stmt := # decr_stmt\n" +
                "stmt := # if_stmt\n" +
                "stmt := # incr_stmt\n" +
                "stmt := # loop_stmt\n" +
                "stmt := # ret_stmt",
            },
            str:
              "__2 := # stmt\n" +
              "__2 := # stmt __2\n" +
              'assign_stmt := # let identifier "=" exp ";"\n' +
              'decr_stmt := # "--" identifier ";"\n' +
              'decr_stmt := # identifier "--" ";"\n' +
              'fn_def := fn identifier "(" param __1 ")" "{" # "}"\n' +
              'fn_def := fn identifier "(" param __1 ")" "{" # __2 "}"\n' +
              'if_stmt := # if exp "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
              'if_stmt := # if exp "{" __3 "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
              'incr_stmt := # "++" identifier ";"\n' +
              'incr_stmt := # identifier "++" ";"\n' +
              'loop_stmt := # do "{" "}" while exp ";"\n' +
              'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
              'loop_stmt := # while exp "{" "}"\n' +
              'loop_stmt := # while exp "{" __2 "}"\n' +
              'ret_stmt := # return exp ";"\n' +
              "stmt := # assign_stmt\n" +
              "stmt := # decr_stmt\n" +
              "stmt := # if_stmt\n" +
              "stmt := # incr_stmt\n" +
              "stmt := # loop_stmt\n" +
              "stmt := # ret_stmt",
          },
        'fn_def := fn identifier "(" param ")" "{" __2 # "}"': {
          candidates: ['fn_def := fn identifier "(" param ")" "{" __2 # "}"'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': 'fn_def := fn identifier "(" param ")" "{" __2 "}" #',
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'fn_def := fn identifier "(" param ")" "{" __2 # "}"',
        },
        'fn_def := fn identifier "(" param ")" "{" "}" #': {
          candidates: ['fn_def := fn identifier "(" param ")" "{" "}" #'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'fn_def := fn identifier "(" param ")" "{" "}" #',
        },
        '__1 := "," param __1 #': {
          candidates: ['__1 := "," param __1 #'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: '__1 := "," param __1 #',
        },
        'incr_stmt := identifier "++" # ";"': {
          candidates: ['incr_stmt := identifier "++" # ";"'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': 'incr_stmt := identifier "++" ";" #',
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'incr_stmt := identifier "++" # ";"',
        },
        'decr_stmt := identifier "--" # ";"': {
          candidates: ['decr_stmt := identifier "--" # ";"'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': 'decr_stmt := identifier "--" ";" #',
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'decr_stmt := identifier "--" # ";"',
        },
        'fn_def := fn identifier "(" ")" "{" __2 "}" #': {
          candidates: ['fn_def := fn identifier "(" ")" "{" __2 "}" #'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'fn_def := fn identifier "(" ")" "{" __2 "}" #',
        },
        "exp := identifier #": {
          candidates: ["exp := identifier #"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: "exp := identifier #",
        },
        'exp := exp # "%" exp\nexp := exp # "*" exp\nexp := exp # "+" exp\nexp := exp # "-" exp\nexp := exp # "/" exp\nif_stmt := if exp # "{" "}"\nif_stmt := if exp # "{" "}" else "{" "}"\nif_stmt := if exp # "{" "}" else "{" __4 "}"\nif_stmt := if exp # "{" __3 "}"\nif_stmt := if exp # "{" __3 "}" else "{" "}"\nif_stmt := if exp # "{" __3 "}" else "{" __4 "}"':
          {
            candidates: [
              'if_stmt := if exp # "{" __3 "}" else "{" __4 "}"',
              'if_stmt := if exp # "{" __3 "}" else "{" "}"',
              'if_stmt := if exp # "{" __3 "}"',
              'if_stmt := if exp # "{" "}" else "{" __4 "}"',
              'if_stmt := if exp # "{" "}" else "{" "}"',
              'if_stmt := if exp # "{" "}"',
              'exp := exp # "+" exp',
              'exp := exp # "-" exp',
              'exp := exp # "*" exp',
              'exp := exp # "/" exp',
              'exp := exp # "%" exp',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"':
                "__3 := # stmt@ifTrue\n" +
                "__3 := # stmt@ifTrue __3\n" +
                'assign_stmt := # let identifier "=" exp ";"\n' +
                'decr_stmt := # "--" identifier ";"\n' +
                'decr_stmt := # identifier "--" ";"\n' +
                'if_stmt := # if exp "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := # if exp "{" __3 "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
                'if_stmt := if exp "{" # "}"\n' +
                'if_stmt := if exp "{" # "}" else "{" "}"\n' +
                'if_stmt := if exp "{" # "}" else "{" __4 "}"\n' +
                'if_stmt := if exp "{" # __3 "}"\n' +
                'if_stmt := if exp "{" # __3 "}" else "{" "}"\n' +
                'if_stmt := if exp "{" # __3 "}" else "{" __4 "}"\n' +
                'incr_stmt := # "++" identifier ";"\n' +
                'incr_stmt := # identifier "++" ";"\n' +
                'loop_stmt := # do "{" "}" while exp ";"\n' +
                'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
                'loop_stmt := # while exp "{" "}"\n' +
                'loop_stmt := # while exp "{" __2 "}"\n' +
                'ret_stmt := # return exp ";"\n' +
                "stmt := # assign_stmt\n" +
                "stmt := # decr_stmt\n" +
                "stmt := # if_stmt\n" +
                "stmt := # incr_stmt\n" +
                "stmt := # loop_stmt\n" +
                "stmt := # ret_stmt",
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "+" # exp',
              '"-"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "-" # exp',
              '"*"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "*" # exp',
              '"/"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "/" # exp',
              '"%"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "%" # exp',
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := exp # "%" exp\n' +
              'exp := exp # "*" exp\n' +
              'exp := exp # "+" exp\n' +
              'exp := exp # "-" exp\n' +
              'exp := exp # "/" exp\n' +
              'if_stmt := if exp # "{" "}"\n' +
              'if_stmt := if exp # "{" "}" else "{" "}"\n' +
              'if_stmt := if exp # "{" "}" else "{" __4 "}"\n' +
              'if_stmt := if exp # "{" __3 "}"\n' +
              'if_stmt := if exp # "{" __3 "}" else "{" "}"\n' +
              'if_stmt := if exp # "{" __3 "}" else "{" __4 "}"',
          },
        'exp := "-" # exp\nexp := # "-" exp\nexp := # exp "%" exp\nexp := # exp "*" exp\nexp := # exp "+" exp\nexp := # exp "-" exp\nexp := # exp "/" exp\nexp := # identifier\nexp := # integer':
          {
            candidates: [
              'exp := "-" # exp',
              'exp := # exp "+" exp',
              'exp := # exp "-" exp',
              'exp := # exp "*" exp',
              'exp := # exp "/" exp',
              'exp := # exp "%" exp',
              'exp := # "-" exp',
              "exp := # integer",
              "exp := # identifier",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "exp := identifier #",
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp:
                'exp := "-" exp #\n' +
                'exp := exp # "%" exp\n' +
                'exp := exp # "*" exp\n' +
                'exp := exp # "+" exp\n' +
                'exp := exp # "-" exp\n' +
                'exp := exp # "/" exp',
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"':
                'exp := "-" # exp\n' +
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer",
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: "exp := integer #",
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := "-" # exp\n' +
              'exp := # "-" exp\n' +
              'exp := # exp "%" exp\n' +
              'exp := # exp "*" exp\n' +
              'exp := # exp "+" exp\n' +
              'exp := # exp "-" exp\n' +
              'exp := # exp "/" exp\n' +
              "exp := # identifier\n" +
              "exp := # integer",
          },
        "exp := integer #": {
          candidates: ["exp := integer #"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: "exp := integer #",
        },
        '__2 := # stmt\n__2 := # stmt __2\nassign_stmt := # let identifier "=" exp ";"\ndecr_stmt := # "--" identifier ";"\ndecr_stmt := # identifier "--" ";"\nif_stmt := # if exp "{" "}"\nif_stmt := # if exp "{" "}" else "{" "}"\nif_stmt := # if exp "{" "}" else "{" __4 "}"\nif_stmt := # if exp "{" __3 "}"\nif_stmt := # if exp "{" __3 "}" else "{" "}"\nif_stmt := # if exp "{" __3 "}" else "{" __4 "}"\nincr_stmt := # "++" identifier ";"\nincr_stmt := # identifier "++" ";"\nloop_stmt := # do "{" "}" while exp ";"\nloop_stmt := # do "{" __2 "}" while exp ";"\nloop_stmt := # while exp "{" "}"\nloop_stmt := # while exp "{" __2 "}"\nloop_stmt := do "{" # "}" while exp ";"\nloop_stmt := do "{" # __2 "}" while exp ";"\nret_stmt := # return exp ";"\nstmt := # assign_stmt\nstmt := # decr_stmt\nstmt := # if_stmt\nstmt := # incr_stmt\nstmt := # loop_stmt\nstmt := # ret_stmt':
          {
            candidates: [
              'loop_stmt := do "{" # __2 "}" while exp ";"',
              'loop_stmt := do "{" # "}" while exp ";"',
              "__2 := # stmt",
              "__2 := # stmt __2",
              "stmt := # assign_stmt",
              "stmt := # ret_stmt",
              "stmt := # incr_stmt",
              "stmt := # decr_stmt",
              "stmt := # if_stmt",
              "stmt := # loop_stmt",
              'assign_stmt := # let identifier "=" exp ";"',
              'ret_stmt := # return exp ";"',
              'incr_stmt := # "++" identifier ";"',
              'incr_stmt := # identifier "++" ";"',
              'decr_stmt := # "--" identifier ";"',
              'decr_stmt := # identifier "--" ";"',
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" __3 "}" else "{" "}"',
              'if_stmt := # if exp "{" __3 "}"',
              'if_stmt := # if exp "{" "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" "}" else "{" "}"',
              'if_stmt := # if exp "{" "}"',
              'loop_stmt := # do "{" __2 "}" while exp ";"',
              'loop_stmt := # do "{" "}" while exp ";"',
              'loop_stmt := # while exp "{" __2 "}"',
              'loop_stmt := # while exp "{" "}"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier:
                'decr_stmt := identifier # "--" ";"\n' +
                'incr_stmt := identifier # "++" ";"',
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: 'loop_stmt := do "{" __2 # "}" while exp ";"',
              '"}"': 'loop_stmt := do "{" "}" # while exp ";"',
              if:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'if_stmt := if # exp "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := if # exp "{" __3 "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" __4 "}"',
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do:
                'loop_stmt := do # "{" "}" while exp ";"\n' +
                'loop_stmt := do # "{" __2 "}" while exp ";"',
              while:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'loop_stmt := while # exp "{" "}"\n' +
                'loop_stmt := while # exp "{" __2 "}"',
              '";"': null,
              '"++"': 'incr_stmt := "++" # identifier ";"',
              '"--"': 'decr_stmt := "--" # identifier ";"',
              assign_stmt: "stmt := assign_stmt #",
              ret_stmt: "stmt := ret_stmt #",
              incr_stmt: "stmt := incr_stmt #",
              decr_stmt: "stmt := decr_stmt #",
              if_stmt: "stmt := if_stmt #",
              loop_stmt: "stmt := loop_stmt #",
              let: 'assign_stmt := let # identifier "=" exp ";"',
              '"="': null,
              return:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'ret_stmt := return # exp ";"',
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt:
                "__2 := # stmt\n" +
                "__2 := # stmt __2\n" +
                "__2 := stmt #\n" +
                "__2 := stmt # __2\n" +
                'assign_stmt := # let identifier "=" exp ";"\n' +
                'decr_stmt := # "--" identifier ";"\n' +
                'decr_stmt := # identifier "--" ";"\n' +
                'if_stmt := # if exp "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := # if exp "{" __3 "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
                'incr_stmt := # "++" identifier ";"\n' +
                'incr_stmt := # identifier "++" ";"\n' +
                'loop_stmt := # do "{" "}" while exp ";"\n' +
                'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
                'loop_stmt := # while exp "{" "}"\n' +
                'loop_stmt := # while exp "{" __2 "}"\n' +
                'ret_stmt := # return exp ";"\n' +
                "stmt := # assign_stmt\n" +
                "stmt := # decr_stmt\n" +
                "stmt := # if_stmt\n" +
                "stmt := # incr_stmt\n" +
                "stmt := # loop_stmt\n" +
                "stmt := # ret_stmt",
            },
            str:
              "__2 := # stmt\n" +
              "__2 := # stmt __2\n" +
              'assign_stmt := # let identifier "=" exp ";"\n' +
              'decr_stmt := # "--" identifier ";"\n' +
              'decr_stmt := # identifier "--" ";"\n' +
              'if_stmt := # if exp "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
              'if_stmt := # if exp "{" __3 "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
              'incr_stmt := # "++" identifier ";"\n' +
              'incr_stmt := # identifier "++" ";"\n' +
              'loop_stmt := # do "{" "}" while exp ";"\n' +
              'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
              'loop_stmt := # while exp "{" "}"\n' +
              'loop_stmt := # while exp "{" __2 "}"\n' +
              'loop_stmt := do "{" # "}" while exp ";"\n' +
              'loop_stmt := do "{" # __2 "}" while exp ";"\n' +
              'ret_stmt := # return exp ";"\n' +
              "stmt := # assign_stmt\n" +
              "stmt := # decr_stmt\n" +
              "stmt := # if_stmt\n" +
              "stmt := # incr_stmt\n" +
              "stmt := # loop_stmt\n" +
              "stmt := # ret_stmt",
          },
        'exp := exp # "%" exp\nexp := exp # "*" exp\nexp := exp # "+" exp\nexp := exp # "-" exp\nexp := exp # "/" exp\nloop_stmt := while exp # "{" "}"\nloop_stmt := while exp # "{" __2 "}"':
          {
            candidates: [
              'loop_stmt := while exp # "{" __2 "}"',
              'loop_stmt := while exp # "{" "}"',
              'exp := exp # "+" exp',
              'exp := exp # "-" exp',
              'exp := exp # "*" exp',
              'exp := exp # "/" exp',
              'exp := exp # "%" exp',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"':
                "__2 := # stmt\n" +
                "__2 := # stmt __2\n" +
                'assign_stmt := # let identifier "=" exp ";"\n' +
                'decr_stmt := # "--" identifier ";"\n' +
                'decr_stmt := # identifier "--" ";"\n' +
                'if_stmt := # if exp "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := # if exp "{" __3 "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
                'incr_stmt := # "++" identifier ";"\n' +
                'incr_stmt := # identifier "++" ";"\n' +
                'loop_stmt := # do "{" "}" while exp ";"\n' +
                'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
                'loop_stmt := # while exp "{" "}"\n' +
                'loop_stmt := # while exp "{" __2 "}"\n' +
                'loop_stmt := while exp "{" # "}"\n' +
                'loop_stmt := while exp "{" # __2 "}"\n' +
                'ret_stmt := # return exp ";"\n' +
                "stmt := # assign_stmt\n" +
                "stmt := # decr_stmt\n" +
                "stmt := # if_stmt\n" +
                "stmt := # incr_stmt\n" +
                "stmt := # loop_stmt\n" +
                "stmt := # ret_stmt",
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "+" # exp',
              '"-"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "-" # exp',
              '"*"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "*" # exp',
              '"/"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "/" # exp',
              '"%"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "%" # exp',
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := exp # "%" exp\n' +
              'exp := exp # "*" exp\n' +
              'exp := exp # "+" exp\n' +
              'exp := exp # "-" exp\n' +
              'exp := exp # "/" exp\n' +
              'loop_stmt := while exp # "{" "}"\n' +
              'loop_stmt := while exp # "{" __2 "}"',
          },
        'incr_stmt := "++" identifier # ";"': {
          candidates: ['incr_stmt := "++" identifier # ";"'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': 'incr_stmt := "++" identifier ";" #',
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'incr_stmt := "++" identifier # ";"',
        },
        'decr_stmt := "--" identifier # ";"': {
          candidates: ['decr_stmt := "--" identifier # ";"'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': 'decr_stmt := "--" identifier ";" #',
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'decr_stmt := "--" identifier # ";"',
        },
        'assign_stmt := let identifier # "=" exp ";"': {
          candidates: ['assign_stmt := let identifier # "=" exp ";"'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="':
              'assign_stmt := let identifier "=" # exp ";"\n' +
              'exp := # "-" exp\n' +
              'exp := # exp "%" exp\n' +
              'exp := # exp "*" exp\n' +
              'exp := # exp "+" exp\n' +
              'exp := # exp "-" exp\n' +
              'exp := # exp "/" exp\n' +
              "exp := # identifier\n" +
              "exp := # integer",
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'assign_stmt := let identifier # "=" exp ";"',
        },
        'exp := exp # "%" exp\nexp := exp # "*" exp\nexp := exp # "+" exp\nexp := exp # "-" exp\nexp := exp # "/" exp\nret_stmt := return exp # ";"':
          {
            candidates: [
              'ret_stmt := return exp # ";"',
              'exp := exp # "+" exp',
              'exp := exp # "-" exp',
              'exp := exp # "*" exp',
              'exp := exp # "/" exp',
              'exp := exp # "%" exp',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': 'ret_stmt := return exp ";" #',
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "+" # exp',
              '"-"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "-" # exp',
              '"*"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "*" # exp',
              '"/"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "/" # exp',
              '"%"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "%" # exp',
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := exp # "%" exp\n' +
              'exp := exp # "*" exp\n' +
              'exp := exp # "+" exp\n' +
              'exp := exp # "-" exp\n' +
              'exp := exp # "/" exp\n' +
              'ret_stmt := return exp # ";"',
          },
        "__2 := stmt __2 #": {
          candidates: ["__2 := stmt __2 #"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: "__2 := stmt __2 #",
        },
        'fn_def := fn identifier "(" param __1 ")" "{" __2 # "}"': {
          candidates: [
            'fn_def := fn identifier "(" param __1 ")" "{" __2 # "}"',
          ],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': 'fn_def := fn identifier "(" param __1 ")" "{" __2 "}" #',
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'fn_def := fn identifier "(" param __1 ")" "{" __2 # "}"',
        },
        'fn_def := fn identifier "(" param __1 ")" "{" "}" #': {
          candidates: ['fn_def := fn identifier "(" param __1 ")" "{" "}" #'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'fn_def := fn identifier "(" param __1 ")" "{" "}" #',
        },
        'fn_def := fn identifier "(" param ")" "{" __2 "}" #': {
          candidates: ['fn_def := fn identifier "(" param ")" "{" __2 "}" #'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'fn_def := fn identifier "(" param ")" "{" __2 "}" #',
        },
        'incr_stmt := identifier "++" ";" #': {
          candidates: ['incr_stmt := identifier "++" ";" #'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'incr_stmt := identifier "++" ";" #',
        },
        'decr_stmt := identifier "--" ";" #': {
          candidates: ['decr_stmt := identifier "--" ";" #'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'decr_stmt := identifier "--" ";" #',
        },
        '__3 := # stmt@ifTrue\n__3 := # stmt@ifTrue __3\nassign_stmt := # let identifier "=" exp ";"\ndecr_stmt := # "--" identifier ";"\ndecr_stmt := # identifier "--" ";"\nif_stmt := # if exp "{" "}"\nif_stmt := # if exp "{" "}" else "{" "}"\nif_stmt := # if exp "{" "}" else "{" __4 "}"\nif_stmt := # if exp "{" __3 "}"\nif_stmt := # if exp "{" __3 "}" else "{" "}"\nif_stmt := # if exp "{" __3 "}" else "{" __4 "}"\nif_stmt := if exp "{" # "}"\nif_stmt := if exp "{" # "}" else "{" "}"\nif_stmt := if exp "{" # "}" else "{" __4 "}"\nif_stmt := if exp "{" # __3 "}"\nif_stmt := if exp "{" # __3 "}" else "{" "}"\nif_stmt := if exp "{" # __3 "}" else "{" __4 "}"\nincr_stmt := # "++" identifier ";"\nincr_stmt := # identifier "++" ";"\nloop_stmt := # do "{" "}" while exp ";"\nloop_stmt := # do "{" __2 "}" while exp ";"\nloop_stmt := # while exp "{" "}"\nloop_stmt := # while exp "{" __2 "}"\nret_stmt := # return exp ";"\nstmt := # assign_stmt\nstmt := # decr_stmt\nstmt := # if_stmt\nstmt := # incr_stmt\nstmt := # loop_stmt\nstmt := # ret_stmt':
          {
            candidates: [
              'if_stmt := if exp "{" # __3 "}" else "{" __4 "}"',
              'if_stmt := if exp "{" # __3 "}" else "{" "}"',
              'if_stmt := if exp "{" # __3 "}"',
              'if_stmt := if exp "{" # "}" else "{" __4 "}"',
              'if_stmt := if exp "{" # "}" else "{" "}"',
              'if_stmt := if exp "{" # "}"',
              "__3 := # stmt@ifTrue",
              "__3 := # stmt@ifTrue __3",
              "stmt := # assign_stmt",
              "stmt := # ret_stmt",
              "stmt := # incr_stmt",
              "stmt := # decr_stmt",
              "stmt := # if_stmt",
              "stmt := # loop_stmt",
              'assign_stmt := # let identifier "=" exp ";"',
              'ret_stmt := # return exp ";"',
              'incr_stmt := # "++" identifier ";"',
              'incr_stmt := # identifier "++" ";"',
              'decr_stmt := # "--" identifier ";"',
              'decr_stmt := # identifier "--" ";"',
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" __3 "}" else "{" "}"',
              'if_stmt := # if exp "{" __3 "}"',
              'if_stmt := # if exp "{" "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" "}" else "{" "}"',
              'if_stmt := # if exp "{" "}"',
              'loop_stmt := # do "{" __2 "}" while exp ";"',
              'loop_stmt := # do "{" "}" while exp ";"',
              'loop_stmt := # while exp "{" __2 "}"',
              'loop_stmt := # while exp "{" "}"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier:
                'decr_stmt := identifier # "--" ";"\n' +
                'incr_stmt := identifier # "++" ";"',
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"':
                'if_stmt := if exp "{" "}" #\n' +
                'if_stmt := if exp "{" "}" # else "{" "}"\n' +
                'if_stmt := if exp "{" "}" # else "{" __4 "}"',
              if:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'if_stmt := if # exp "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := if # exp "{" __3 "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" __4 "}"',
              exp: null,
              __3:
                'if_stmt := if exp "{" __3 # "}"\n' +
                'if_stmt := if exp "{" __3 # "}" else "{" "}"\n' +
                'if_stmt := if exp "{" __3 # "}" else "{" __4 "}"',
              else: null,
              __4: null,
              do:
                'loop_stmt := do # "{" "}" while exp ";"\n' +
                'loop_stmt := do # "{" __2 "}" while exp ";"',
              while:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'loop_stmt := while # exp "{" "}"\n' +
                'loop_stmt := while # exp "{" __2 "}"',
              '";"': null,
              '"++"': 'incr_stmt := "++" # identifier ";"',
              '"--"': 'decr_stmt := "--" # identifier ";"',
              assign_stmt: "stmt := assign_stmt #",
              ret_stmt: "stmt := ret_stmt #",
              incr_stmt: "stmt := incr_stmt #",
              decr_stmt: "stmt := decr_stmt #",
              if_stmt: "stmt := if_stmt #",
              loop_stmt: "stmt := loop_stmt #",
              let: 'assign_stmt := let # identifier "=" exp ";"',
              '"="': null,
              return:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'ret_stmt := return # exp ";"',
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt:
                "__3 := # stmt@ifTrue\n" +
                "__3 := # stmt@ifTrue __3\n" +
                "__3 := stmt@ifTrue #\n" +
                "__3 := stmt@ifTrue # __3\n" +
                'assign_stmt := # let identifier "=" exp ";"\n' +
                'decr_stmt := # "--" identifier ";"\n' +
                'decr_stmt := # identifier "--" ";"\n' +
                'if_stmt := # if exp "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := # if exp "{" __3 "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
                'incr_stmt := # "++" identifier ";"\n' +
                'incr_stmt := # identifier "++" ";"\n' +
                'loop_stmt := # do "{" "}" while exp ";"\n' +
                'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
                'loop_stmt := # while exp "{" "}"\n' +
                'loop_stmt := # while exp "{" __2 "}"\n' +
                'ret_stmt := # return exp ";"\n' +
                "stmt := # assign_stmt\n" +
                "stmt := # decr_stmt\n" +
                "stmt := # if_stmt\n" +
                "stmt := # incr_stmt\n" +
                "stmt := # loop_stmt\n" +
                "stmt := # ret_stmt",
            },
            str:
              "__3 := # stmt@ifTrue\n" +
              "__3 := # stmt@ifTrue __3\n" +
              'assign_stmt := # let identifier "=" exp ";"\n' +
              'decr_stmt := # "--" identifier ";"\n' +
              'decr_stmt := # identifier "--" ";"\n' +
              'if_stmt := # if exp "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
              'if_stmt := # if exp "{" __3 "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
              'if_stmt := if exp "{" # "}"\n' +
              'if_stmt := if exp "{" # "}" else "{" "}"\n' +
              'if_stmt := if exp "{" # "}" else "{" __4 "}"\n' +
              'if_stmt := if exp "{" # __3 "}"\n' +
              'if_stmt := if exp "{" # __3 "}" else "{" "}"\n' +
              'if_stmt := if exp "{" # __3 "}" else "{" __4 "}"\n' +
              'incr_stmt := # "++" identifier ";"\n' +
              'incr_stmt := # identifier "++" ";"\n' +
              'loop_stmt := # do "{" "}" while exp ";"\n' +
              'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
              'loop_stmt := # while exp "{" "}"\n' +
              'loop_stmt := # while exp "{" __2 "}"\n' +
              'ret_stmt := # return exp ";"\n' +
              "stmt := # assign_stmt\n" +
              "stmt := # decr_stmt\n" +
              "stmt := # if_stmt\n" +
              "stmt := # incr_stmt\n" +
              "stmt := # loop_stmt\n" +
              "stmt := # ret_stmt",
          },
        'exp := # "-" exp\nexp := # exp "%" exp\nexp := # exp "*" exp\nexp := # exp "+" exp\nexp := # exp "-" exp\nexp := # exp "/" exp\nexp := # identifier\nexp := # integer\nexp := exp "+" # exp':
          {
            candidates: [
              'exp := exp "+" # exp',
              'exp := # exp "+" exp',
              'exp := # exp "-" exp',
              'exp := # exp "*" exp',
              'exp := # exp "/" exp',
              'exp := # exp "%" exp',
              'exp := # "-" exp',
              "exp := # integer",
              "exp := # identifier",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "exp := identifier #",
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp:
                'exp := exp "+" exp #\n' +
                'exp := exp # "%" exp\n' +
                'exp := exp # "*" exp\n' +
                'exp := exp # "+" exp\n' +
                'exp := exp # "-" exp\n' +
                'exp := exp # "/" exp',
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"':
                'exp := "-" # exp\n' +
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer",
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: "exp := integer #",
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := # "-" exp\n' +
              'exp := # exp "%" exp\n' +
              'exp := # exp "*" exp\n' +
              'exp := # exp "+" exp\n' +
              'exp := # exp "-" exp\n' +
              'exp := # exp "/" exp\n' +
              "exp := # identifier\n" +
              "exp := # integer\n" +
              'exp := exp "+" # exp',
          },
        'exp := # "-" exp\nexp := # exp "%" exp\nexp := # exp "*" exp\nexp := # exp "+" exp\nexp := # exp "-" exp\nexp := # exp "/" exp\nexp := # identifier\nexp := # integer\nexp := exp "-" # exp':
          {
            candidates: [
              'exp := exp "-" # exp',
              'exp := # exp "+" exp',
              'exp := # exp "-" exp',
              'exp := # exp "*" exp',
              'exp := # exp "/" exp',
              'exp := # exp "%" exp',
              'exp := # "-" exp',
              "exp := # integer",
              "exp := # identifier",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "exp := identifier #",
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp:
                'exp := exp "-" exp #\n' +
                'exp := exp # "%" exp\n' +
                'exp := exp # "*" exp\n' +
                'exp := exp # "+" exp\n' +
                'exp := exp # "-" exp\n' +
                'exp := exp # "/" exp',
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"':
                'exp := "-" # exp\n' +
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer",
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: "exp := integer #",
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := # "-" exp\n' +
              'exp := # exp "%" exp\n' +
              'exp := # exp "*" exp\n' +
              'exp := # exp "+" exp\n' +
              'exp := # exp "-" exp\n' +
              'exp := # exp "/" exp\n' +
              "exp := # identifier\n" +
              "exp := # integer\n" +
              'exp := exp "-" # exp',
          },
        'exp := # "-" exp\nexp := # exp "%" exp\nexp := # exp "*" exp\nexp := # exp "+" exp\nexp := # exp "-" exp\nexp := # exp "/" exp\nexp := # identifier\nexp := # integer\nexp := exp "*" # exp':
          {
            candidates: [
              'exp := exp "*" # exp',
              'exp := # exp "+" exp',
              'exp := # exp "-" exp',
              'exp := # exp "*" exp',
              'exp := # exp "/" exp',
              'exp := # exp "%" exp',
              'exp := # "-" exp',
              "exp := # integer",
              "exp := # identifier",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "exp := identifier #",
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp:
                'exp := exp "*" exp #\n' +
                'exp := exp # "%" exp\n' +
                'exp := exp # "*" exp\n' +
                'exp := exp # "+" exp\n' +
                'exp := exp # "-" exp\n' +
                'exp := exp # "/" exp',
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"':
                'exp := "-" # exp\n' +
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer",
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: "exp := integer #",
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := # "-" exp\n' +
              'exp := # exp "%" exp\n' +
              'exp := # exp "*" exp\n' +
              'exp := # exp "+" exp\n' +
              'exp := # exp "-" exp\n' +
              'exp := # exp "/" exp\n' +
              "exp := # identifier\n" +
              "exp := # integer\n" +
              'exp := exp "*" # exp',
          },
        'exp := # "-" exp\nexp := # exp "%" exp\nexp := # exp "*" exp\nexp := # exp "+" exp\nexp := # exp "-" exp\nexp := # exp "/" exp\nexp := # identifier\nexp := # integer\nexp := exp "/" # exp':
          {
            candidates: [
              'exp := exp "/" # exp',
              'exp := # exp "+" exp',
              'exp := # exp "-" exp',
              'exp := # exp "*" exp',
              'exp := # exp "/" exp',
              'exp := # exp "%" exp',
              'exp := # "-" exp',
              "exp := # integer",
              "exp := # identifier",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "exp := identifier #",
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp:
                'exp := exp "/" exp #\n' +
                'exp := exp # "%" exp\n' +
                'exp := exp # "*" exp\n' +
                'exp := exp # "+" exp\n' +
                'exp := exp # "-" exp\n' +
                'exp := exp # "/" exp',
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"':
                'exp := "-" # exp\n' +
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer",
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: "exp := integer #",
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := # "-" exp\n' +
              'exp := # exp "%" exp\n' +
              'exp := # exp "*" exp\n' +
              'exp := # exp "+" exp\n' +
              'exp := # exp "-" exp\n' +
              'exp := # exp "/" exp\n' +
              "exp := # identifier\n" +
              "exp := # integer\n" +
              'exp := exp "/" # exp',
          },
        'exp := # "-" exp\nexp := # exp "%" exp\nexp := # exp "*" exp\nexp := # exp "+" exp\nexp := # exp "-" exp\nexp := # exp "/" exp\nexp := # identifier\nexp := # integer\nexp := exp "%" # exp':
          {
            candidates: [
              'exp := exp "%" # exp',
              'exp := # exp "+" exp',
              'exp := # exp "-" exp',
              'exp := # exp "*" exp',
              'exp := # exp "/" exp',
              'exp := # exp "%" exp',
              'exp := # "-" exp',
              "exp := # integer",
              "exp := # identifier",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "exp := identifier #",
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp:
                'exp := exp "%" exp #\n' +
                'exp := exp # "%" exp\n' +
                'exp := exp # "*" exp\n' +
                'exp := exp # "+" exp\n' +
                'exp := exp # "-" exp\n' +
                'exp := exp # "/" exp',
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"':
                'exp := "-" # exp\n' +
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer",
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: "exp := integer #",
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := # "-" exp\n' +
              'exp := # exp "%" exp\n' +
              'exp := # exp "*" exp\n' +
              'exp := # exp "+" exp\n' +
              'exp := # exp "-" exp\n' +
              'exp := # exp "/" exp\n' +
              "exp := # identifier\n" +
              "exp := # integer\n" +
              'exp := exp "%" # exp',
          },
        'exp := "-" exp #\nexp := exp # "%" exp\nexp := exp # "*" exp\nexp := exp # "+" exp\nexp := exp # "-" exp\nexp := exp # "/" exp':
          {
            candidates: [
              'exp := "-" exp #',
              'exp := exp # "+" exp',
              'exp := exp # "-" exp',
              'exp := exp # "*" exp',
              'exp := exp # "/" exp',
              'exp := exp # "%" exp',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "+" # exp',
              '"-"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "-" # exp',
              '"*"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "*" # exp',
              '"/"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "/" # exp',
              '"%"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "%" # exp',
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := "-" exp #\n' +
              'exp := exp # "%" exp\n' +
              'exp := exp # "*" exp\n' +
              'exp := exp # "+" exp\n' +
              'exp := exp # "-" exp\n' +
              'exp := exp # "/" exp',
          },
        'loop_stmt := do "{" __2 # "}" while exp ";"': {
          candidates: ['loop_stmt := do "{" __2 # "}" while exp ";"'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': 'loop_stmt := do "{" __2 "}" # while exp ";"',
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'loop_stmt := do "{" __2 # "}" while exp ";"',
        },
        'loop_stmt := do "{" "}" # while exp ";"': {
          candidates: ['loop_stmt := do "{" "}" # while exp ";"'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while:
              'exp := # "-" exp\n' +
              'exp := # exp "%" exp\n' +
              'exp := # exp "*" exp\n' +
              'exp := # exp "+" exp\n' +
              'exp := # exp "-" exp\n' +
              'exp := # exp "/" exp\n' +
              "exp := # identifier\n" +
              "exp := # integer\n" +
              'loop_stmt := do "{" "}" while # exp ";"',
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'loop_stmt := do "{" "}" # while exp ";"',
        },
        '__2 := # stmt\n__2 := # stmt __2\nassign_stmt := # let identifier "=" exp ";"\ndecr_stmt := # "--" identifier ";"\ndecr_stmt := # identifier "--" ";"\nif_stmt := # if exp "{" "}"\nif_stmt := # if exp "{" "}" else "{" "}"\nif_stmt := # if exp "{" "}" else "{" __4 "}"\nif_stmt := # if exp "{" __3 "}"\nif_stmt := # if exp "{" __3 "}" else "{" "}"\nif_stmt := # if exp "{" __3 "}" else "{" __4 "}"\nincr_stmt := # "++" identifier ";"\nincr_stmt := # identifier "++" ";"\nloop_stmt := # do "{" "}" while exp ";"\nloop_stmt := # do "{" __2 "}" while exp ";"\nloop_stmt := # while exp "{" "}"\nloop_stmt := # while exp "{" __2 "}"\nloop_stmt := while exp "{" # "}"\nloop_stmt := while exp "{" # __2 "}"\nret_stmt := # return exp ";"\nstmt := # assign_stmt\nstmt := # decr_stmt\nstmt := # if_stmt\nstmt := # incr_stmt\nstmt := # loop_stmt\nstmt := # ret_stmt':
          {
            candidates: [
              'loop_stmt := while exp "{" # __2 "}"',
              'loop_stmt := while exp "{" # "}"',
              "__2 := # stmt",
              "__2 := # stmt __2",
              "stmt := # assign_stmt",
              "stmt := # ret_stmt",
              "stmt := # incr_stmt",
              "stmt := # decr_stmt",
              "stmt := # if_stmt",
              "stmt := # loop_stmt",
              'assign_stmt := # let identifier "=" exp ";"',
              'ret_stmt := # return exp ";"',
              'incr_stmt := # "++" identifier ";"',
              'incr_stmt := # identifier "++" ";"',
              'decr_stmt := # "--" identifier ";"',
              'decr_stmt := # identifier "--" ";"',
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" __3 "}" else "{" "}"',
              'if_stmt := # if exp "{" __3 "}"',
              'if_stmt := # if exp "{" "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" "}" else "{" "}"',
              'if_stmt := # if exp "{" "}"',
              'loop_stmt := # do "{" __2 "}" while exp ";"',
              'loop_stmt := # do "{" "}" while exp ";"',
              'loop_stmt := # while exp "{" __2 "}"',
              'loop_stmt := # while exp "{" "}"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier:
                'decr_stmt := identifier # "--" ";"\n' +
                'incr_stmt := identifier # "++" ";"',
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: 'loop_stmt := while exp "{" __2 # "}"',
              '"}"': 'loop_stmt := while exp "{" "}" #',
              if:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'if_stmt := if # exp "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := if # exp "{" __3 "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" __4 "}"',
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do:
                'loop_stmt := do # "{" "}" while exp ";"\n' +
                'loop_stmt := do # "{" __2 "}" while exp ";"',
              while:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'loop_stmt := while # exp "{" "}"\n' +
                'loop_stmt := while # exp "{" __2 "}"',
              '";"': null,
              '"++"': 'incr_stmt := "++" # identifier ";"',
              '"--"': 'decr_stmt := "--" # identifier ";"',
              assign_stmt: "stmt := assign_stmt #",
              ret_stmt: "stmt := ret_stmt #",
              incr_stmt: "stmt := incr_stmt #",
              decr_stmt: "stmt := decr_stmt #",
              if_stmt: "stmt := if_stmt #",
              loop_stmt: "stmt := loop_stmt #",
              let: 'assign_stmt := let # identifier "=" exp ";"',
              '"="': null,
              return:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'ret_stmt := return # exp ";"',
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt:
                "__2 := # stmt\n" +
                "__2 := # stmt __2\n" +
                "__2 := stmt #\n" +
                "__2 := stmt # __2\n" +
                'assign_stmt := # let identifier "=" exp ";"\n' +
                'decr_stmt := # "--" identifier ";"\n' +
                'decr_stmt := # identifier "--" ";"\n' +
                'if_stmt := # if exp "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := # if exp "{" __3 "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
                'incr_stmt := # "++" identifier ";"\n' +
                'incr_stmt := # identifier "++" ";"\n' +
                'loop_stmt := # do "{" "}" while exp ";"\n' +
                'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
                'loop_stmt := # while exp "{" "}"\n' +
                'loop_stmt := # while exp "{" __2 "}"\n' +
                'ret_stmt := # return exp ";"\n' +
                "stmt := # assign_stmt\n" +
                "stmt := # decr_stmt\n" +
                "stmt := # if_stmt\n" +
                "stmt := # incr_stmt\n" +
                "stmt := # loop_stmt\n" +
                "stmt := # ret_stmt",
            },
            str:
              "__2 := # stmt\n" +
              "__2 := # stmt __2\n" +
              'assign_stmt := # let identifier "=" exp ";"\n' +
              'decr_stmt := # "--" identifier ";"\n' +
              'decr_stmt := # identifier "--" ";"\n' +
              'if_stmt := # if exp "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
              'if_stmt := # if exp "{" __3 "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
              'incr_stmt := # "++" identifier ";"\n' +
              'incr_stmt := # identifier "++" ";"\n' +
              'loop_stmt := # do "{" "}" while exp ";"\n' +
              'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
              'loop_stmt := # while exp "{" "}"\n' +
              'loop_stmt := # while exp "{" __2 "}"\n' +
              'loop_stmt := while exp "{" # "}"\n' +
              'loop_stmt := while exp "{" # __2 "}"\n' +
              'ret_stmt := # return exp ";"\n' +
              "stmt := # assign_stmt\n" +
              "stmt := # decr_stmt\n" +
              "stmt := # if_stmt\n" +
              "stmt := # incr_stmt\n" +
              "stmt := # loop_stmt\n" +
              "stmt := # ret_stmt",
          },
        'incr_stmt := "++" identifier ";" #': {
          candidates: ['incr_stmt := "++" identifier ";" #'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'incr_stmt := "++" identifier ";" #',
        },
        'decr_stmt := "--" identifier ";" #': {
          candidates: ['decr_stmt := "--" identifier ";" #'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'decr_stmt := "--" identifier ";" #',
        },
        'assign_stmt := let identifier "=" # exp ";"\nexp := # "-" exp\nexp := # exp "%" exp\nexp := # exp "*" exp\nexp := # exp "+" exp\nexp := # exp "-" exp\nexp := # exp "/" exp\nexp := # identifier\nexp := # integer':
          {
            candidates: [
              'assign_stmt := let identifier "=" # exp ";"',
              'exp := # exp "+" exp',
              'exp := # exp "-" exp',
              'exp := # exp "*" exp',
              'exp := # exp "/" exp',
              'exp := # exp "%" exp',
              'exp := # "-" exp',
              "exp := # integer",
              "exp := # identifier",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "exp := identifier #",
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp:
                'assign_stmt := let identifier "=" exp # ";"\n' +
                'exp := exp # "%" exp\n' +
                'exp := exp # "*" exp\n' +
                'exp := exp # "+" exp\n' +
                'exp := exp # "-" exp\n' +
                'exp := exp # "/" exp',
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"':
                'exp := "-" # exp\n' +
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer",
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: "exp := integer #",
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'assign_stmt := let identifier "=" # exp ";"\n' +
              'exp := # "-" exp\n' +
              'exp := # exp "%" exp\n' +
              'exp := # exp "*" exp\n' +
              'exp := # exp "+" exp\n' +
              'exp := # exp "-" exp\n' +
              'exp := # exp "/" exp\n' +
              "exp := # identifier\n" +
              "exp := # integer",
          },
        'ret_stmt := return exp ";" #': {
          candidates: ['ret_stmt := return exp ";" #'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'ret_stmt := return exp ";" #',
        },
        'fn_def := fn identifier "(" param __1 ")" "{" __2 "}" #': {
          candidates: [
            'fn_def := fn identifier "(" param __1 ")" "{" __2 "}" #',
          ],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'fn_def := fn identifier "(" param __1 ")" "{" __2 "}" #',
        },
        'if_stmt := if exp "{" "}" #\nif_stmt := if exp "{" "}" # else "{" "}"\nif_stmt := if exp "{" "}" # else "{" __4 "}"':
          {
            candidates: [
              'if_stmt := if exp "{" "}" # else "{" __4 "}"',
              'if_stmt := if exp "{" "}" # else "{" "}"',
              'if_stmt := if exp "{" "}" #',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else:
                'if_stmt := if exp "{" "}" else # "{" "}"\n' +
                'if_stmt := if exp "{" "}" else # "{" __4 "}"',
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'if_stmt := if exp "{" "}" #\n' +
              'if_stmt := if exp "{" "}" # else "{" "}"\n' +
              'if_stmt := if exp "{" "}" # else "{" __4 "}"',
          },
        'if_stmt := if exp "{" __3 # "}"\nif_stmt := if exp "{" __3 # "}" else "{" "}"\nif_stmt := if exp "{" __3 # "}" else "{" __4 "}"':
          {
            candidates: [
              'if_stmt := if exp "{" __3 # "}" else "{" __4 "}"',
              'if_stmt := if exp "{" __3 # "}" else "{" "}"',
              'if_stmt := if exp "{" __3 # "}"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"':
                'if_stmt := if exp "{" __3 "}" #\n' +
                'if_stmt := if exp "{" __3 "}" # else "{" "}"\n' +
                'if_stmt := if exp "{" __3 "}" # else "{" __4 "}"',
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'if_stmt := if exp "{" __3 # "}"\n' +
              'if_stmt := if exp "{" __3 # "}" else "{" "}"\n' +
              'if_stmt := if exp "{" __3 # "}" else "{" __4 "}"',
          },
        '__3 := # stmt@ifTrue\n__3 := # stmt@ifTrue __3\n__3 := stmt@ifTrue #\n__3 := stmt@ifTrue # __3\nassign_stmt := # let identifier "=" exp ";"\ndecr_stmt := # "--" identifier ";"\ndecr_stmt := # identifier "--" ";"\nif_stmt := # if exp "{" "}"\nif_stmt := # if exp "{" "}" else "{" "}"\nif_stmt := # if exp "{" "}" else "{" __4 "}"\nif_stmt := # if exp "{" __3 "}"\nif_stmt := # if exp "{" __3 "}" else "{" "}"\nif_stmt := # if exp "{" __3 "}" else "{" __4 "}"\nincr_stmt := # "++" identifier ";"\nincr_stmt := # identifier "++" ";"\nloop_stmt := # do "{" "}" while exp ";"\nloop_stmt := # do "{" __2 "}" while exp ";"\nloop_stmt := # while exp "{" "}"\nloop_stmt := # while exp "{" __2 "}"\nret_stmt := # return exp ";"\nstmt := # assign_stmt\nstmt := # decr_stmt\nstmt := # if_stmt\nstmt := # incr_stmt\nstmt := # loop_stmt\nstmt := # ret_stmt':
          {
            candidates: [
              "__3 := stmt@ifTrue #",
              "__3 := stmt@ifTrue # __3",
              "__3 := # stmt@ifTrue",
              "__3 := # stmt@ifTrue __3",
              "stmt := # assign_stmt",
              "stmt := # ret_stmt",
              "stmt := # incr_stmt",
              "stmt := # decr_stmt",
              "stmt := # if_stmt",
              "stmt := # loop_stmt",
              'assign_stmt := # let identifier "=" exp ";"',
              'ret_stmt := # return exp ";"',
              'incr_stmt := # "++" identifier ";"',
              'incr_stmt := # identifier "++" ";"',
              'decr_stmt := # "--" identifier ";"',
              'decr_stmt := # identifier "--" ";"',
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" __3 "}" else "{" "}"',
              'if_stmt := # if exp "{" __3 "}"',
              'if_stmt := # if exp "{" "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" "}" else "{" "}"',
              'if_stmt := # if exp "{" "}"',
              'loop_stmt := # do "{" __2 "}" while exp ";"',
              'loop_stmt := # do "{" "}" while exp ";"',
              'loop_stmt := # while exp "{" __2 "}"',
              'loop_stmt := # while exp "{" "}"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier:
                'decr_stmt := identifier # "--" ";"\n' +
                'incr_stmt := identifier # "++" ";"',
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'if_stmt := if # exp "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := if # exp "{" __3 "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" __4 "}"',
              exp: null,
              __3: "__3 := stmt@ifTrue __3 #",
              else: null,
              __4: null,
              do:
                'loop_stmt := do # "{" "}" while exp ";"\n' +
                'loop_stmt := do # "{" __2 "}" while exp ";"',
              while:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'loop_stmt := while # exp "{" "}"\n' +
                'loop_stmt := while # exp "{" __2 "}"',
              '";"': null,
              '"++"': 'incr_stmt := "++" # identifier ";"',
              '"--"': 'decr_stmt := "--" # identifier ";"',
              assign_stmt: "stmt := assign_stmt #",
              ret_stmt: "stmt := ret_stmt #",
              incr_stmt: "stmt := incr_stmt #",
              decr_stmt: "stmt := decr_stmt #",
              if_stmt: "stmt := if_stmt #",
              loop_stmt: "stmt := loop_stmt #",
              let: 'assign_stmt := let # identifier "=" exp ";"',
              '"="': null,
              return:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'ret_stmt := return # exp ";"',
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt:
                "__3 := # stmt@ifTrue\n" +
                "__3 := # stmt@ifTrue __3\n" +
                "__3 := stmt@ifTrue #\n" +
                "__3 := stmt@ifTrue # __3\n" +
                'assign_stmt := # let identifier "=" exp ";"\n' +
                'decr_stmt := # "--" identifier ";"\n' +
                'decr_stmt := # identifier "--" ";"\n' +
                'if_stmt := # if exp "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := # if exp "{" __3 "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
                'incr_stmt := # "++" identifier ";"\n' +
                'incr_stmt := # identifier "++" ";"\n' +
                'loop_stmt := # do "{" "}" while exp ";"\n' +
                'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
                'loop_stmt := # while exp "{" "}"\n' +
                'loop_stmt := # while exp "{" __2 "}"\n' +
                'ret_stmt := # return exp ";"\n' +
                "stmt := # assign_stmt\n" +
                "stmt := # decr_stmt\n" +
                "stmt := # if_stmt\n" +
                "stmt := # incr_stmt\n" +
                "stmt := # loop_stmt\n" +
                "stmt := # ret_stmt",
            },
            str:
              "__3 := # stmt@ifTrue\n" +
              "__3 := # stmt@ifTrue __3\n" +
              "__3 := stmt@ifTrue #\n" +
              "__3 := stmt@ifTrue # __3\n" +
              'assign_stmt := # let identifier "=" exp ";"\n' +
              'decr_stmt := # "--" identifier ";"\n' +
              'decr_stmt := # identifier "--" ";"\n' +
              'if_stmt := # if exp "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
              'if_stmt := # if exp "{" __3 "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
              'incr_stmt := # "++" identifier ";"\n' +
              'incr_stmt := # identifier "++" ";"\n' +
              'loop_stmt := # do "{" "}" while exp ";"\n' +
              'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
              'loop_stmt := # while exp "{" "}"\n' +
              'loop_stmt := # while exp "{" __2 "}"\n' +
              'ret_stmt := # return exp ";"\n' +
              "stmt := # assign_stmt\n" +
              "stmt := # decr_stmt\n" +
              "stmt := # if_stmt\n" +
              "stmt := # incr_stmt\n" +
              "stmt := # loop_stmt\n" +
              "stmt := # ret_stmt",
          },
        'exp := exp "+" exp #\nexp := exp # "%" exp\nexp := exp # "*" exp\nexp := exp # "+" exp\nexp := exp # "-" exp\nexp := exp # "/" exp':
          {
            candidates: [
              'exp := exp "+" exp #',
              'exp := exp # "+" exp',
              'exp := exp # "-" exp',
              'exp := exp # "*" exp',
              'exp := exp # "/" exp',
              'exp := exp # "%" exp',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "+" # exp',
              '"-"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "-" # exp',
              '"*"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "*" # exp',
              '"/"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "/" # exp',
              '"%"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "%" # exp',
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := exp "+" exp #\n' +
              'exp := exp # "%" exp\n' +
              'exp := exp # "*" exp\n' +
              'exp := exp # "+" exp\n' +
              'exp := exp # "-" exp\n' +
              'exp := exp # "/" exp',
          },
        'exp := exp "-" exp #\nexp := exp # "%" exp\nexp := exp # "*" exp\nexp := exp # "+" exp\nexp := exp # "-" exp\nexp := exp # "/" exp':
          {
            candidates: [
              'exp := exp "-" exp #',
              'exp := exp # "+" exp',
              'exp := exp # "-" exp',
              'exp := exp # "*" exp',
              'exp := exp # "/" exp',
              'exp := exp # "%" exp',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "+" # exp',
              '"-"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "-" # exp',
              '"*"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "*" # exp',
              '"/"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "/" # exp',
              '"%"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "%" # exp',
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := exp "-" exp #\n' +
              'exp := exp # "%" exp\n' +
              'exp := exp # "*" exp\n' +
              'exp := exp # "+" exp\n' +
              'exp := exp # "-" exp\n' +
              'exp := exp # "/" exp',
          },
        'exp := exp "*" exp #\nexp := exp # "%" exp\nexp := exp # "*" exp\nexp := exp # "+" exp\nexp := exp # "-" exp\nexp := exp # "/" exp':
          {
            candidates: [
              'exp := exp "*" exp #',
              'exp := exp # "+" exp',
              'exp := exp # "-" exp',
              'exp := exp # "*" exp',
              'exp := exp # "/" exp',
              'exp := exp # "%" exp',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "+" # exp',
              '"-"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "-" # exp',
              '"*"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "*" # exp',
              '"/"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "/" # exp',
              '"%"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "%" # exp',
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := exp "*" exp #\n' +
              'exp := exp # "%" exp\n' +
              'exp := exp # "*" exp\n' +
              'exp := exp # "+" exp\n' +
              'exp := exp # "-" exp\n' +
              'exp := exp # "/" exp',
          },
        'exp := exp "/" exp #\nexp := exp # "%" exp\nexp := exp # "*" exp\nexp := exp # "+" exp\nexp := exp # "-" exp\nexp := exp # "/" exp':
          {
            candidates: [
              'exp := exp "/" exp #',
              'exp := exp # "+" exp',
              'exp := exp # "-" exp',
              'exp := exp # "*" exp',
              'exp := exp # "/" exp',
              'exp := exp # "%" exp',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "+" # exp',
              '"-"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "-" # exp',
              '"*"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "*" # exp',
              '"/"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "/" # exp',
              '"%"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "%" # exp',
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := exp "/" exp #\n' +
              'exp := exp # "%" exp\n' +
              'exp := exp # "*" exp\n' +
              'exp := exp # "+" exp\n' +
              'exp := exp # "-" exp\n' +
              'exp := exp # "/" exp',
          },
        'exp := exp "%" exp #\nexp := exp # "%" exp\nexp := exp # "*" exp\nexp := exp # "+" exp\nexp := exp # "-" exp\nexp := exp # "/" exp':
          {
            candidates: [
              'exp := exp "%" exp #',
              'exp := exp # "+" exp',
              'exp := exp # "-" exp',
              'exp := exp # "*" exp',
              'exp := exp # "/" exp',
              'exp := exp # "%" exp',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "+" # exp',
              '"-"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "-" # exp',
              '"*"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "*" # exp',
              '"/"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "/" # exp',
              '"%"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "%" # exp',
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := exp "%" exp #\n' +
              'exp := exp # "%" exp\n' +
              'exp := exp # "*" exp\n' +
              'exp := exp # "+" exp\n' +
              'exp := exp # "-" exp\n' +
              'exp := exp # "/" exp',
          },
        'loop_stmt := do "{" __2 "}" # while exp ";"': {
          candidates: ['loop_stmt := do "{" __2 "}" # while exp ";"'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while:
              'exp := # "-" exp\n' +
              'exp := # exp "%" exp\n' +
              'exp := # exp "*" exp\n' +
              'exp := # exp "+" exp\n' +
              'exp := # exp "-" exp\n' +
              'exp := # exp "/" exp\n' +
              "exp := # identifier\n" +
              "exp := # integer\n" +
              'loop_stmt := do "{" __2 "}" while # exp ";"',
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'loop_stmt := do "{" __2 "}" # while exp ";"',
        },
        'exp := # "-" exp\nexp := # exp "%" exp\nexp := # exp "*" exp\nexp := # exp "+" exp\nexp := # exp "-" exp\nexp := # exp "/" exp\nexp := # identifier\nexp := # integer\nloop_stmt := do "{" "}" while # exp ";"':
          {
            candidates: [
              'loop_stmt := do "{" "}" while # exp ";"',
              'exp := # exp "+" exp',
              'exp := # exp "-" exp',
              'exp := # exp "*" exp',
              'exp := # exp "/" exp',
              'exp := # exp "%" exp',
              'exp := # "-" exp',
              "exp := # integer",
              "exp := # identifier",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "exp := identifier #",
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp:
                'exp := exp # "%" exp\n' +
                'exp := exp # "*" exp\n' +
                'exp := exp # "+" exp\n' +
                'exp := exp # "-" exp\n' +
                'exp := exp # "/" exp\n' +
                'loop_stmt := do "{" "}" while exp # ";"',
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"':
                'exp := "-" # exp\n' +
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer",
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: "exp := integer #",
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := # "-" exp\n' +
              'exp := # exp "%" exp\n' +
              'exp := # exp "*" exp\n' +
              'exp := # exp "+" exp\n' +
              'exp := # exp "-" exp\n' +
              'exp := # exp "/" exp\n' +
              "exp := # identifier\n" +
              "exp := # integer\n" +
              'loop_stmt := do "{" "}" while # exp ";"',
          },
        'loop_stmt := while exp "{" __2 # "}"': {
          candidates: ['loop_stmt := while exp "{" __2 # "}"'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': 'loop_stmt := while exp "{" __2 "}" #',
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'loop_stmt := while exp "{" __2 # "}"',
        },
        'loop_stmt := while exp "{" "}" #': {
          candidates: ['loop_stmt := while exp "{" "}" #'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'loop_stmt := while exp "{" "}" #',
        },
        'assign_stmt := let identifier "=" exp # ";"\nexp := exp # "%" exp\nexp := exp # "*" exp\nexp := exp # "+" exp\nexp := exp # "-" exp\nexp := exp # "/" exp':
          {
            candidates: [
              'assign_stmt := let identifier "=" exp # ";"',
              'exp := exp # "+" exp',
              'exp := exp # "-" exp',
              'exp := exp # "*" exp',
              'exp := exp # "/" exp',
              'exp := exp # "%" exp',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': 'assign_stmt := let identifier "=" exp ";" #',
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "+" # exp',
              '"-"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "-" # exp',
              '"*"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "*" # exp',
              '"/"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "/" # exp',
              '"%"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "%" # exp',
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'assign_stmt := let identifier "=" exp # ";"\n' +
              'exp := exp # "%" exp\n' +
              'exp := exp # "*" exp\n' +
              'exp := exp # "+" exp\n' +
              'exp := exp # "-" exp\n' +
              'exp := exp # "/" exp',
          },
        'if_stmt := if exp "{" "}" else # "{" "}"\nif_stmt := if exp "{" "}" else # "{" __4 "}"':
          {
            candidates: [
              'if_stmt := if exp "{" "}" else # "{" __4 "}"',
              'if_stmt := if exp "{" "}" else # "{" "}"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"':
                "__4 := # stmt@ifFalse\n" +
                "__4 := # stmt@ifFalse __4\n" +
                'assign_stmt := # let identifier "=" exp ";"\n' +
                'decr_stmt := # "--" identifier ";"\n' +
                'decr_stmt := # identifier "--" ";"\n' +
                'if_stmt := # if exp "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := # if exp "{" __3 "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
                'if_stmt := if exp "{" "}" else "{" # "}"\n' +
                'if_stmt := if exp "{" "}" else "{" # __4 "}"\n' +
                'incr_stmt := # "++" identifier ";"\n' +
                'incr_stmt := # identifier "++" ";"\n' +
                'loop_stmt := # do "{" "}" while exp ";"\n' +
                'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
                'loop_stmt := # while exp "{" "}"\n' +
                'loop_stmt := # while exp "{" __2 "}"\n' +
                'ret_stmt := # return exp ";"\n' +
                "stmt := # assign_stmt\n" +
                "stmt := # decr_stmt\n" +
                "stmt := # if_stmt\n" +
                "stmt := # incr_stmt\n" +
                "stmt := # loop_stmt\n" +
                "stmt := # ret_stmt",
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'if_stmt := if exp "{" "}" else # "{" "}"\n' +
              'if_stmt := if exp "{" "}" else # "{" __4 "}"',
          },
        'if_stmt := if exp "{" __3 "}" #\nif_stmt := if exp "{" __3 "}" # else "{" "}"\nif_stmt := if exp "{" __3 "}" # else "{" __4 "}"':
          {
            candidates: [
              'if_stmt := if exp "{" __3 "}" # else "{" __4 "}"',
              'if_stmt := if exp "{" __3 "}" # else "{" "}"',
              'if_stmt := if exp "{" __3 "}" #',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else:
                'if_stmt := if exp "{" __3 "}" else # "{" "}"\n' +
                'if_stmt := if exp "{" __3 "}" else # "{" __4 "}"',
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'if_stmt := if exp "{" __3 "}" #\n' +
              'if_stmt := if exp "{" __3 "}" # else "{" "}"\n' +
              'if_stmt := if exp "{" __3 "}" # else "{" __4 "}"',
          },
        "__3 := stmt@ifTrue __3 #": {
          candidates: ["__3 := stmt@ifTrue __3 #"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: "__3 := stmt@ifTrue __3 #",
        },
        'exp := # "-" exp\nexp := # exp "%" exp\nexp := # exp "*" exp\nexp := # exp "+" exp\nexp := # exp "-" exp\nexp := # exp "/" exp\nexp := # identifier\nexp := # integer\nloop_stmt := do "{" __2 "}" while # exp ";"':
          {
            candidates: [
              'loop_stmt := do "{" __2 "}" while # exp ";"',
              'exp := # exp "+" exp',
              'exp := # exp "-" exp',
              'exp := # exp "*" exp',
              'exp := # exp "/" exp',
              'exp := # exp "%" exp',
              'exp := # "-" exp',
              "exp := # integer",
              "exp := # identifier",
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: "exp := identifier #",
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp:
                'exp := exp # "%" exp\n' +
                'exp := exp # "*" exp\n' +
                'exp := exp # "+" exp\n' +
                'exp := exp # "-" exp\n' +
                'exp := exp # "/" exp\n' +
                'loop_stmt := do "{" __2 "}" while exp # ";"',
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"':
                'exp := "-" # exp\n' +
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer",
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: "exp := integer #",
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := # "-" exp\n' +
              'exp := # exp "%" exp\n' +
              'exp := # exp "*" exp\n' +
              'exp := # exp "+" exp\n' +
              'exp := # exp "-" exp\n' +
              'exp := # exp "/" exp\n' +
              "exp := # identifier\n" +
              "exp := # integer\n" +
              'loop_stmt := do "{" __2 "}" while # exp ";"',
          },
        'exp := exp # "%" exp\nexp := exp # "*" exp\nexp := exp # "+" exp\nexp := exp # "-" exp\nexp := exp # "/" exp\nloop_stmt := do "{" "}" while exp # ";"':
          {
            candidates: [
              'loop_stmt := do "{" "}" while exp # ";"',
              'exp := exp # "+" exp',
              'exp := exp # "-" exp',
              'exp := exp # "*" exp',
              'exp := exp # "/" exp',
              'exp := exp # "%" exp',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': 'loop_stmt := do "{" "}" while exp ";" #',
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "+" # exp',
              '"-"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "-" # exp',
              '"*"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "*" # exp',
              '"/"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "/" # exp',
              '"%"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "%" # exp',
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := exp # "%" exp\n' +
              'exp := exp # "*" exp\n' +
              'exp := exp # "+" exp\n' +
              'exp := exp # "-" exp\n' +
              'exp := exp # "/" exp\n' +
              'loop_stmt := do "{" "}" while exp # ";"',
          },
        'loop_stmt := while exp "{" __2 "}" #': {
          candidates: ['loop_stmt := while exp "{" __2 "}" #'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'loop_stmt := while exp "{" __2 "}" #',
        },
        'assign_stmt := let identifier "=" exp ";" #': {
          candidates: ['assign_stmt := let identifier "=" exp ";" #'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'assign_stmt := let identifier "=" exp ";" #',
        },
        '__4 := # stmt@ifFalse\n__4 := # stmt@ifFalse __4\nassign_stmt := # let identifier "=" exp ";"\ndecr_stmt := # "--" identifier ";"\ndecr_stmt := # identifier "--" ";"\nif_stmt := # if exp "{" "}"\nif_stmt := # if exp "{" "}" else "{" "}"\nif_stmt := # if exp "{" "}" else "{" __4 "}"\nif_stmt := # if exp "{" __3 "}"\nif_stmt := # if exp "{" __3 "}" else "{" "}"\nif_stmt := # if exp "{" __3 "}" else "{" __4 "}"\nif_stmt := if exp "{" "}" else "{" # "}"\nif_stmt := if exp "{" "}" else "{" # __4 "}"\nincr_stmt := # "++" identifier ";"\nincr_stmt := # identifier "++" ";"\nloop_stmt := # do "{" "}" while exp ";"\nloop_stmt := # do "{" __2 "}" while exp ";"\nloop_stmt := # while exp "{" "}"\nloop_stmt := # while exp "{" __2 "}"\nret_stmt := # return exp ";"\nstmt := # assign_stmt\nstmt := # decr_stmt\nstmt := # if_stmt\nstmt := # incr_stmt\nstmt := # loop_stmt\nstmt := # ret_stmt':
          {
            candidates: [
              'if_stmt := if exp "{" "}" else "{" # __4 "}"',
              'if_stmt := if exp "{" "}" else "{" # "}"',
              "__4 := # stmt@ifFalse",
              "__4 := # stmt@ifFalse __4",
              "stmt := # assign_stmt",
              "stmt := # ret_stmt",
              "stmt := # incr_stmt",
              "stmt := # decr_stmt",
              "stmt := # if_stmt",
              "stmt := # loop_stmt",
              'assign_stmt := # let identifier "=" exp ";"',
              'ret_stmt := # return exp ";"',
              'incr_stmt := # "++" identifier ";"',
              'incr_stmt := # identifier "++" ";"',
              'decr_stmt := # "--" identifier ";"',
              'decr_stmt := # identifier "--" ";"',
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" __3 "}" else "{" "}"',
              'if_stmt := # if exp "{" __3 "}"',
              'if_stmt := # if exp "{" "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" "}" else "{" "}"',
              'if_stmt := # if exp "{" "}"',
              'loop_stmt := # do "{" __2 "}" while exp ";"',
              'loop_stmt := # do "{" "}" while exp ";"',
              'loop_stmt := # while exp "{" __2 "}"',
              'loop_stmt := # while exp "{" "}"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier:
                'decr_stmt := identifier # "--" ";"\n' +
                'incr_stmt := identifier # "++" ";"',
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': 'if_stmt := if exp "{" "}" else "{" "}" #',
              if:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'if_stmt := if # exp "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := if # exp "{" __3 "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" __4 "}"',
              exp: null,
              __3: null,
              else: null,
              __4: 'if_stmt := if exp "{" "}" else "{" __4 # "}"',
              do:
                'loop_stmt := do # "{" "}" while exp ";"\n' +
                'loop_stmt := do # "{" __2 "}" while exp ";"',
              while:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'loop_stmt := while # exp "{" "}"\n' +
                'loop_stmt := while # exp "{" __2 "}"',
              '";"': null,
              '"++"': 'incr_stmt := "++" # identifier ";"',
              '"--"': 'decr_stmt := "--" # identifier ";"',
              assign_stmt: "stmt := assign_stmt #",
              ret_stmt: "stmt := ret_stmt #",
              incr_stmt: "stmt := incr_stmt #",
              decr_stmt: "stmt := decr_stmt #",
              if_stmt: "stmt := if_stmt #",
              loop_stmt: "stmt := loop_stmt #",
              let: 'assign_stmt := let # identifier "=" exp ";"',
              '"="': null,
              return:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'ret_stmt := return # exp ";"',
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt:
                "__4 := # stmt@ifFalse\n" +
                "__4 := # stmt@ifFalse __4\n" +
                "__4 := stmt@ifFalse #\n" +
                "__4 := stmt@ifFalse # __4\n" +
                'assign_stmt := # let identifier "=" exp ";"\n' +
                'decr_stmt := # "--" identifier ";"\n' +
                'decr_stmt := # identifier "--" ";"\n' +
                'if_stmt := # if exp "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := # if exp "{" __3 "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
                'incr_stmt := # "++" identifier ";"\n' +
                'incr_stmt := # identifier "++" ";"\n' +
                'loop_stmt := # do "{" "}" while exp ";"\n' +
                'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
                'loop_stmt := # while exp "{" "}"\n' +
                'loop_stmt := # while exp "{" __2 "}"\n' +
                'ret_stmt := # return exp ";"\n' +
                "stmt := # assign_stmt\n" +
                "stmt := # decr_stmt\n" +
                "stmt := # if_stmt\n" +
                "stmt := # incr_stmt\n" +
                "stmt := # loop_stmt\n" +
                "stmt := # ret_stmt",
            },
            str:
              "__4 := # stmt@ifFalse\n" +
              "__4 := # stmt@ifFalse __4\n" +
              'assign_stmt := # let identifier "=" exp ";"\n' +
              'decr_stmt := # "--" identifier ";"\n' +
              'decr_stmt := # identifier "--" ";"\n' +
              'if_stmt := # if exp "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
              'if_stmt := # if exp "{" __3 "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
              'if_stmt := if exp "{" "}" else "{" # "}"\n' +
              'if_stmt := if exp "{" "}" else "{" # __4 "}"\n' +
              'incr_stmt := # "++" identifier ";"\n' +
              'incr_stmt := # identifier "++" ";"\n' +
              'loop_stmt := # do "{" "}" while exp ";"\n' +
              'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
              'loop_stmt := # while exp "{" "}"\n' +
              'loop_stmt := # while exp "{" __2 "}"\n' +
              'ret_stmt := # return exp ";"\n' +
              "stmt := # assign_stmt\n" +
              "stmt := # decr_stmt\n" +
              "stmt := # if_stmt\n" +
              "stmt := # incr_stmt\n" +
              "stmt := # loop_stmt\n" +
              "stmt := # ret_stmt",
          },
        'if_stmt := if exp "{" __3 "}" else # "{" "}"\nif_stmt := if exp "{" __3 "}" else # "{" __4 "}"':
          {
            candidates: [
              'if_stmt := if exp "{" __3 "}" else # "{" __4 "}"',
              'if_stmt := if exp "{" __3 "}" else # "{" "}"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"':
                "__4 := # stmt@ifFalse\n" +
                "__4 := # stmt@ifFalse __4\n" +
                'assign_stmt := # let identifier "=" exp ";"\n' +
                'decr_stmt := # "--" identifier ";"\n' +
                'decr_stmt := # identifier "--" ";"\n' +
                'if_stmt := # if exp "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := # if exp "{" __3 "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
                'if_stmt := if exp "{" __3 "}" else "{" # "}"\n' +
                'if_stmt := if exp "{" __3 "}" else "{" # __4 "}"\n' +
                'incr_stmt := # "++" identifier ";"\n' +
                'incr_stmt := # identifier "++" ";"\n' +
                'loop_stmt := # do "{" "}" while exp ";"\n' +
                'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
                'loop_stmt := # while exp "{" "}"\n' +
                'loop_stmt := # while exp "{" __2 "}"\n' +
                'ret_stmt := # return exp ";"\n' +
                "stmt := # assign_stmt\n" +
                "stmt := # decr_stmt\n" +
                "stmt := # if_stmt\n" +
                "stmt := # incr_stmt\n" +
                "stmt := # loop_stmt\n" +
                "stmt := # ret_stmt",
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': null,
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'if_stmt := if exp "{" __3 "}" else # "{" "}"\n' +
              'if_stmt := if exp "{" __3 "}" else # "{" __4 "}"',
          },
        'exp := exp # "%" exp\nexp := exp # "*" exp\nexp := exp # "+" exp\nexp := exp # "-" exp\nexp := exp # "/" exp\nloop_stmt := do "{" __2 "}" while exp # ";"':
          {
            candidates: [
              'loop_stmt := do "{" __2 "}" while exp # ";"',
              'exp := exp # "+" exp',
              'exp := exp # "-" exp',
              'exp := exp # "*" exp',
              'exp := exp # "/" exp',
              'exp := exp # "%" exp',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier: null,
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if: null,
              exp: null,
              __3: null,
              else: null,
              __4: null,
              do: null,
              while: null,
              '";"': 'loop_stmt := do "{" __2 "}" while exp ";" #',
              '"++"': null,
              '"--"': null,
              assign_stmt: null,
              ret_stmt: null,
              incr_stmt: null,
              decr_stmt: null,
              if_stmt: null,
              loop_stmt: null,
              let: null,
              '"="': null,
              return: null,
              '"+"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "+" # exp',
              '"-"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "-" # exp',
              '"*"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "*" # exp',
              '"/"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "/" # exp',
              '"%"':
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'exp := exp "%" # exp',
              integer: null,
              fn_def: null,
              '","': null,
              stmt: null,
            },
            str:
              'exp := exp # "%" exp\n' +
              'exp := exp # "*" exp\n' +
              'exp := exp # "+" exp\n' +
              'exp := exp # "-" exp\n' +
              'exp := exp # "/" exp\n' +
              'loop_stmt := do "{" __2 "}" while exp # ";"',
          },
        'loop_stmt := do "{" "}" while exp ";" #': {
          candidates: ['loop_stmt := do "{" "}" while exp ";" #'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'loop_stmt := do "{" "}" while exp ";" #',
        },
        'if_stmt := if exp "{" "}" else "{" "}" #': {
          candidates: ['if_stmt := if exp "{" "}" else "{" "}" #'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'if_stmt := if exp "{" "}" else "{" "}" #',
        },
        'if_stmt := if exp "{" "}" else "{" __4 # "}"': {
          candidates: ['if_stmt := if exp "{" "}" else "{" __4 # "}"'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': 'if_stmt := if exp "{" "}" else "{" __4 "}" #',
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'if_stmt := if exp "{" "}" else "{" __4 # "}"',
        },
        '__4 := # stmt@ifFalse\n__4 := # stmt@ifFalse __4\n__4 := stmt@ifFalse #\n__4 := stmt@ifFalse # __4\nassign_stmt := # let identifier "=" exp ";"\ndecr_stmt := # "--" identifier ";"\ndecr_stmt := # identifier "--" ";"\nif_stmt := # if exp "{" "}"\nif_stmt := # if exp "{" "}" else "{" "}"\nif_stmt := # if exp "{" "}" else "{" __4 "}"\nif_stmt := # if exp "{" __3 "}"\nif_stmt := # if exp "{" __3 "}" else "{" "}"\nif_stmt := # if exp "{" __3 "}" else "{" __4 "}"\nincr_stmt := # "++" identifier ";"\nincr_stmt := # identifier "++" ";"\nloop_stmt := # do "{" "}" while exp ";"\nloop_stmt := # do "{" __2 "}" while exp ";"\nloop_stmt := # while exp "{" "}"\nloop_stmt := # while exp "{" __2 "}"\nret_stmt := # return exp ";"\nstmt := # assign_stmt\nstmt := # decr_stmt\nstmt := # if_stmt\nstmt := # incr_stmt\nstmt := # loop_stmt\nstmt := # ret_stmt':
          {
            candidates: [
              "__4 := stmt@ifFalse #",
              "__4 := stmt@ifFalse # __4",
              "__4 := # stmt@ifFalse",
              "__4 := # stmt@ifFalse __4",
              "stmt := # assign_stmt",
              "stmt := # ret_stmt",
              "stmt := # incr_stmt",
              "stmt := # decr_stmt",
              "stmt := # if_stmt",
              "stmt := # loop_stmt",
              'assign_stmt := # let identifier "=" exp ";"',
              'ret_stmt := # return exp ";"',
              'incr_stmt := # "++" identifier ";"',
              'incr_stmt := # identifier "++" ";"',
              'decr_stmt := # "--" identifier ";"',
              'decr_stmt := # identifier "--" ";"',
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" __3 "}" else "{" "}"',
              'if_stmt := # if exp "{" __3 "}"',
              'if_stmt := # if exp "{" "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" "}" else "{" "}"',
              'if_stmt := # if exp "{" "}"',
              'loop_stmt := # do "{" __2 "}" while exp ";"',
              'loop_stmt := # do "{" "}" while exp ";"',
              'loop_stmt := # while exp "{" __2 "}"',
              'loop_stmt := # while exp "{" "}"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier:
                'decr_stmt := identifier # "--" ";"\n' +
                'incr_stmt := identifier # "++" ";"',
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': null,
              if:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'if_stmt := if # exp "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := if # exp "{" __3 "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" __4 "}"',
              exp: null,
              __3: null,
              else: null,
              __4: "__4 := stmt@ifFalse __4 #",
              do:
                'loop_stmt := do # "{" "}" while exp ";"\n' +
                'loop_stmt := do # "{" __2 "}" while exp ";"',
              while:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'loop_stmt := while # exp "{" "}"\n' +
                'loop_stmt := while # exp "{" __2 "}"',
              '";"': null,
              '"++"': 'incr_stmt := "++" # identifier ";"',
              '"--"': 'decr_stmt := "--" # identifier ";"',
              assign_stmt: "stmt := assign_stmt #",
              ret_stmt: "stmt := ret_stmt #",
              incr_stmt: "stmt := incr_stmt #",
              decr_stmt: "stmt := decr_stmt #",
              if_stmt: "stmt := if_stmt #",
              loop_stmt: "stmt := loop_stmt #",
              let: 'assign_stmt := let # identifier "=" exp ";"',
              '"="': null,
              return:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'ret_stmt := return # exp ";"',
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt:
                "__4 := # stmt@ifFalse\n" +
                "__4 := # stmt@ifFalse __4\n" +
                "__4 := stmt@ifFalse #\n" +
                "__4 := stmt@ifFalse # __4\n" +
                'assign_stmt := # let identifier "=" exp ";"\n' +
                'decr_stmt := # "--" identifier ";"\n' +
                'decr_stmt := # identifier "--" ";"\n' +
                'if_stmt := # if exp "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := # if exp "{" __3 "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
                'incr_stmt := # "++" identifier ";"\n' +
                'incr_stmt := # identifier "++" ";"\n' +
                'loop_stmt := # do "{" "}" while exp ";"\n' +
                'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
                'loop_stmt := # while exp "{" "}"\n' +
                'loop_stmt := # while exp "{" __2 "}"\n' +
                'ret_stmt := # return exp ";"\n' +
                "stmt := # assign_stmt\n" +
                "stmt := # decr_stmt\n" +
                "stmt := # if_stmt\n" +
                "stmt := # incr_stmt\n" +
                "stmt := # loop_stmt\n" +
                "stmt := # ret_stmt",
            },
            str:
              "__4 := # stmt@ifFalse\n" +
              "__4 := # stmt@ifFalse __4\n" +
              "__4 := stmt@ifFalse #\n" +
              "__4 := stmt@ifFalse # __4\n" +
              'assign_stmt := # let identifier "=" exp ";"\n' +
              'decr_stmt := # "--" identifier ";"\n' +
              'decr_stmt := # identifier "--" ";"\n' +
              'if_stmt := # if exp "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
              'if_stmt := # if exp "{" __3 "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
              'incr_stmt := # "++" identifier ";"\n' +
              'incr_stmt := # identifier "++" ";"\n' +
              'loop_stmt := # do "{" "}" while exp ";"\n' +
              'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
              'loop_stmt := # while exp "{" "}"\n' +
              'loop_stmt := # while exp "{" __2 "}"\n' +
              'ret_stmt := # return exp ";"\n' +
              "stmt := # assign_stmt\n" +
              "stmt := # decr_stmt\n" +
              "stmt := # if_stmt\n" +
              "stmt := # incr_stmt\n" +
              "stmt := # loop_stmt\n" +
              "stmt := # ret_stmt",
          },
        '__4 := # stmt@ifFalse\n__4 := # stmt@ifFalse __4\nassign_stmt := # let identifier "=" exp ";"\ndecr_stmt := # "--" identifier ";"\ndecr_stmt := # identifier "--" ";"\nif_stmt := # if exp "{" "}"\nif_stmt := # if exp "{" "}" else "{" "}"\nif_stmt := # if exp "{" "}" else "{" __4 "}"\nif_stmt := # if exp "{" __3 "}"\nif_stmt := # if exp "{" __3 "}" else "{" "}"\nif_stmt := # if exp "{" __3 "}" else "{" __4 "}"\nif_stmt := if exp "{" __3 "}" else "{" # "}"\nif_stmt := if exp "{" __3 "}" else "{" # __4 "}"\nincr_stmt := # "++" identifier ";"\nincr_stmt := # identifier "++" ";"\nloop_stmt := # do "{" "}" while exp ";"\nloop_stmt := # do "{" __2 "}" while exp ";"\nloop_stmt := # while exp "{" "}"\nloop_stmt := # while exp "{" __2 "}"\nret_stmt := # return exp ";"\nstmt := # assign_stmt\nstmt := # decr_stmt\nstmt := # if_stmt\nstmt := # incr_stmt\nstmt := # loop_stmt\nstmt := # ret_stmt':
          {
            candidates: [
              'if_stmt := if exp "{" __3 "}" else "{" # __4 "}"',
              'if_stmt := if exp "{" __3 "}" else "{" # "}"',
              "__4 := # stmt@ifFalse",
              "__4 := # stmt@ifFalse __4",
              "stmt := # assign_stmt",
              "stmt := # ret_stmt",
              "stmt := # incr_stmt",
              "stmt := # decr_stmt",
              "stmt := # if_stmt",
              "stmt := # loop_stmt",
              'assign_stmt := # let identifier "=" exp ";"',
              'ret_stmt := # return exp ";"',
              'incr_stmt := # "++" identifier ";"',
              'incr_stmt := # identifier "++" ";"',
              'decr_stmt := # "--" identifier ";"',
              'decr_stmt := # identifier "--" ";"',
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" __3 "}" else "{" "}"',
              'if_stmt := # if exp "{" __3 "}"',
              'if_stmt := # if exp "{" "}" else "{" __4 "}"',
              'if_stmt := # if exp "{" "}" else "{" "}"',
              'if_stmt := # if exp "{" "}"',
              'loop_stmt := # do "{" __2 "}" while exp ";"',
              'loop_stmt := # do "{" "}" while exp ";"',
              'loop_stmt := # while exp "{" __2 "}"',
              'loop_stmt := # while exp "{" "}"',
            ],
            nextMap: {
              __0: null,
              fn: null,
              identifier:
                'decr_stmt := identifier # "--" ";"\n' +
                'incr_stmt := identifier # "++" ";"',
              '"("': null,
              param: null,
              __1: null,
              '")"': null,
              '"{"': null,
              __2: null,
              '"}"': 'if_stmt := if exp "{" __3 "}" else "{" "}" #',
              if:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'if_stmt := if # exp "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := if # exp "{" __3 "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := if # exp "{" __3 "}" else "{" __4 "}"',
              exp: null,
              __3: null,
              else: null,
              __4: 'if_stmt := if exp "{" __3 "}" else "{" __4 # "}"',
              do:
                'loop_stmt := do # "{" "}" while exp ";"\n' +
                'loop_stmt := do # "{" __2 "}" while exp ";"',
              while:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'loop_stmt := while # exp "{" "}"\n' +
                'loop_stmt := while # exp "{" __2 "}"',
              '";"': null,
              '"++"': 'incr_stmt := "++" # identifier ";"',
              '"--"': 'decr_stmt := "--" # identifier ";"',
              assign_stmt: "stmt := assign_stmt #",
              ret_stmt: "stmt := ret_stmt #",
              incr_stmt: "stmt := incr_stmt #",
              decr_stmt: "stmt := decr_stmt #",
              if_stmt: "stmt := if_stmt #",
              loop_stmt: "stmt := loop_stmt #",
              let: 'assign_stmt := let # identifier "=" exp ";"',
              '"="': null,
              return:
                'exp := # "-" exp\n' +
                'exp := # exp "%" exp\n' +
                'exp := # exp "*" exp\n' +
                'exp := # exp "+" exp\n' +
                'exp := # exp "-" exp\n' +
                'exp := # exp "/" exp\n' +
                "exp := # identifier\n" +
                "exp := # integer\n" +
                'ret_stmt := return # exp ";"',
              '"+"': null,
              '"-"': null,
              '"*"': null,
              '"/"': null,
              '"%"': null,
              integer: null,
              fn_def: null,
              '","': null,
              stmt:
                "__4 := # stmt@ifFalse\n" +
                "__4 := # stmt@ifFalse __4\n" +
                "__4 := stmt@ifFalse #\n" +
                "__4 := stmt@ifFalse # __4\n" +
                'assign_stmt := # let identifier "=" exp ";"\n' +
                'decr_stmt := # "--" identifier ";"\n' +
                'decr_stmt := # identifier "--" ";"\n' +
                'if_stmt := # if exp "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
                'if_stmt := # if exp "{" __3 "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
                'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
                'incr_stmt := # "++" identifier ";"\n' +
                'incr_stmt := # identifier "++" ";"\n' +
                'loop_stmt := # do "{" "}" while exp ";"\n' +
                'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
                'loop_stmt := # while exp "{" "}"\n' +
                'loop_stmt := # while exp "{" __2 "}"\n' +
                'ret_stmt := # return exp ";"\n' +
                "stmt := # assign_stmt\n" +
                "stmt := # decr_stmt\n" +
                "stmt := # if_stmt\n" +
                "stmt := # incr_stmt\n" +
                "stmt := # loop_stmt\n" +
                "stmt := # ret_stmt",
            },
            str:
              "__4 := # stmt@ifFalse\n" +
              "__4 := # stmt@ifFalse __4\n" +
              'assign_stmt := # let identifier "=" exp ";"\n' +
              'decr_stmt := # "--" identifier ";"\n' +
              'decr_stmt := # identifier "--" ";"\n' +
              'if_stmt := # if exp "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" "}" else "{" __4 "}"\n' +
              'if_stmt := # if exp "{" __3 "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" "}"\n' +
              'if_stmt := # if exp "{" __3 "}" else "{" __4 "}"\n' +
              'if_stmt := if exp "{" __3 "}" else "{" # "}"\n' +
              'if_stmt := if exp "{" __3 "}" else "{" # __4 "}"\n' +
              'incr_stmt := # "++" identifier ";"\n' +
              'incr_stmt := # identifier "++" ";"\n' +
              'loop_stmt := # do "{" "}" while exp ";"\n' +
              'loop_stmt := # do "{" __2 "}" while exp ";"\n' +
              'loop_stmt := # while exp "{" "}"\n' +
              'loop_stmt := # while exp "{" __2 "}"\n' +
              'ret_stmt := # return exp ";"\n' +
              "stmt := # assign_stmt\n" +
              "stmt := # decr_stmt\n" +
              "stmt := # if_stmt\n" +
              "stmt := # incr_stmt\n" +
              "stmt := # loop_stmt\n" +
              "stmt := # ret_stmt",
          },
        'loop_stmt := do "{" __2 "}" while exp ";" #': {
          candidates: ['loop_stmt := do "{" __2 "}" while exp ";" #'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'loop_stmt := do "{" __2 "}" while exp ";" #',
        },
        'if_stmt := if exp "{" "}" else "{" __4 "}" #': {
          candidates: ['if_stmt := if exp "{" "}" else "{" __4 "}" #'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'if_stmt := if exp "{" "}" else "{" __4 "}" #',
        },
        "__4 := stmt@ifFalse __4 #": {
          candidates: ["__4 := stmt@ifFalse __4 #"],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: "__4 := stmt@ifFalse __4 #",
        },
        'if_stmt := if exp "{" __3 "}" else "{" "}" #': {
          candidates: ['if_stmt := if exp "{" __3 "}" else "{" "}" #'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'if_stmt := if exp "{" __3 "}" else "{" "}" #',
        },
        'if_stmt := if exp "{" __3 "}" else "{" __4 # "}"': {
          candidates: ['if_stmt := if exp "{" __3 "}" else "{" __4 # "}"'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': 'if_stmt := if exp "{" __3 "}" else "{" __4 "}" #',
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'if_stmt := if exp "{" __3 "}" else "{" __4 # "}"',
        },
        'if_stmt := if exp "{" __3 "}" else "{" __4 "}" #': {
          candidates: ['if_stmt := if exp "{" __3 "}" else "{" __4 "}" #'],
          nextMap: {
            __0: null,
            fn: null,
            identifier: null,
            '"("': null,
            param: null,
            __1: null,
            '")"': null,
            '"{"': null,
            __2: null,
            '"}"': null,
            if: null,
            exp: null,
            __3: null,
            else: null,
            __4: null,
            do: null,
            while: null,
            '";"': null,
            '"++"': null,
            '"--"': null,
            assign_stmt: null,
            ret_stmt: null,
            incr_stmt: null,
            decr_stmt: null,
            if_stmt: null,
            loop_stmt: null,
            let: null,
            '"="': null,
            return: null,
            '"+"': null,
            '"-"': null,
            '"*"': null,
            '"/"': null,
            '"%"': null,
            integer: null,
            fn_def: null,
            '","': null,
            stmt: null,
          },
          str: 'if_stmt := if exp "{" __3 "}" else "{" __4 "}" #',
        },
      },
      entryState:
        "__0 := # fn_def\n" +
        "__0 := # fn_def __0\n" +
        'fn_def := # fn identifier "(" ")" "{" "}"\n' +
        'fn_def := # fn identifier "(" ")" "{" __2 "}"\n' +
        'fn_def := # fn identifier "(" param ")" "{" "}"\n' +
        'fn_def := # fn identifier "(" param ")" "{" __2 "}"\n' +
        'fn_def := # fn identifier "(" param __1 ")" "{" "}"\n' +
        'fn_def := # fn identifier "(" param __1 ")" "{" __2 "}"\n' +
        "fn_defs := # __0",
      NTClosures: {
        fn_defs: [
          "{ fn_defs: `__0` }",
          "{ __0: `fn_def` }",
          "{ __0: `fn_def __0` }",
          '{ fn_def: `fn identifier "(" param __1 ")" "{" __2 "}"` }',
          '{ fn_def: `fn identifier "(" param __1 ")" "{" "}"` }',
          '{ fn_def: `fn identifier "(" param ")" "{" __2 "}"` }',
          '{ fn_def: `fn identifier "(" param ")" "{" "}"` }',
          '{ fn_def: `fn identifier "(" ")" "{" __2 "}"` }',
          '{ fn_def: `fn identifier "(" ")" "{" "}"` }',
        ],
        fn_def: [
          '{ fn_def: `fn identifier "(" param __1 ")" "{" __2 "}"` }',
          '{ fn_def: `fn identifier "(" param __1 ")" "{" "}"` }',
          '{ fn_def: `fn identifier "(" param ")" "{" __2 "}"` }',
          '{ fn_def: `fn identifier "(" param ")" "{" "}"` }',
          '{ fn_def: `fn identifier "(" ")" "{" __2 "}"` }',
          '{ fn_def: `fn identifier "(" ")" "{" "}"` }',
        ],
        param: ["{ param: `identifier` }"],
        if_stmt: [
          '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
          '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
          '{ if_stmt: `if exp "{" __3 "}"` }',
          '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
          '{ if_stmt: `if exp "{" "}" else "{" "}"` }',
          '{ if_stmt: `if exp "{" "}"` }',
        ],
        loop_stmt: [
          '{ loop_stmt: `do "{" __2 "}" while exp ";"` }',
          '{ loop_stmt: `do "{" "}" while exp ";"` }',
          '{ loop_stmt: `while exp "{" __2 "}"` }',
          '{ loop_stmt: `while exp "{" "}"` }',
        ],
        incr_stmt: [
          '{ incr_stmt: `"++" identifier ";"` }',
          '{ incr_stmt: `identifier "++" ";"` }',
        ],
        decr_stmt: [
          '{ decr_stmt: `"--" identifier ";"` }',
          '{ decr_stmt: `identifier "--" ";"` }',
        ],
        stmt: [
          "{ stmt: `assign_stmt` }",
          "{ stmt: `ret_stmt` }",
          "{ stmt: `incr_stmt` }",
          "{ stmt: `decr_stmt` }",
          "{ stmt: `if_stmt` }",
          "{ stmt: `loop_stmt` }",
          '{ assign_stmt: `let identifier "=" exp ";"` }',
          '{ ret_stmt: `return exp ";"` }',
          '{ incr_stmt: `"++" identifier ";"` }',
          '{ incr_stmt: `identifier "++" ";"` }',
          '{ decr_stmt: `"--" identifier ";"` }',
          '{ decr_stmt: `identifier "--" ";"` }',
          '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
          '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
          '{ if_stmt: `if exp "{" __3 "}"` }',
          '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
          '{ if_stmt: `if exp "{" "}" else "{" "}"` }',
          '{ if_stmt: `if exp "{" "}"` }',
          '{ loop_stmt: `do "{" __2 "}" while exp ";"` }',
          '{ loop_stmt: `do "{" "}" while exp ";"` }',
          '{ loop_stmt: `while exp "{" __2 "}"` }',
          '{ loop_stmt: `while exp "{" "}"` }',
        ],
        assign_stmt: ['{ assign_stmt: `let identifier "=" exp ";"` }'],
        ret_stmt: ['{ ret_stmt: `return exp ";"` }'],
        exp: [
          '{ exp: `exp "+" exp` }',
          '{ exp: `exp "-" exp` }',
          '{ exp: `exp "*" exp` }',
          '{ exp: `exp "/" exp` }',
          '{ exp: `exp "%" exp` }',
          '{ exp: `"-" exp` }',
          "{ exp: `integer` }",
          "{ exp: `identifier` }",
        ],
        __0: [
          "{ __0: `fn_def` }",
          "{ __0: `fn_def __0` }",
          '{ fn_def: `fn identifier "(" param __1 ")" "{" __2 "}"` }',
          '{ fn_def: `fn identifier "(" param __1 ")" "{" "}"` }',
          '{ fn_def: `fn identifier "(" param ")" "{" __2 "}"` }',
          '{ fn_def: `fn identifier "(" param ")" "{" "}"` }',
          '{ fn_def: `fn identifier "(" ")" "{" __2 "}"` }',
          '{ fn_def: `fn identifier "(" ")" "{" "}"` }',
        ],
        __1: ['{ __1: `"," param` }', '{ __1: `"," param __1` }'],
        __2: [
          "{ __2: `stmt` }",
          "{ __2: `stmt __2` }",
          "{ stmt: `assign_stmt` }",
          "{ stmt: `ret_stmt` }",
          "{ stmt: `incr_stmt` }",
          "{ stmt: `decr_stmt` }",
          "{ stmt: `if_stmt` }",
          "{ stmt: `loop_stmt` }",
          '{ assign_stmt: `let identifier "=" exp ";"` }',
          '{ ret_stmt: `return exp ";"` }',
          '{ incr_stmt: `"++" identifier ";"` }',
          '{ incr_stmt: `identifier "++" ";"` }',
          '{ decr_stmt: `"--" identifier ";"` }',
          '{ decr_stmt: `identifier "--" ";"` }',
          '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
          '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
          '{ if_stmt: `if exp "{" __3 "}"` }',
          '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
          '{ if_stmt: `if exp "{" "}" else "{" "}"` }',
          '{ if_stmt: `if exp "{" "}"` }',
          '{ loop_stmt: `do "{" __2 "}" while exp ";"` }',
          '{ loop_stmt: `do "{" "}" while exp ";"` }',
          '{ loop_stmt: `while exp "{" __2 "}"` }',
          '{ loop_stmt: `while exp "{" "}"` }',
        ],
        __3: [
          "{ __3: `stmt@ifTrue` }",
          "{ __3: `stmt@ifTrue __3` }",
          "{ stmt: `assign_stmt` }",
          "{ stmt: `ret_stmt` }",
          "{ stmt: `incr_stmt` }",
          "{ stmt: `decr_stmt` }",
          "{ stmt: `if_stmt` }",
          "{ stmt: `loop_stmt` }",
          '{ assign_stmt: `let identifier "=" exp ";"` }',
          '{ ret_stmt: `return exp ";"` }',
          '{ incr_stmt: `"++" identifier ";"` }',
          '{ incr_stmt: `identifier "++" ";"` }',
          '{ decr_stmt: `"--" identifier ";"` }',
          '{ decr_stmt: `identifier "--" ";"` }',
          '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
          '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
          '{ if_stmt: `if exp "{" __3 "}"` }',
          '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
          '{ if_stmt: `if exp "{" "}" else "{" "}"` }',
          '{ if_stmt: `if exp "{" "}"` }',
          '{ loop_stmt: `do "{" __2 "}" while exp ";"` }',
          '{ loop_stmt: `do "{" "}" while exp ";"` }',
          '{ loop_stmt: `while exp "{" __2 "}"` }',
          '{ loop_stmt: `while exp "{" "}"` }',
        ],
        __4: [
          "{ __4: `stmt@ifFalse` }",
          "{ __4: `stmt@ifFalse __4` }",
          "{ stmt: `assign_stmt` }",
          "{ stmt: `ret_stmt` }",
          "{ stmt: `incr_stmt` }",
          "{ stmt: `decr_stmt` }",
          "{ stmt: `if_stmt` }",
          "{ stmt: `loop_stmt` }",
          '{ assign_stmt: `let identifier "=" exp ";"` }',
          '{ ret_stmt: `return exp ";"` }',
          '{ incr_stmt: `"++" identifier ";"` }',
          '{ incr_stmt: `identifier "++" ";"` }',
          '{ decr_stmt: `"--" identifier ";"` }',
          '{ decr_stmt: `identifier "--" ";"` }',
          '{ if_stmt: `if exp "{" __3 "}" else "{" __4 "}"` }',
          '{ if_stmt: `if exp "{" __3 "}" else "{" "}"` }',
          '{ if_stmt: `if exp "{" __3 "}"` }',
          '{ if_stmt: `if exp "{" "}" else "{" __4 "}"` }',
          '{ if_stmt: `if exp "{" "}" else "{" "}"` }',
          '{ if_stmt: `if exp "{" "}"` }',
          '{ loop_stmt: `do "{" __2 "}" while exp ";"` }',
          '{ loop_stmt: `do "{" "}" while exp ";"` }',
          '{ loop_stmt: `while exp "{" __2 "}"` }',
          '{ loop_stmt: `while exp "{" "}"` }',
        ],
      },
      firstSets: {
        fn_defs: ["__0", "fn_def", "fn"],
        fn_def: ["fn"],
        param: ["identifier"],
        if_stmt: ["if"],
        loop_stmt: ["do", "while"],
        incr_stmt: ['"++"', "identifier"],
        decr_stmt: ['"--"', "identifier"],
        stmt: [
          "assign_stmt",
          "ret_stmt",
          "incr_stmt",
          "decr_stmt",
          "if_stmt",
          "loop_stmt",
          "let",
          "return",
          '"++"',
          "identifier",
          '"--"',
          "if",
          "do",
          "while",
        ],
        assign_stmt: ["let"],
        ret_stmt: ["return"],
        exp: ["exp", '"-"', "integer", "identifier"],
        __0: ["fn_def", "fn"],
        __1: ['","'],
        __2: [
          "stmt",
          "assign_stmt",
          "ret_stmt",
          "incr_stmt",
          "decr_stmt",
          "if_stmt",
          "loop_stmt",
          "let",
          "return",
          '"++"',
          "identifier",
          '"--"',
          "if",
          "do",
          "while",
        ],
        __3: [
          "stmt@ifTrue",
          "assign_stmt",
          "ret_stmt",
          "incr_stmt",
          "decr_stmt",
          "if_stmt",
          "loop_stmt",
          "let",
          "return",
          '"++"',
          "identifier",
          '"--"',
          "if",
          "do",
          "while",
        ],
        __4: [
          "stmt@ifFalse",
          "assign_stmt",
          "ret_stmt",
          "incr_stmt",
          "decr_stmt",
          "if_stmt",
          "loop_stmt",
          "let",
          "return",
          '"++"',
          "identifier",
          '"--"',
          "if",
          "do",
          "while",
        ],
      },
      followSets: {
        fn_defs: [],
        fn_def: ["__0", "fn_def", "fn"],
        param: ["__1", '","', '")"'],
        if_stmt: [
          "__2",
          "stmt",
          "assign_stmt",
          "ret_stmt",
          "incr_stmt",
          "decr_stmt",
          "if_stmt",
          "loop_stmt",
          "let",
          "return",
          '"++"',
          "identifier",
          '"--"',
          "if",
          "do",
          "while",
          "__3",
          "__4",
          '"}"',
        ],
        loop_stmt: [
          "__2",
          "stmt",
          "assign_stmt",
          "ret_stmt",
          "incr_stmt",
          "decr_stmt",
          "if_stmt",
          "loop_stmt",
          "let",
          "return",
          '"++"',
          "identifier",
          '"--"',
          "if",
          "do",
          "while",
          "__3",
          "__4",
          '"}"',
        ],
        incr_stmt: [
          "__2",
          "stmt",
          "assign_stmt",
          "ret_stmt",
          "incr_stmt",
          "decr_stmt",
          "if_stmt",
          "loop_stmt",
          "let",
          "return",
          '"++"',
          "identifier",
          '"--"',
          "if",
          "do",
          "while",
          "__3",
          "__4",
          '"}"',
        ],
        decr_stmt: [
          "__2",
          "stmt",
          "assign_stmt",
          "ret_stmt",
          "incr_stmt",
          "decr_stmt",
          "if_stmt",
          "loop_stmt",
          "let",
          "return",
          '"++"',
          "identifier",
          '"--"',
          "if",
          "do",
          "while",
          "__3",
          "__4",
          '"}"',
        ],
        stmt: [
          "__2",
          "stmt",
          "assign_stmt",
          "ret_stmt",
          "incr_stmt",
          "decr_stmt",
          "if_stmt",
          "loop_stmt",
          "let",
          "return",
          '"++"',
          "identifier",
          '"--"',
          "if",
          "do",
          "while",
          "__3",
          "__4",
          '"}"',
        ],
        assign_stmt: [
          "__2",
          "stmt",
          "assign_stmt",
          "ret_stmt",
          "incr_stmt",
          "decr_stmt",
          "if_stmt",
          "loop_stmt",
          "let",
          "return",
          '"++"',
          "identifier",
          '"--"',
          "if",
          "do",
          "while",
          "__3",
          "__4",
          '"}"',
        ],
        ret_stmt: [
          "__2",
          "stmt",
          "assign_stmt",
          "ret_stmt",
          "incr_stmt",
          "decr_stmt",
          "if_stmt",
          "loop_stmt",
          "let",
          "return",
          '"++"',
          "identifier",
          '"--"',
          "if",
          "do",
          "while",
          "__3",
          "__4",
          '"}"',
        ],
        exp: ['"{"', '";"', '"+"', '"-"', '"*"', '"/"', '"%"'],
        __0: [],
        __1: ['")"'],
        __2: ['"}"'],
        __3: ['"}"'],
        __4: ['"}"'],
        fn: ["identifier"],
        identifier: [
          '"("',
          '";"',
          '"++"',
          '"--"',
          '"="',
          "__1",
          '","',
          '")"',
          '"{"',
          '"+"',
          '"-"',
          '"*"',
          '"/"',
          '"%"',
        ],
        "": [
          "param",
          "identifier",
          '"{"',
          "__2",
          "stmt",
          "assign_stmt",
          "ret_stmt",
          "incr_stmt",
          "decr_stmt",
          "if_stmt",
          "loop_stmt",
          "let",
          "return",
          '"++"',
          '"--"',
          "if",
          "do",
          "while",
          '"}"',
          '")"',
          "__3",
          "else",
          "__4",
          '";"',
          "exp",
          '"-"',
          "integer",
          "__0",
          "fn_def",
          "fn",
        ],
        if: ["exp", '"-"', "integer", "identifier"],
        else: ['"{"'],
        do: ['"{"'],
        while: ["exp", '"-"', "integer", "identifier"],
        let: ["identifier"],
        return: ["exp", '"-"', "integer", "identifier"],
        integer: ['"{"', '";"', '"+"', '"-"', '"*"', '"/"', '"%"'],
      },
      cascadeQueryPrefix: "__",
    },
  },
};
